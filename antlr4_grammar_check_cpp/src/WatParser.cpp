
// Generated from WatParser.g4 by ANTLR 4.13.1


#include "WatParserListener.h"
#include "WatParserVisitor.h"

#include "WatParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct WatParserStaticData final {
  WatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  WatParserStaticData(const WatParserStaticData&) = delete;
  WatParserStaticData(WatParserStaticData&&) = delete;
  WatParserStaticData& operator=(const WatParserStaticData&) = delete;
  WatParserStaticData& operator=(WatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag watparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
WatParserStaticData *watparserParserStaticData = nullptr;

void watparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (watparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(watparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<WatParserStaticData>(
    std::vector<std::string>{
      "value", "name", "null_opt", "heap_type", "ref_type", "val_type", 
      "global_type", "storage_type", "field_type", "struct_type", "array_type", 
      "func_type", "str_type", "sub_type", "table_type", "memory_type", 
      "type_use", "nat32", "num", "var_", "bind_var", "instr_list", "instr", 
      "plain_instr", "select_instr_instr_list", "call_instr_instr_list", 
      "call_instr_type_instr_list", "block_instr", "block", "block_param_body", 
      "handler_block", "handler_block_param_body", "handler_block_body", 
      "expr", "select_expr_results", "call_expr_type", "call_expr_params", 
      "call_expr_results", "if_block", "if_block_result_body", "try_block", 
      "try_block_param_body", "try_block_handler_body", "const_expr", "func_", 
      "func_fields", "func_fields_import", "func_fields_import_result", 
      "func_fields_body", "func_result_body", "func_body", "table_use", 
      "memory_use", "offset", "elem_kind", "elem_expr", "elem_list", "elem", 
      "table", "table_fields", "data", "memory", "memory_fields", "tag", 
      "tag_fields", "tag_fields_import", "tag_fields_import_result", "sglobal", 
      "global_fields", "import_desc", "simport", "inline_import", "export_desc", 
      "export_", "inline_export", "type_def", "rec_type", "type_", "start_", 
      "module_field", "module_", "inline_module", "script_module", "action_", 
      "assertion", "cmd", "shared_cmd_list", "meta", "literal_num", "literal_vec", 
      "literal_ref", "literal", "literal_list", "numpat", "result", "script", 
      "module"
    },
    std::vector<std::string>{
      "", "'('", "')'", "", "", "", "", "", "", "", "", "", "", "'any'", 
      "'anyref'", "'none'", "'nullref'", "'eq'", "'eqref'", "'i31'", "'i31ref'", 
      "'structref'", "'arrayref'", "'nofunc'", "'funcref'", "'mut'", "'shared'", 
      "'nullfuncref'", "'extern'", "'noextern'", "'externref'", "'nullexternref'", 
      "'ref'", "'null'", "'exn'", "'exnref'", "'array'", "'struct'", "'field'", 
      "'sub'", "'final'", "'rec'", "'ref.null'", "'ref.func'", "'ref.struct'", 
      "'ref.array'", "'ref.host'", "'ref.extern'", "'ref.is_null'", "'ref.as_non_null'", 
      "'ref.test'", "'ref.cast'", "'ref.eq'", "'ref.i31'", "'ref.exn'", 
      "'try_table'", "'catch'", "'catch_ref'", "'catch_all'", "'catch_all_ref'", 
      "'throw'", "'throw_ref'", "", "", "", "'struct.set'", "", "'array.new_fixed'", 
      "'array.new_elem'", "'array.new_data'", "", "'array.set'", "'array.len'", 
      "'array.copy'", "'array.fill'", "'array.init_data'", "'array.init_elem'", 
      "", "'memory.atomic.notify'", "", "'atomic.fence'", "", "", "", "", 
      "'nop'", "'unreachable'", "'drop'", "'block'", "'loop'", "'end'", 
      "'br'", "'br_if'", "'br_table'", "'return'", "'if'", "'then'", "'else'", 
      "'select'", "'call'", "'call_indirect'", "'call_ref'", "'return_call'", 
      "'return_call_ref'", "'return_call_indirect'", "", "", "'local.get'", 
      "'local.set'", "'local.tee'", "'global.get'", "'global.set'", "'table_get'", 
      "'table_set'", "'table_size'", "'table_grow'", "'table_fill'", "'table_copy'", 
      "'table_init'", "'data.drop'", "'elem.drop'", "", "", "", "", "", 
      "", "", "", "", "", "'v128.store'", "", "", "", "", "", "", "", "", 
      "'i8x16.shuffle'", "", "", "", "'memory.size'", "'memory.grow'", "'memory.fill'", 
      "'memory.copy'", "'memory.init'", "'type'", "'func'", "'start'", "'param'", 
      "'result'", "'local'", "'global'", "'table'", "'memory'", "'elem'", 
      "'data'", "'offset'", "'import'", "'export'", "'declare'", "'item'", 
      "'tag'", "'module'", "'binary'", "'quote'", "'either'", "'thread'", 
      "'wait'", "'script'", "'register'", "'invoke'", "'get'", "'assert_malformed'", 
      "'assert_invalid'", "'assert_unlinkable'", "'assert_return'", "'assert_exception'", 
      "'assert_trap'", "'assert_exhaustion'", "'input'", "'output'"
    },
    std::vector<std::string>{
      "", "LPAR", "RPAR", "NAT", "INT", "FLOAT", "STRING_", "NUM_TYPE", 
      "PACK_TYPE", "VEC_TYPE", "VEC_SHAPE", "CONST", "VEC_CONST", "ANY", 
      "ANYREF", "NONE", "NULLREF", "EQ", "EQREF", "I31", "I31REF", "STRUCTREF", 
      "ARRAYREF", "NOFUNC", "FUNCREF", "MUT", "SHARED", "NULLFUNCREF", "EXTERN", 
      "NOEXTERN", "EXTERNREF", "NULLEXTERNREF", "REF", "NULL", "EXN", "EXNREF", 
      "ARRAY", "STRUCT", "FIELD", "SUB", "FINAL", "REC", "REF_NULL", "REF_FUNC", 
      "REF_STRUCT", "REF_ARRAY", "REF_HOST", "REF_EXTERN", "REF_IS_NULL", 
      "REF_AS_NON_NULL", "REF_TEST", "REF_CAST", "REF_EQ", "REF_I31", "REF_EXN", 
      "TRY_TABLE", "CATCH", "CATCH_REF", "CATCH_ALL", "CATCH_ALL_REF", "THROW", 
      "THROW_REF", "I31_GET", "STRUCT_NEW", "STRUCT_GET", "STRUCT_SET", 
      "ARRAY_NEW", "ARRAY_NEW_FIXED", "ARRAY_NEW_ELEM", "ARRAY_NEW_DATA", 
      "ARRAY_GET", "ARRAY_SET", "ARRAY_LEN", "ARRAY_COPY", "ARRAY_FILL", 
      "ARRAY_INIT_DATA", "ARRAY_INIT_ELEM", "EXTERN_CONVERT", "MEMORY_ATOMIC_NOTIFY", 
      "MEMORY_ATOMIC_WAIT", "ATOMIC_FENCE", "ATOMIC_LOAD", "ATOMIC_STORE", 
      "ATOMIC_RMW", "ATOMIC_RMW_CMPXCHG", "NOP", "UNREACHABLE", "DROP", 
      "BLOCK", "LOOP", "END", "BR", "BR_IF", "BR_TABLE", "RETURN", "IF", 
      "THEN", "ELSE", "SELECT", "CALL", "CALL_INDIRECT", "CALL_REF", "RETURN_CALL", 
      "RETURN_CALL_REF", "RETURN_CALL_INDIRECT", "BR_ON_NULL", "BR_ON_CAST", 
      "LOCAL_GET", "LOCAL_SET", "LOCAL_TEE", "GLOBAL_GET", "GLOBAL_SET", 
      "TABLE_GET", "TABLE_SET", "TABLE_SIZE", "TABLE_GROW", "TABLE_FILL", 
      "TABLE_COPY", "TABLE_INIT", "DATA_DROP", "ELEM_DROP", "LOAD", "STORE", 
      "OFFSET_EQ_NAT", "ALIGN_EQ_NAT", "UNARY", "BINARY", "TEST", "COMPARE", 
      "CONVERT", "VEC_LOAD", "VEC_STORE", "VEC_LOAD_LANE", "VEC_STORE_LANE", 
      "VEC_UNARY", "VEC_BINARY", "VEC_TERNARY", "VEC_TEST", "VEC_BITMASK", 
      "VEC_SHIFT", "VEC_SHUFFLE", "VEC_SPLAT", "VEC_EXTRACT", "VEC_REPLACE", 
      "MEMORY_SIZE", "MEMORY_GROW", "MEMORY_FILL", "MEMORY_COPY", "MEMORY_INIT", 
      "TYPE", "FUNC", "START_", "PARAM", "RESULT", "LOCAL", "GLOBAL", "TABLE", 
      "MEMORY", "ELEM", "DATA", "OFFSET", "IMPORT", "EXPORT", "DECLARE", 
      "ITEM", "TAG", "MODULE", "BIN", "QUOTE", "EITHER", "THREAD", "WAIT", 
      "SCRIPT", "REGISTER", "INVOKE", "GET", "ASSERT_MALFORMED", "ASSERT_INVALID", 
      "ASSERT_UNLINKABLE", "ASSERT_RETURN", "ASSERT_EXCEPTION", "ASSERT_TRAP", 
      "ASSERT_EXHAUSTION", "INPUT", "OUTPUT", "NAN_", "VAR", "SPACE", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,188,1819,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,1,0,1,0,1,1,1,
  	1,1,2,3,2,200,8,2,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,222,8,4,1,5,1,5,1,5,3,5,227,8,5,1,6,1,
  	6,1,6,1,6,1,6,1,6,3,6,235,8,6,1,7,1,7,3,7,239,8,7,1,8,1,8,1,8,1,8,1,8,
  	1,8,3,8,247,8,8,1,9,1,9,1,9,5,9,252,8,9,10,9,12,9,255,9,9,1,9,1,9,1,9,
  	3,9,260,8,9,1,9,5,9,263,8,9,10,9,12,9,266,9,9,1,10,1,10,1,11,1,11,1,11,
  	5,11,273,8,11,10,11,12,11,276,9,11,1,11,1,11,5,11,280,8,11,10,11,12,11,
  	283,9,11,1,11,1,11,1,11,1,11,3,11,289,8,11,1,11,5,11,292,8,11,10,11,12,
  	11,295,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,304,8,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,3,13,312,8,13,1,13,5,13,315,8,13,10,13,12,13,318,
  	9,13,1,13,1,13,1,13,3,13,323,8,13,1,14,1,14,3,14,327,8,14,1,14,1,14,1,
  	15,1,15,3,15,333,8,15,1,15,3,15,336,8,15,1,16,1,16,1,16,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,5,21,352,8,21,10,21,12,21,355,
  	9,21,1,21,3,21,358,8,21,1,21,3,21,361,8,21,3,21,363,8,21,1,22,1,22,1,
  	22,3,22,368,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,4,
  	23,380,8,23,11,23,12,23,381,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,3,23,412,8,23,1,23,1,23,3,23,416,8,23,1,23,
  	1,23,3,23,420,8,23,1,23,1,23,3,23,424,8,23,1,23,1,23,3,23,428,8,23,1,
  	23,1,23,1,23,1,23,3,23,434,8,23,1,23,1,23,1,23,3,23,439,8,23,1,23,1,23,
  	1,23,1,23,3,23,445,8,23,1,23,3,23,448,8,23,1,23,1,23,3,23,452,8,23,1,
  	23,3,23,455,8,23,1,23,1,23,3,23,459,8,23,1,23,3,23,462,8,23,1,23,1,23,
  	3,23,466,8,23,1,23,3,23,469,8,23,1,23,1,23,3,23,473,8,23,1,23,3,23,476,
  	8,23,1,23,1,23,1,23,3,23,481,8,23,1,23,3,23,484,8,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,5,23,562,8,23,10,23,12,23,565,9,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,5,23,575,8,23,10,23,12,23,578,9,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,3,23,587,8,23,1,23,3,23,590,8,23,1,23,1,23,3,23,594,
  	8,23,1,23,3,23,597,8,23,1,23,1,23,1,23,3,23,602,8,23,1,23,3,23,605,8,
  	23,1,23,1,23,3,23,609,8,23,1,23,3,23,612,8,23,1,23,1,23,3,23,616,8,23,
  	1,23,3,23,619,8,23,1,23,1,23,3,23,623,8,23,1,23,3,23,626,8,23,1,23,1,
  	23,1,23,3,23,631,8,23,1,24,1,24,1,24,1,24,5,24,637,8,24,10,24,12,24,640,
  	9,24,1,24,5,24,643,8,24,10,24,12,24,646,9,24,1,24,1,24,1,25,1,25,3,25,
  	652,8,25,1,25,1,25,1,25,3,25,657,8,25,1,25,3,25,660,8,25,1,26,3,26,663,
  	8,26,1,26,1,26,1,26,5,26,668,8,26,10,26,12,26,671,9,26,1,26,5,26,674,
  	8,26,10,26,12,26,677,9,26,1,26,1,26,1,26,5,26,682,8,26,10,26,12,26,685,
  	9,26,1,26,5,26,688,8,26,10,26,12,26,691,9,26,1,26,1,26,1,27,1,27,3,27,
  	697,8,27,1,27,1,27,1,27,3,27,702,8,27,1,27,1,27,3,27,706,8,27,1,27,1,
  	27,1,27,3,27,711,8,27,1,27,3,27,714,8,27,1,27,1,27,3,27,718,8,27,1,27,
  	1,27,3,27,722,8,27,1,27,1,27,1,27,3,27,727,8,27,3,27,729,8,27,1,28,3,
  	28,732,8,28,1,28,1,28,1,29,1,29,1,29,5,29,739,8,29,10,29,12,29,742,9,
  	29,1,29,5,29,745,8,29,10,29,12,29,748,9,29,1,29,1,29,1,29,5,29,753,8,
  	29,10,29,12,29,756,9,29,1,29,5,29,759,8,29,10,29,12,29,762,9,29,1,29,
  	1,29,1,30,3,30,767,8,30,1,30,1,30,1,31,1,31,1,31,5,31,774,8,31,10,31,
  	12,31,777,9,31,1,31,5,31,780,8,31,10,31,12,31,783,9,31,1,31,1,31,1,31,
  	5,31,788,8,31,10,31,12,31,791,9,31,1,31,5,31,794,8,31,10,31,12,31,797,
  	9,31,1,31,1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,808,8,32,1,32,
  	1,32,1,32,5,32,813,8,32,10,32,12,32,816,9,32,1,32,1,32,1,33,1,33,1,33,
  	5,33,823,8,33,10,33,12,33,826,9,33,1,33,1,33,1,33,1,33,3,33,832,8,33,
  	1,33,1,33,1,33,3,33,837,8,33,1,33,1,33,1,33,3,33,842,8,33,1,33,1,33,1,
  	33,3,33,847,8,33,1,33,1,33,1,33,3,33,852,8,33,1,33,1,33,1,33,3,33,857,
  	8,33,1,33,3,33,860,8,33,1,33,1,33,1,34,1,34,1,34,5,34,867,8,34,10,34,
  	12,34,870,9,34,1,34,5,34,873,8,34,10,34,12,34,876,9,34,1,34,5,34,879,
  	8,34,10,34,12,34,882,9,34,1,35,3,35,885,8,35,1,35,1,35,1,36,1,36,1,36,
  	5,36,892,8,36,10,36,12,36,895,9,36,1,36,5,36,898,8,36,10,36,12,36,901,
  	9,36,1,36,1,36,1,37,1,37,1,37,5,37,908,8,37,10,37,12,37,911,9,37,1,37,
  	5,37,914,8,37,10,37,12,37,917,9,37,1,37,5,37,920,8,37,10,37,12,37,923,
  	9,37,1,38,3,38,926,8,38,1,38,1,38,1,38,5,38,931,8,38,10,38,12,38,934,
  	9,38,1,38,5,38,937,8,38,10,38,12,38,940,9,38,1,38,1,38,1,39,1,39,1,39,
  	5,39,947,8,39,10,39,12,39,950,9,39,1,39,5,39,953,8,39,10,39,12,39,956,
  	9,39,1,39,5,39,959,8,39,10,39,12,39,962,9,39,1,39,1,39,1,39,1,39,1,39,
  	1,39,1,39,1,39,1,39,3,39,973,8,39,1,40,3,40,976,8,40,1,40,1,40,1,41,1,
  	41,1,41,5,41,983,8,41,10,41,12,41,986,9,41,1,41,5,41,989,8,41,10,41,12,
  	41,992,9,41,1,41,1,41,1,41,5,41,997,8,41,10,41,12,41,1000,9,41,1,41,5,
  	41,1003,8,41,10,41,12,41,1006,9,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,
  	1,42,1,42,3,42,1017,8,42,1,42,1,42,1,42,5,42,1022,8,42,10,42,12,42,1025,
  	9,42,1,42,1,42,1,43,1,43,1,44,1,44,1,44,3,44,1034,8,44,1,44,1,44,1,44,
  	1,45,3,45,1040,8,45,1,45,1,45,1,45,3,45,1045,8,45,1,45,1,45,1,45,1,45,
  	1,45,3,45,1052,8,45,1,46,1,46,1,46,5,46,1057,8,46,10,46,12,46,1060,9,
  	46,1,46,1,46,1,46,1,46,1,46,1,46,1,46,5,46,1069,8,46,10,46,12,46,1072,
  	9,46,1,46,1,46,1,47,1,47,1,47,5,47,1079,8,47,10,47,12,47,1082,9,47,1,
  	47,5,47,1085,8,47,10,47,12,47,1088,9,47,1,48,1,48,1,48,5,48,1093,8,48,
  	10,48,12,48,1096,9,48,1,48,1,48,1,48,1,48,1,48,1,48,1,48,5,48,1105,8,
  	48,10,48,12,48,1108,9,48,1,48,1,48,1,49,1,49,1,49,5,49,1115,8,49,10,49,
  	12,49,1118,9,49,1,49,5,49,1121,8,49,10,49,12,49,1124,9,49,1,49,1,49,1,
  	50,1,50,1,50,1,50,1,50,1,50,5,50,1134,8,50,10,50,12,50,1137,9,50,3,50,
  	1139,8,50,1,50,5,50,1142,8,50,10,50,12,50,1145,9,50,1,50,1,50,1,51,1,
  	51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,
  	53,3,53,1165,8,53,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,55,3,55,1175,8,
  	55,1,56,1,56,5,56,1179,8,56,10,56,12,56,1182,9,56,1,56,1,56,5,56,1186,
  	8,56,10,56,12,56,1189,9,56,3,56,1191,8,56,1,57,1,57,1,57,3,57,1196,8,
  	57,1,57,1,57,1,57,1,57,3,57,1202,8,57,1,57,3,57,1205,8,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,3,57,1213,8,57,1,57,1,57,5,57,1217,8,57,10,57,12,57,
  	1220,9,57,1,57,1,57,3,57,1224,8,57,1,58,1,58,1,58,3,58,1229,8,58,1,58,
  	1,58,1,58,1,59,1,59,1,59,1,59,3,59,1238,8,59,1,59,1,59,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,5,59,1250,8,59,10,59,12,59,1253,9,59,1,59,5,
  	59,1256,8,59,10,59,12,59,1259,9,59,3,59,1261,8,59,1,59,1,59,3,59,1265,
  	8,59,1,60,1,60,1,60,3,60,1270,8,60,1,60,1,60,1,60,5,60,1275,8,60,10,60,
  	12,60,1278,9,60,1,60,1,60,1,60,1,60,1,60,3,60,1285,8,60,1,60,3,60,1288,
  	8,60,1,60,5,60,1291,8,60,10,60,12,60,1294,9,60,1,60,3,60,1297,8,60,1,
  	61,1,61,1,61,3,61,1302,8,61,1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,
  	62,1,62,1,62,1,62,1,62,5,62,1317,8,62,10,62,12,62,1320,9,62,1,62,3,62,
  	1323,8,62,1,63,1,63,1,63,3,63,1328,8,63,1,63,1,63,1,63,1,64,5,64,1334,
  	8,64,10,64,12,64,1337,9,64,1,64,3,64,1340,8,64,1,64,1,64,5,64,1344,8,
  	64,10,64,12,64,1347,9,64,1,64,1,64,3,64,1351,8,64,1,64,1,64,3,64,1355,
  	8,64,1,65,1,65,1,65,5,65,1360,8,65,10,65,12,65,1363,9,65,1,65,1,65,1,
  	65,3,65,1368,8,65,1,65,5,65,1371,8,65,10,65,12,65,1374,9,65,1,65,1,65,
  	1,66,1,66,1,66,5,66,1381,8,66,10,66,12,66,1384,9,66,1,66,5,66,1387,8,
  	66,10,66,12,66,1390,9,66,1,67,1,67,1,67,3,67,1395,8,67,1,67,1,67,1,67,
  	1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,1,68,3,68,1409,8,68,1,69,1,69,
  	1,69,3,69,1414,8,69,1,69,1,69,3,69,1418,8,69,1,69,1,69,1,69,1,69,1,69,
  	3,69,1425,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1433,8,69,1,69,1,69,
  	1,69,1,69,1,69,1,69,3,69,1441,8,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,
  	1449,8,69,1,69,1,69,3,69,1453,8,69,1,69,1,69,3,69,1457,8,69,1,70,1,70,
  	1,70,1,70,1,70,1,70,1,70,1,71,1,71,1,71,1,71,1,71,1,71,1,72,1,72,1,72,
  	1,72,1,72,1,73,1,73,1,73,1,73,1,73,1,73,1,74,1,74,1,74,1,74,1,74,1,75,
  	1,75,1,75,3,75,1491,8,75,1,75,1,75,1,75,1,76,1,76,1,76,1,76,5,76,1500,
  	8,76,10,76,12,76,1503,9,76,1,76,3,76,1506,8,76,1,77,1,77,1,78,1,78,1,
  	78,1,78,1,78,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,1,79,4,
  	79,1526,8,79,11,79,12,79,1527,1,80,1,80,1,80,3,80,1533,8,80,1,80,5,80,
  	1536,8,80,10,80,12,80,1539,9,80,1,80,1,80,1,81,3,81,1544,8,81,1,82,1,
  	82,1,82,1,82,3,82,1550,8,82,1,82,1,82,5,82,1554,8,82,10,82,12,82,1557,
  	9,82,1,82,3,82,1560,8,82,1,83,1,83,1,83,3,83,1565,8,83,1,83,1,83,1,83,
  	1,83,1,83,1,83,1,83,3,83,1574,8,83,1,83,1,83,1,83,3,83,1579,8,83,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,
  	1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,5,84,
  	1609,8,84,10,84,12,84,1612,9,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,
  	84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,1,84,3,84,1633,8,
  	84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1642,8,85,1,85,1,85,1,85,1,
  	85,1,85,3,85,1649,8,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1657,8,85,1,
  	85,1,85,3,85,1661,8,85,1,86,1,86,1,86,1,86,1,86,1,86,1,86,5,86,1670,8,
  	86,10,86,12,86,1673,9,86,1,86,5,86,1676,8,86,10,86,12,86,1679,9,86,1,
  	87,1,87,1,87,3,87,1684,8,87,1,87,5,87,1687,8,87,10,87,12,87,1690,9,87,
  	1,87,1,87,1,87,1,87,3,87,1696,8,87,1,87,1,87,1,87,1,87,1,87,3,87,1703,
  	8,87,1,87,1,87,1,87,1,87,1,87,3,87,1710,8,87,1,87,3,87,1713,8,87,1,88,
  	1,88,1,88,1,88,1,88,1,89,1,89,1,89,1,89,5,89,1724,8,89,10,89,12,89,1727,
  	9,89,1,89,1,89,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,1,90,
  	1,90,1,90,3,90,1744,8,90,1,91,1,91,1,91,3,91,1749,8,91,1,92,5,92,1752,
  	8,92,10,92,12,92,1755,9,92,1,93,1,93,3,93,1759,8,93,1,94,1,94,1,94,1,
  	94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,1,94,5,94,1774,8,94,10,94,
  	12,94,1777,9,94,1,94,1,94,1,94,1,94,5,94,1783,8,94,10,94,12,94,1786,9,
  	94,1,94,3,94,1789,8,94,1,95,5,95,1792,8,95,10,95,12,95,1795,9,95,1,95,
  	1,95,4,95,1799,8,95,11,95,12,95,1800,1,95,1,95,3,95,1805,8,95,1,96,1,
  	96,1,96,1,96,5,96,1811,8,96,10,96,12,96,1814,9,96,1,96,3,96,1817,8,96,
  	1,96,0,0,97,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
  	42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,
  	88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,
  	126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,
  	162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,0,8,1,
  	0,4,5,11,0,3,3,13,13,15,15,17,17,19,19,23,23,28,29,34,34,36,37,150,150,
  	186,186,1,0,3,5,2,0,3,3,186,186,1,0,88,89,3,0,150,150,155,157,165,165,
  	1,0,167,168,4,0,32,32,42,45,47,47,52,53,2099,0,194,1,0,0,0,2,196,1,0,
  	0,0,4,199,1,0,0,0,6,201,1,0,0,0,8,221,1,0,0,0,10,226,1,0,0,0,12,234,1,
  	0,0,0,14,238,1,0,0,0,16,246,1,0,0,0,18,264,1,0,0,0,20,267,1,0,0,0,22,
  	293,1,0,0,0,24,296,1,0,0,0,26,322,1,0,0,0,28,324,1,0,0,0,30,330,1,0,0,
  	0,32,337,1,0,0,0,34,342,1,0,0,0,36,344,1,0,0,0,38,346,1,0,0,0,40,348,
  	1,0,0,0,42,353,1,0,0,0,44,367,1,0,0,0,46,630,1,0,0,0,48,632,1,0,0,0,50,
  	659,1,0,0,0,52,662,1,0,0,0,54,728,1,0,0,0,56,731,1,0,0,0,58,746,1,0,0,
  	0,60,766,1,0,0,0,62,781,1,0,0,0,64,814,1,0,0,0,66,819,1,0,0,0,68,874,
  	1,0,0,0,70,884,1,0,0,0,72,899,1,0,0,0,74,915,1,0,0,0,76,925,1,0,0,0,78,
  	954,1,0,0,0,80,975,1,0,0,0,82,990,1,0,0,0,84,1023,1,0,0,0,86,1028,1,0,
  	0,0,88,1030,1,0,0,0,90,1051,1,0,0,0,92,1070,1,0,0,0,94,1086,1,0,0,0,96,
  	1106,1,0,0,0,98,1122,1,0,0,0,100,1143,1,0,0,0,102,1148,1,0,0,0,104,1153,
  	1,0,0,0,106,1164,1,0,0,0,108,1166,1,0,0,0,110,1174,1,0,0,0,112,1190,1,
  	0,0,0,114,1223,1,0,0,0,116,1225,1,0,0,0,118,1264,1,0,0,0,120,1296,1,0,
  	0,0,122,1298,1,0,0,0,124,1322,1,0,0,0,126,1324,1,0,0,0,128,1354,1,0,0,
  	0,130,1372,1,0,0,0,132,1388,1,0,0,0,134,1391,1,0,0,0,136,1408,1,0,0,0,
  	138,1456,1,0,0,0,140,1458,1,0,0,0,142,1465,1,0,0,0,144,1471,1,0,0,0,146,
  	1476,1,0,0,0,148,1482,1,0,0,0,150,1487,1,0,0,0,152,1505,1,0,0,0,154,1507,
  	1,0,0,0,156,1509,1,0,0,0,158,1525,1,0,0,0,160,1529,1,0,0,0,162,1543,1,
  	0,0,0,164,1559,1,0,0,0,166,1578,1,0,0,0,168,1632,1,0,0,0,170,1660,1,0,
  	0,0,172,1671,1,0,0,0,174,1712,1,0,0,0,176,1714,1,0,0,0,178,1719,1,0,0,
  	0,180,1743,1,0,0,0,182,1748,1,0,0,0,184,1753,1,0,0,0,186,1758,1,0,0,0,
  	188,1788,1,0,0,0,190,1804,1,0,0,0,192,1816,1,0,0,0,194,195,7,0,0,0,195,
  	1,1,0,0,0,196,197,5,6,0,0,197,3,1,0,0,0,198,200,5,33,0,0,199,198,1,0,
  	0,0,199,200,1,0,0,0,200,5,1,0,0,0,201,202,7,1,0,0,202,7,1,0,0,0,203,204,
  	5,1,0,0,204,205,5,32,0,0,205,206,3,4,2,0,206,207,3,6,3,0,207,208,5,2,
  	0,0,208,222,1,0,0,0,209,222,5,30,0,0,210,222,5,24,0,0,211,222,5,14,0,
  	0,212,222,5,16,0,0,213,222,5,18,0,0,214,222,5,20,0,0,215,222,5,21,0,0,
  	216,222,5,22,0,0,217,222,5,27,0,0,218,222,5,31,0,0,219,222,5,35,0,0,220,
  	222,5,30,0,0,221,203,1,0,0,0,221,209,1,0,0,0,221,210,1,0,0,0,221,211,
  	1,0,0,0,221,212,1,0,0,0,221,213,1,0,0,0,221,214,1,0,0,0,221,215,1,0,0,
  	0,221,216,1,0,0,0,221,217,1,0,0,0,221,218,1,0,0,0,221,219,1,0,0,0,221,
  	220,1,0,0,0,222,9,1,0,0,0,223,227,3,8,4,0,224,227,5,9,0,0,225,227,5,7,
  	0,0,226,223,1,0,0,0,226,224,1,0,0,0,226,225,1,0,0,0,227,11,1,0,0,0,228,
  	235,3,10,5,0,229,230,5,1,0,0,230,231,5,25,0,0,231,232,3,10,5,0,232,233,
  	5,2,0,0,233,235,1,0,0,0,234,228,1,0,0,0,234,229,1,0,0,0,235,13,1,0,0,
  	0,236,239,3,10,5,0,237,239,5,8,0,0,238,236,1,0,0,0,238,237,1,0,0,0,239,
  	15,1,0,0,0,240,247,3,14,7,0,241,242,5,1,0,0,242,243,5,25,0,0,243,244,
  	3,14,7,0,244,245,5,2,0,0,245,247,1,0,0,0,246,240,1,0,0,0,246,241,1,0,
  	0,0,247,17,1,0,0,0,248,249,5,1,0,0,249,259,5,38,0,0,250,252,3,16,8,0,
  	251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,0,0,253,254,1,0,0,0,254,260,
  	1,0,0,0,255,253,1,0,0,0,256,257,3,40,20,0,257,258,3,16,8,0,258,260,1,
  	0,0,0,259,253,1,0,0,0,259,256,1,0,0,0,260,261,1,0,0,0,261,263,5,2,0,0,
  	262,248,1,0,0,0,263,266,1,0,0,0,264,262,1,0,0,0,264,265,1,0,0,0,265,19,
  	1,0,0,0,266,264,1,0,0,0,267,268,3,16,8,0,268,21,1,0,0,0,269,288,5,1,0,
  	0,270,274,5,153,0,0,271,273,3,10,5,0,272,271,1,0,0,0,273,276,1,0,0,0,
  	274,272,1,0,0,0,274,275,1,0,0,0,275,289,1,0,0,0,276,274,1,0,0,0,277,281,
  	5,152,0,0,278,280,3,10,5,0,279,278,1,0,0,0,280,283,1,0,0,0,281,279,1,
  	0,0,0,281,282,1,0,0,0,282,289,1,0,0,0,283,281,1,0,0,0,284,285,5,152,0,
  	0,285,286,3,40,20,0,286,287,3,10,5,0,287,289,1,0,0,0,288,270,1,0,0,0,
  	288,277,1,0,0,0,288,284,1,0,0,0,289,290,1,0,0,0,290,292,5,2,0,0,291,269,
  	1,0,0,0,292,295,1,0,0,0,293,291,1,0,0,0,293,294,1,0,0,0,294,23,1,0,0,
  	0,295,293,1,0,0,0,296,303,5,1,0,0,297,298,5,37,0,0,298,304,3,18,9,0,299,
  	300,5,36,0,0,300,304,3,20,10,0,301,302,5,150,0,0,302,304,3,22,11,0,303,
  	297,1,0,0,0,303,299,1,0,0,0,303,301,1,0,0,0,304,305,1,0,0,0,305,306,5,
  	2,0,0,306,25,1,0,0,0,307,323,3,24,12,0,308,309,5,1,0,0,309,311,5,39,0,
  	0,310,312,5,40,0,0,311,310,1,0,0,0,311,312,1,0,0,0,312,316,1,0,0,0,313,
  	315,3,38,19,0,314,313,1,0,0,0,315,318,1,0,0,0,316,314,1,0,0,0,316,317,
  	1,0,0,0,317,319,1,0,0,0,318,316,1,0,0,0,319,320,3,24,12,0,320,321,5,2,
  	0,0,321,323,1,0,0,0,322,307,1,0,0,0,322,308,1,0,0,0,323,27,1,0,0,0,324,
  	326,5,3,0,0,325,327,5,3,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,328,1,
  	0,0,0,328,329,3,8,4,0,329,29,1,0,0,0,330,332,5,3,0,0,331,333,5,3,0,0,
  	332,331,1,0,0,0,332,333,1,0,0,0,333,335,1,0,0,0,334,336,5,26,0,0,335,
  	334,1,0,0,0,335,336,1,0,0,0,336,31,1,0,0,0,337,338,5,1,0,0,338,339,5,
  	149,0,0,339,340,3,38,19,0,340,341,5,2,0,0,341,33,1,0,0,0,342,343,5,3,
  	0,0,343,35,1,0,0,0,344,345,7,2,0,0,345,37,1,0,0,0,346,347,7,3,0,0,347,
  	39,1,0,0,0,348,349,5,186,0,0,349,41,1,0,0,0,350,352,3,44,22,0,351,350,
  	1,0,0,0,352,355,1,0,0,0,353,351,1,0,0,0,353,354,1,0,0,0,354,362,1,0,0,
  	0,355,353,1,0,0,0,356,358,3,50,25,0,357,356,1,0,0,0,357,358,1,0,0,0,358,
  	363,1,0,0,0,359,361,3,48,24,0,360,359,1,0,0,0,360,361,1,0,0,0,361,363,
  	1,0,0,0,362,357,1,0,0,0,362,360,1,0,0,0,363,43,1,0,0,0,364,368,3,46,23,
  	0,365,368,3,54,27,0,366,368,3,66,33,0,367,364,1,0,0,0,367,365,1,0,0,0,
  	367,366,1,0,0,0,368,45,1,0,0,0,369,631,5,86,0,0,370,631,5,85,0,0,371,
  	631,5,87,0,0,372,631,5,98,0,0,373,374,5,91,0,0,374,631,3,38,19,0,375,
  	376,5,92,0,0,376,631,3,38,19,0,377,379,5,93,0,0,378,380,3,38,19,0,379,
  	378,1,0,0,0,380,381,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,631,1,
  	0,0,0,383,384,5,105,0,0,384,631,3,38,19,0,385,386,5,106,0,0,386,387,3,
  	38,19,0,387,388,3,8,4,0,388,389,3,8,4,0,389,631,1,0,0,0,390,631,5,94,
  	0,0,391,392,5,99,0,0,392,631,3,38,19,0,393,394,5,101,0,0,394,631,3,38,
  	19,0,395,396,5,102,0,0,396,631,3,38,19,0,397,398,5,103,0,0,398,631,3,
  	38,19,0,399,400,5,107,0,0,400,631,3,38,19,0,401,402,5,108,0,0,402,631,
  	3,38,19,0,403,404,5,109,0,0,404,631,3,38,19,0,405,406,5,110,0,0,406,631,
  	3,38,19,0,407,408,5,111,0,0,408,631,3,38,19,0,409,411,5,112,0,0,410,412,
  	3,38,19,0,411,410,1,0,0,0,411,412,1,0,0,0,412,631,1,0,0,0,413,415,5,113,
  	0,0,414,416,3,38,19,0,415,414,1,0,0,0,415,416,1,0,0,0,416,631,1,0,0,0,
  	417,419,5,114,0,0,418,420,3,38,19,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
  	631,1,0,0,0,421,423,5,115,0,0,422,424,3,38,19,0,423,422,1,0,0,0,423,424,
  	1,0,0,0,424,631,1,0,0,0,425,427,5,116,0,0,426,428,3,38,19,0,427,426,1,
  	0,0,0,427,428,1,0,0,0,428,631,1,0,0,0,429,433,5,117,0,0,430,431,3,38,
  	19,0,431,432,3,38,19,0,432,434,1,0,0,0,433,430,1,0,0,0,433,434,1,0,0,
  	0,434,631,1,0,0,0,435,436,5,118,0,0,436,438,3,38,19,0,437,439,3,38,19,
  	0,438,437,1,0,0,0,438,439,1,0,0,0,439,631,1,0,0,0,440,441,5,120,0,0,441,
  	631,3,38,19,0,442,444,5,121,0,0,443,445,5,123,0,0,444,443,1,0,0,0,444,
  	445,1,0,0,0,445,447,1,0,0,0,446,448,5,124,0,0,447,446,1,0,0,0,447,448,
  	1,0,0,0,448,631,1,0,0,0,449,451,5,122,0,0,450,452,5,123,0,0,451,450,1,
  	0,0,0,451,452,1,0,0,0,452,454,1,0,0,0,453,455,5,124,0,0,454,453,1,0,0,
  	0,454,455,1,0,0,0,455,631,1,0,0,0,456,458,5,130,0,0,457,459,5,123,0,0,
  	458,457,1,0,0,0,458,459,1,0,0,0,459,461,1,0,0,0,460,462,5,124,0,0,461,
  	460,1,0,0,0,461,462,1,0,0,0,462,631,1,0,0,0,463,465,5,131,0,0,464,466,
  	5,123,0,0,465,464,1,0,0,0,465,466,1,0,0,0,466,468,1,0,0,0,467,469,5,124,
  	0,0,468,467,1,0,0,0,468,469,1,0,0,0,469,631,1,0,0,0,470,472,5,132,0,0,
  	471,473,5,123,0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,475,1,0,0,0,474,
  	476,5,124,0,0,475,474,1,0,0,0,475,476,1,0,0,0,476,477,1,0,0,0,477,631,
  	5,3,0,0,478,480,5,133,0,0,479,481,5,123,0,0,480,479,1,0,0,0,480,481,1,
  	0,0,0,481,483,1,0,0,0,482,484,5,124,0,0,483,482,1,0,0,0,483,484,1,0,0,
  	0,484,485,1,0,0,0,485,631,5,3,0,0,486,631,5,144,0,0,487,631,5,145,0,0,
  	488,489,5,11,0,0,489,631,3,36,18,0,490,631,5,146,0,0,491,631,5,147,0,
  	0,492,493,5,148,0,0,493,631,3,38,19,0,494,495,5,119,0,0,495,631,3,38,
  	19,0,496,497,5,42,0,0,497,631,3,6,3,0,498,631,5,48,0,0,499,500,5,43,0,
  	0,500,631,3,38,19,0,501,631,5,49,0,0,502,503,5,50,0,0,503,631,3,8,4,0,
  	504,505,5,51,0,0,505,631,3,8,4,0,506,631,5,52,0,0,507,631,5,53,0,0,508,
  	631,5,62,0,0,509,510,5,63,0,0,510,631,3,38,19,0,511,512,5,64,0,0,512,
  	513,3,38,19,0,513,514,3,38,19,0,514,631,1,0,0,0,515,516,5,65,0,0,516,
  	517,3,38,19,0,517,518,3,38,19,0,518,631,1,0,0,0,519,520,5,66,0,0,520,
  	631,3,38,19,0,521,522,5,67,0,0,522,523,3,38,19,0,523,524,3,34,17,0,524,
  	631,1,0,0,0,525,526,5,68,0,0,526,527,3,38,19,0,527,528,3,38,19,0,528,
  	631,1,0,0,0,529,530,5,69,0,0,530,531,3,38,19,0,531,532,3,38,19,0,532,
  	631,1,0,0,0,533,534,5,70,0,0,534,631,3,38,19,0,535,536,5,71,0,0,536,631,
  	3,38,19,0,537,631,5,72,0,0,538,539,5,73,0,0,539,540,3,38,19,0,540,541,
  	3,38,19,0,541,631,1,0,0,0,542,543,5,74,0,0,543,631,3,38,19,0,544,545,
  	5,75,0,0,545,546,3,38,19,0,546,547,3,38,19,0,547,631,1,0,0,0,548,549,
  	5,76,0,0,549,550,3,38,19,0,550,551,3,38,19,0,551,631,1,0,0,0,552,631,
  	5,77,0,0,553,631,5,127,0,0,554,631,5,128,0,0,555,631,5,125,0,0,556,631,
  	5,126,0,0,557,631,5,129,0,0,558,559,5,12,0,0,559,563,5,10,0,0,560,562,
  	3,36,18,0,561,560,1,0,0,0,562,565,1,0,0,0,563,561,1,0,0,0,563,564,1,0,
  	0,0,564,631,1,0,0,0,565,563,1,0,0,0,566,631,5,134,0,0,567,631,5,135,0,
  	0,568,631,5,136,0,0,569,631,5,137,0,0,570,631,5,139,0,0,571,631,5,138,
  	0,0,572,576,5,140,0,0,573,575,3,36,18,0,574,573,1,0,0,0,575,578,1,0,0,
  	0,576,574,1,0,0,0,576,577,1,0,0,0,577,631,1,0,0,0,578,576,1,0,0,0,579,
  	631,5,141,0,0,580,581,5,142,0,0,581,631,5,3,0,0,582,583,5,143,0,0,583,
  	631,5,3,0,0,584,586,5,79,0,0,585,587,5,123,0,0,586,585,1,0,0,0,586,587,
  	1,0,0,0,587,589,1,0,0,0,588,590,5,124,0,0,589,588,1,0,0,0,589,590,1,0,
  	0,0,590,631,1,0,0,0,591,593,5,78,0,0,592,594,5,123,0,0,593,592,1,0,0,
  	0,593,594,1,0,0,0,594,596,1,0,0,0,595,597,5,124,0,0,596,595,1,0,0,0,596,
  	597,1,0,0,0,597,631,1,0,0,0,598,631,5,80,0,0,599,601,5,81,0,0,600,602,
  	5,123,0,0,601,600,1,0,0,0,601,602,1,0,0,0,602,604,1,0,0,0,603,605,5,124,
  	0,0,604,603,1,0,0,0,604,605,1,0,0,0,605,631,1,0,0,0,606,608,5,82,0,0,
  	607,609,5,123,0,0,608,607,1,0,0,0,608,609,1,0,0,0,609,611,1,0,0,0,610,
  	612,5,124,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,631,1,0,0,0,613,615,
  	5,83,0,0,614,616,5,123,0,0,615,614,1,0,0,0,615,616,1,0,0,0,616,618,1,
  	0,0,0,617,619,5,124,0,0,618,617,1,0,0,0,618,619,1,0,0,0,619,631,1,0,0,
  	0,620,622,5,84,0,0,621,623,5,123,0,0,622,621,1,0,0,0,622,623,1,0,0,0,
  	623,625,1,0,0,0,624,626,5,124,0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,
  	631,1,0,0,0,627,628,5,60,0,0,628,631,3,38,19,0,629,631,5,61,0,0,630,369,
  	1,0,0,0,630,370,1,0,0,0,630,371,1,0,0,0,630,372,1,0,0,0,630,373,1,0,0,
  	0,630,375,1,0,0,0,630,377,1,0,0,0,630,383,1,0,0,0,630,385,1,0,0,0,630,
  	390,1,0,0,0,630,391,1,0,0,0,630,393,1,0,0,0,630,395,1,0,0,0,630,397,1,
  	0,0,0,630,399,1,0,0,0,630,401,1,0,0,0,630,403,1,0,0,0,630,405,1,0,0,0,
  	630,407,1,0,0,0,630,409,1,0,0,0,630,413,1,0,0,0,630,417,1,0,0,0,630,421,
  	1,0,0,0,630,425,1,0,0,0,630,429,1,0,0,0,630,435,1,0,0,0,630,440,1,0,0,
  	0,630,442,1,0,0,0,630,449,1,0,0,0,630,456,1,0,0,0,630,463,1,0,0,0,630,
  	470,1,0,0,0,630,478,1,0,0,0,630,486,1,0,0,0,630,487,1,0,0,0,630,488,1,
  	0,0,0,630,490,1,0,0,0,630,491,1,0,0,0,630,492,1,0,0,0,630,494,1,0,0,0,
  	630,496,1,0,0,0,630,498,1,0,0,0,630,499,1,0,0,0,630,501,1,0,0,0,630,502,
  	1,0,0,0,630,504,1,0,0,0,630,506,1,0,0,0,630,507,1,0,0,0,630,508,1,0,0,
  	0,630,509,1,0,0,0,630,511,1,0,0,0,630,515,1,0,0,0,630,519,1,0,0,0,630,
  	521,1,0,0,0,630,525,1,0,0,0,630,529,1,0,0,0,630,533,1,0,0,0,630,535,1,
  	0,0,0,630,537,1,0,0,0,630,538,1,0,0,0,630,542,1,0,0,0,630,544,1,0,0,0,
  	630,548,1,0,0,0,630,552,1,0,0,0,630,553,1,0,0,0,630,554,1,0,0,0,630,555,
  	1,0,0,0,630,556,1,0,0,0,630,557,1,0,0,0,630,558,1,0,0,0,630,566,1,0,0,
  	0,630,567,1,0,0,0,630,568,1,0,0,0,630,569,1,0,0,0,630,570,1,0,0,0,630,
  	571,1,0,0,0,630,572,1,0,0,0,630,579,1,0,0,0,630,580,1,0,0,0,630,582,1,
  	0,0,0,630,584,1,0,0,0,630,591,1,0,0,0,630,598,1,0,0,0,630,599,1,0,0,0,
  	630,606,1,0,0,0,630,613,1,0,0,0,630,620,1,0,0,0,630,627,1,0,0,0,630,629,
  	1,0,0,0,631,47,1,0,0,0,632,644,5,98,0,0,633,634,5,1,0,0,634,638,5,153,
  	0,0,635,637,3,10,5,0,636,635,1,0,0,0,637,640,1,0,0,0,638,636,1,0,0,0,
  	638,639,1,0,0,0,639,641,1,0,0,0,640,638,1,0,0,0,641,643,5,2,0,0,642,633,
  	1,0,0,0,643,646,1,0,0,0,644,642,1,0,0,0,644,645,1,0,0,0,645,647,1,0,0,
  	0,646,644,1,0,0,0,647,648,3,42,21,0,648,49,1,0,0,0,649,651,5,100,0,0,
  	650,652,3,38,19,0,651,650,1,0,0,0,651,652,1,0,0,0,652,653,1,0,0,0,653,
  	660,3,52,26,0,654,656,5,104,0,0,655,657,3,38,19,0,656,655,1,0,0,0,656,
  	657,1,0,0,0,657,658,1,0,0,0,658,660,3,52,26,0,659,649,1,0,0,0,659,654,
  	1,0,0,0,660,51,1,0,0,0,661,663,3,32,16,0,662,661,1,0,0,0,662,663,1,0,
  	0,0,663,675,1,0,0,0,664,665,5,1,0,0,665,669,5,152,0,0,666,668,3,10,5,
  	0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
  	672,1,0,0,0,671,669,1,0,0,0,672,674,5,2,0,0,673,664,1,0,0,0,674,677,1,
  	0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,689,1,0,0,0,677,675,1,0,0,0,
  	678,679,5,1,0,0,679,683,5,153,0,0,680,682,3,10,5,0,681,680,1,0,0,0,682,
  	685,1,0,0,0,683,681,1,0,0,0,683,684,1,0,0,0,684,686,1,0,0,0,685,683,1,
  	0,0,0,686,688,5,2,0,0,687,678,1,0,0,0,688,691,1,0,0,0,689,687,1,0,0,0,
  	689,690,1,0,0,0,690,692,1,0,0,0,691,689,1,0,0,0,692,693,3,42,21,0,693,
  	53,1,0,0,0,694,696,7,4,0,0,695,697,3,40,20,0,696,695,1,0,0,0,696,697,
  	1,0,0,0,697,698,1,0,0,0,698,699,3,56,28,0,699,701,5,90,0,0,700,702,3,
  	40,20,0,701,700,1,0,0,0,701,702,1,0,0,0,702,729,1,0,0,0,703,705,5,95,
  	0,0,704,706,3,40,20,0,705,704,1,0,0,0,705,706,1,0,0,0,706,707,1,0,0,0,
  	707,713,3,56,28,0,708,710,5,97,0,0,709,711,3,40,20,0,710,709,1,0,0,0,
  	710,711,1,0,0,0,711,712,1,0,0,0,712,714,3,42,21,0,713,708,1,0,0,0,713,
  	714,1,0,0,0,714,715,1,0,0,0,715,717,5,90,0,0,716,718,3,40,20,0,717,716,
  	1,0,0,0,717,718,1,0,0,0,718,729,1,0,0,0,719,721,5,55,0,0,720,722,3,40,
  	20,0,721,720,1,0,0,0,721,722,1,0,0,0,722,723,1,0,0,0,723,724,3,60,30,
  	0,724,726,5,90,0,0,725,727,3,40,20,0,726,725,1,0,0,0,726,727,1,0,0,0,
  	727,729,1,0,0,0,728,694,1,0,0,0,728,703,1,0,0,0,728,719,1,0,0,0,729,55,
  	1,0,0,0,730,732,3,32,16,0,731,730,1,0,0,0,731,732,1,0,0,0,732,733,1,0,
  	0,0,733,734,3,58,29,0,734,57,1,0,0,0,735,736,5,1,0,0,736,740,5,152,0,
  	0,737,739,3,10,5,0,738,737,1,0,0,0,739,742,1,0,0,0,740,738,1,0,0,0,740,
  	741,1,0,0,0,741,743,1,0,0,0,742,740,1,0,0,0,743,745,5,2,0,0,744,735,1,
  	0,0,0,745,748,1,0,0,0,746,744,1,0,0,0,746,747,1,0,0,0,747,760,1,0,0,0,
  	748,746,1,0,0,0,749,750,5,1,0,0,750,754,5,153,0,0,751,753,3,10,5,0,752,
  	751,1,0,0,0,753,756,1,0,0,0,754,752,1,0,0,0,754,755,1,0,0,0,755,757,1,
  	0,0,0,756,754,1,0,0,0,757,759,5,2,0,0,758,749,1,0,0,0,759,762,1,0,0,0,
  	760,758,1,0,0,0,760,761,1,0,0,0,761,763,1,0,0,0,762,760,1,0,0,0,763,764,
  	3,42,21,0,764,59,1,0,0,0,765,767,3,32,16,0,766,765,1,0,0,0,766,767,1,
  	0,0,0,767,768,1,0,0,0,768,769,3,62,31,0,769,61,1,0,0,0,770,771,5,1,0,
  	0,771,775,5,152,0,0,772,774,3,10,5,0,773,772,1,0,0,0,774,777,1,0,0,0,
  	775,773,1,0,0,0,775,776,1,0,0,0,776,778,1,0,0,0,777,775,1,0,0,0,778,780,
  	5,2,0,0,779,770,1,0,0,0,780,783,1,0,0,0,781,779,1,0,0,0,781,782,1,0,0,
  	0,782,795,1,0,0,0,783,781,1,0,0,0,784,785,5,1,0,0,785,789,5,153,0,0,786,
  	788,3,10,5,0,787,786,1,0,0,0,788,791,1,0,0,0,789,787,1,0,0,0,789,790,
  	1,0,0,0,790,792,1,0,0,0,791,789,1,0,0,0,792,794,5,2,0,0,793,784,1,0,0,
  	0,794,797,1,0,0,0,795,793,1,0,0,0,795,796,1,0,0,0,796,798,1,0,0,0,797,
  	795,1,0,0,0,798,799,3,64,32,0,799,63,1,0,0,0,800,807,5,1,0,0,801,802,
  	5,56,0,0,802,808,3,38,19,0,803,804,5,57,0,0,804,808,3,38,19,0,805,808,
  	5,58,0,0,806,808,5,59,0,0,807,801,1,0,0,0,807,803,1,0,0,0,807,805,1,0,
  	0,0,807,806,1,0,0,0,808,809,1,0,0,0,809,810,3,38,19,0,810,811,5,2,0,0,
  	811,813,1,0,0,0,812,800,1,0,0,0,813,816,1,0,0,0,814,812,1,0,0,0,814,815,
  	1,0,0,0,815,817,1,0,0,0,816,814,1,0,0,0,817,818,3,42,21,0,818,65,1,0,
  	0,0,819,859,5,1,0,0,820,824,3,46,23,0,821,823,3,66,33,0,822,821,1,0,0,
  	0,823,826,1,0,0,0,824,822,1,0,0,0,824,825,1,0,0,0,825,860,1,0,0,0,826,
  	824,1,0,0,0,827,828,5,98,0,0,828,860,3,68,34,0,829,831,5,100,0,0,830,
  	832,3,38,19,0,831,830,1,0,0,0,831,832,1,0,0,0,832,833,1,0,0,0,833,860,
  	3,70,35,0,834,836,5,104,0,0,835,837,3,38,19,0,836,835,1,0,0,0,836,837,
  	1,0,0,0,837,838,1,0,0,0,838,860,3,70,35,0,839,841,5,88,0,0,840,842,3,
  	40,20,0,841,840,1,0,0,0,841,842,1,0,0,0,842,843,1,0,0,0,843,860,3,56,
  	28,0,844,846,5,89,0,0,845,847,3,40,20,0,846,845,1,0,0,0,846,847,1,0,0,
  	0,847,848,1,0,0,0,848,860,3,56,28,0,849,851,5,95,0,0,850,852,3,40,20,
  	0,851,850,1,0,0,0,851,852,1,0,0,0,852,853,1,0,0,0,853,860,3,76,38,0,854,
  	856,5,55,0,0,855,857,3,40,20,0,856,855,1,0,0,0,856,857,1,0,0,0,857,858,
  	1,0,0,0,858,860,3,80,40,0,859,820,1,0,0,0,859,827,1,0,0,0,859,829,1,0,
  	0,0,859,834,1,0,0,0,859,839,1,0,0,0,859,844,1,0,0,0,859,849,1,0,0,0,859,
  	854,1,0,0,0,860,861,1,0,0,0,861,862,5,2,0,0,862,67,1,0,0,0,863,864,5,
  	1,0,0,864,868,5,153,0,0,865,867,3,10,5,0,866,865,1,0,0,0,867,870,1,0,
  	0,0,868,866,1,0,0,0,868,869,1,0,0,0,869,871,1,0,0,0,870,868,1,0,0,0,871,
  	873,5,2,0,0,872,863,1,0,0,0,873,876,1,0,0,0,874,872,1,0,0,0,874,875,1,
  	0,0,0,875,880,1,0,0,0,876,874,1,0,0,0,877,879,3,66,33,0,878,877,1,0,0,
  	0,879,882,1,0,0,0,880,878,1,0,0,0,880,881,1,0,0,0,881,69,1,0,0,0,882,
  	880,1,0,0,0,883,885,3,32,16,0,884,883,1,0,0,0,884,885,1,0,0,0,885,886,
  	1,0,0,0,886,887,3,72,36,0,887,71,1,0,0,0,888,889,5,1,0,0,889,893,5,152,
  	0,0,890,892,3,10,5,0,891,890,1,0,0,0,892,895,1,0,0,0,893,891,1,0,0,0,
  	893,894,1,0,0,0,894,896,1,0,0,0,895,893,1,0,0,0,896,898,5,2,0,0,897,888,
  	1,0,0,0,898,901,1,0,0,0,899,897,1,0,0,0,899,900,1,0,0,0,900,902,1,0,0,
  	0,901,899,1,0,0,0,902,903,3,74,37,0,903,73,1,0,0,0,904,905,5,1,0,0,905,
  	909,5,153,0,0,906,908,3,10,5,0,907,906,1,0,0,0,908,911,1,0,0,0,909,907,
  	1,0,0,0,909,910,1,0,0,0,910,912,1,0,0,0,911,909,1,0,0,0,912,914,5,2,0,
  	0,913,904,1,0,0,0,914,917,1,0,0,0,915,913,1,0,0,0,915,916,1,0,0,0,916,
  	921,1,0,0,0,917,915,1,0,0,0,918,920,3,66,33,0,919,918,1,0,0,0,920,923,
  	1,0,0,0,921,919,1,0,0,0,921,922,1,0,0,0,922,75,1,0,0,0,923,921,1,0,0,
  	0,924,926,3,32,16,0,925,924,1,0,0,0,925,926,1,0,0,0,926,938,1,0,0,0,927,
  	928,5,1,0,0,928,932,5,152,0,0,929,931,3,10,5,0,930,929,1,0,0,0,931,934,
  	1,0,0,0,932,930,1,0,0,0,932,933,1,0,0,0,933,935,1,0,0,0,934,932,1,0,0,
  	0,935,937,5,2,0,0,936,927,1,0,0,0,937,940,1,0,0,0,938,936,1,0,0,0,938,
  	939,1,0,0,0,939,941,1,0,0,0,940,938,1,0,0,0,941,942,3,78,39,0,942,77,
  	1,0,0,0,943,944,5,1,0,0,944,948,5,153,0,0,945,947,3,10,5,0,946,945,1,
  	0,0,0,947,950,1,0,0,0,948,946,1,0,0,0,948,949,1,0,0,0,949,951,1,0,0,0,
  	950,948,1,0,0,0,951,953,5,2,0,0,952,943,1,0,0,0,953,956,1,0,0,0,954,952,
  	1,0,0,0,954,955,1,0,0,0,955,960,1,0,0,0,956,954,1,0,0,0,957,959,3,66,
  	33,0,958,957,1,0,0,0,959,962,1,0,0,0,960,958,1,0,0,0,960,961,1,0,0,0,
  	961,963,1,0,0,0,962,960,1,0,0,0,963,964,5,1,0,0,964,965,5,96,0,0,965,
  	966,3,42,21,0,966,972,5,2,0,0,967,968,5,1,0,0,968,969,5,97,0,0,969,970,
  	3,42,21,0,970,971,5,2,0,0,971,973,1,0,0,0,972,967,1,0,0,0,972,973,1,0,
  	0,0,973,79,1,0,0,0,974,976,3,32,16,0,975,974,1,0,0,0,975,976,1,0,0,0,
  	976,977,1,0,0,0,977,978,3,82,41,0,978,81,1,0,0,0,979,980,5,1,0,0,980,
  	984,5,152,0,0,981,983,3,10,5,0,982,981,1,0,0,0,983,986,1,0,0,0,984,982,
  	1,0,0,0,984,985,1,0,0,0,985,987,1,0,0,0,986,984,1,0,0,0,987,989,5,2,0,
  	0,988,979,1,0,0,0,989,992,1,0,0,0,990,988,1,0,0,0,990,991,1,0,0,0,991,
  	1004,1,0,0,0,992,990,1,0,0,0,993,994,5,1,0,0,994,998,5,153,0,0,995,997,
  	3,10,5,0,996,995,1,0,0,0,997,1000,1,0,0,0,998,996,1,0,0,0,998,999,1,0,
  	0,0,999,1001,1,0,0,0,1000,998,1,0,0,0,1001,1003,5,2,0,0,1002,993,1,0,
  	0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,1,0,0,0,1005,1007,1,
  	0,0,0,1006,1004,1,0,0,0,1007,1008,3,84,42,0,1008,83,1,0,0,0,1009,1016,
  	5,1,0,0,1010,1011,5,56,0,0,1011,1017,3,38,19,0,1012,1013,5,57,0,0,1013,
  	1017,3,38,19,0,1014,1017,5,58,0,0,1015,1017,5,59,0,0,1016,1010,1,0,0,
  	0,1016,1012,1,0,0,0,1016,1014,1,0,0,0,1016,1015,1,0,0,0,1017,1018,1,0,
  	0,0,1018,1019,3,38,19,0,1019,1020,5,2,0,0,1020,1022,1,0,0,0,1021,1009,
  	1,0,0,0,1022,1025,1,0,0,0,1023,1021,1,0,0,0,1023,1024,1,0,0,0,1024,1026,
  	1,0,0,0,1025,1023,1,0,0,0,1026,1027,3,42,21,0,1027,85,1,0,0,0,1028,1029,
  	3,42,21,0,1029,87,1,0,0,0,1030,1031,5,1,0,0,1031,1033,5,150,0,0,1032,
  	1034,3,40,20,0,1033,1032,1,0,0,0,1033,1034,1,0,0,0,1034,1035,1,0,0,0,
  	1035,1036,3,90,45,0,1036,1037,5,2,0,0,1037,89,1,0,0,0,1038,1040,3,32,
  	16,0,1039,1038,1,0,0,0,1039,1040,1,0,0,0,1040,1041,1,0,0,0,1041,1052,
  	3,96,48,0,1042,1044,3,142,71,0,1043,1045,3,32,16,0,1044,1043,1,0,0,0,
  	1044,1045,1,0,0,0,1045,1046,1,0,0,0,1046,1047,3,92,46,0,1047,1052,1,0,
  	0,0,1048,1049,3,148,74,0,1049,1050,3,90,45,0,1050,1052,1,0,0,0,1051,1039,
  	1,0,0,0,1051,1042,1,0,0,0,1051,1048,1,0,0,0,1052,91,1,0,0,0,1053,1054,
  	5,1,0,0,1054,1058,5,152,0,0,1055,1057,3,10,5,0,1056,1055,1,0,0,0,1057,
  	1060,1,0,0,0,1058,1056,1,0,0,0,1058,1059,1,0,0,0,1059,1061,1,0,0,0,1060,
  	1058,1,0,0,0,1061,1069,5,2,0,0,1062,1063,5,1,0,0,1063,1064,5,152,0,0,
  	1064,1065,3,40,20,0,1065,1066,3,10,5,0,1066,1067,5,2,0,0,1067,1069,1,
  	0,0,0,1068,1053,1,0,0,0,1068,1062,1,0,0,0,1069,1072,1,0,0,0,1070,1068,
  	1,0,0,0,1070,1071,1,0,0,0,1071,1073,1,0,0,0,1072,1070,1,0,0,0,1073,1074,
  	3,94,47,0,1074,93,1,0,0,0,1075,1076,5,1,0,0,1076,1080,5,153,0,0,1077,
  	1079,3,10,5,0,1078,1077,1,0,0,0,1079,1082,1,0,0,0,1080,1078,1,0,0,0,1080,
  	1081,1,0,0,0,1081,1083,1,0,0,0,1082,1080,1,0,0,0,1083,1085,5,2,0,0,1084,
  	1075,1,0,0,0,1085,1088,1,0,0,0,1086,1084,1,0,0,0,1086,1087,1,0,0,0,1087,
  	95,1,0,0,0,1088,1086,1,0,0,0,1089,1090,5,1,0,0,1090,1094,5,152,0,0,1091,
  	1093,3,10,5,0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,1094,1092,1,0,0,0,1094,
  	1095,1,0,0,0,1095,1097,1,0,0,0,1096,1094,1,0,0,0,1097,1105,5,2,0,0,1098,
  	1099,5,1,0,0,1099,1100,5,152,0,0,1100,1101,3,40,20,0,1101,1102,3,10,5,
  	0,1102,1103,5,2,0,0,1103,1105,1,0,0,0,1104,1089,1,0,0,0,1104,1098,1,0,
  	0,0,1105,1108,1,0,0,0,1106,1104,1,0,0,0,1106,1107,1,0,0,0,1107,1109,1,
  	0,0,0,1108,1106,1,0,0,0,1109,1110,3,98,49,0,1110,97,1,0,0,0,1111,1112,
  	5,1,0,0,1112,1116,5,153,0,0,1113,1115,3,10,5,0,1114,1113,1,0,0,0,1115,
  	1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1119,1,0,0,0,1118,
  	1116,1,0,0,0,1119,1121,5,2,0,0,1120,1111,1,0,0,0,1121,1124,1,0,0,0,1122,
  	1120,1,0,0,0,1122,1123,1,0,0,0,1123,1125,1,0,0,0,1124,1122,1,0,0,0,1125,
  	1126,3,100,50,0,1126,99,1,0,0,0,1127,1128,5,1,0,0,1128,1138,5,154,0,0,
  	1129,1130,3,40,20,0,1130,1131,3,10,5,0,1131,1139,1,0,0,0,1132,1134,3,
  	10,5,0,1133,1132,1,0,0,0,1134,1137,1,0,0,0,1135,1133,1,0,0,0,1135,1136,
  	1,0,0,0,1136,1139,1,0,0,0,1137,1135,1,0,0,0,1138,1129,1,0,0,0,1138,1135,
  	1,0,0,0,1139,1140,1,0,0,0,1140,1142,5,2,0,0,1141,1127,1,0,0,0,1142,1145,
  	1,0,0,0,1143,1141,1,0,0,0,1143,1144,1,0,0,0,1144,1146,1,0,0,0,1145,1143,
  	1,0,0,0,1146,1147,3,42,21,0,1147,101,1,0,0,0,1148,1149,5,1,0,0,1149,1150,
  	5,156,0,0,1150,1151,3,38,19,0,1151,1152,5,2,0,0,1152,103,1,0,0,0,1153,
  	1154,5,1,0,0,1154,1155,5,157,0,0,1155,1156,3,38,19,0,1156,1157,5,2,0,
  	0,1157,105,1,0,0,0,1158,1159,5,1,0,0,1159,1160,5,160,0,0,1160,1161,3,
  	86,43,0,1161,1162,5,2,0,0,1162,1165,1,0,0,0,1163,1165,3,66,33,0,1164,
  	1158,1,0,0,0,1164,1163,1,0,0,0,1165,107,1,0,0,0,1166,1167,5,150,0,0,1167,
  	109,1,0,0,0,1168,1169,5,1,0,0,1169,1170,5,164,0,0,1170,1171,3,86,43,0,
  	1171,1172,5,2,0,0,1172,1175,1,0,0,0,1173,1175,3,66,33,0,1174,1168,1,0,
  	0,0,1174,1173,1,0,0,0,1175,111,1,0,0,0,1176,1180,3,108,54,0,1177,1179,
  	3,38,19,0,1178,1177,1,0,0,0,1179,1182,1,0,0,0,1180,1178,1,0,0,0,1180,
  	1181,1,0,0,0,1181,1191,1,0,0,0,1182,1180,1,0,0,0,1183,1187,3,8,4,0,1184,
  	1186,3,110,55,0,1185,1184,1,0,0,0,1186,1189,1,0,0,0,1187,1185,1,0,0,0,
  	1187,1188,1,0,0,0,1188,1191,1,0,0,0,1189,1187,1,0,0,0,1190,1176,1,0,0,
  	0,1190,1183,1,0,0,0,1191,113,1,0,0,0,1192,1193,5,1,0,0,1193,1195,5,158,
  	0,0,1194,1196,3,40,20,0,1195,1194,1,0,0,0,1195,1196,1,0,0,0,1196,1204,
  	1,0,0,0,1197,1198,3,102,51,0,1198,1199,3,106,53,0,1199,1205,1,0,0,0,1200,
  	1202,3,106,53,0,1201,1200,1,0,0,0,1201,1202,1,0,0,0,1202,1205,1,0,0,0,
  	1203,1205,5,163,0,0,1204,1197,1,0,0,0,1204,1201,1,0,0,0,1204,1203,1,0,
  	0,0,1205,1206,1,0,0,0,1206,1207,3,112,56,0,1207,1208,5,2,0,0,1208,1224,
  	1,0,0,0,1209,1210,5,1,0,0,1210,1212,5,158,0,0,1211,1213,3,40,20,0,1212,
  	1211,1,0,0,0,1212,1213,1,0,0,0,1213,1214,1,0,0,0,1214,1218,3,106,53,0,
  	1215,1217,3,38,19,0,1216,1215,1,0,0,0,1217,1220,1,0,0,0,1218,1216,1,0,
  	0,0,1218,1219,1,0,0,0,1219,1221,1,0,0,0,1220,1218,1,0,0,0,1221,1222,5,
  	2,0,0,1222,1224,1,0,0,0,1223,1192,1,0,0,0,1223,1209,1,0,0,0,1224,115,
  	1,0,0,0,1225,1226,5,1,0,0,1226,1228,5,156,0,0,1227,1229,3,40,20,0,1228,
  	1227,1,0,0,0,1228,1229,1,0,0,0,1229,1230,1,0,0,0,1230,1231,3,118,59,0,
  	1231,1232,5,2,0,0,1232,117,1,0,0,0,1233,1237,3,28,14,0,1234,1235,3,44,
  	22,0,1235,1236,3,42,21,0,1236,1238,1,0,0,0,1237,1234,1,0,0,0,1237,1238,
  	1,0,0,0,1238,1265,1,0,0,0,1239,1240,3,142,71,0,1240,1241,3,28,14,0,1241,
  	1265,1,0,0,0,1242,1243,3,148,74,0,1243,1244,3,118,59,0,1244,1265,1,0,
  	0,0,1245,1246,3,8,4,0,1246,1247,5,1,0,0,1247,1260,5,158,0,0,1248,1250,
  	3,38,19,0,1249,1248,1,0,0,0,1250,1253,1,0,0,0,1251,1249,1,0,0,0,1251,
  	1252,1,0,0,0,1252,1261,1,0,0,0,1253,1251,1,0,0,0,1254,1256,3,110,55,0,
  	1255,1254,1,0,0,0,1256,1259,1,0,0,0,1257,1255,1,0,0,0,1257,1258,1,0,0,
  	0,1258,1261,1,0,0,0,1259,1257,1,0,0,0,1260,1251,1,0,0,0,1260,1257,1,0,
  	0,0,1261,1262,1,0,0,0,1262,1263,5,2,0,0,1263,1265,1,0,0,0,1264,1233,1,
  	0,0,0,1264,1239,1,0,0,0,1264,1242,1,0,0,0,1264,1245,1,0,0,0,1265,119,
  	1,0,0,0,1266,1267,5,1,0,0,1267,1269,5,159,0,0,1268,1270,3,40,20,0,1269,
  	1268,1,0,0,0,1269,1270,1,0,0,0,1270,1271,1,0,0,0,1271,1272,3,104,52,0,
  	1272,1276,3,106,53,0,1273,1275,5,6,0,0,1274,1273,1,0,0,0,1275,1278,1,
  	0,0,0,1276,1274,1,0,0,0,1276,1277,1,0,0,0,1277,1279,1,0,0,0,1278,1276,
  	1,0,0,0,1279,1280,5,2,0,0,1280,1297,1,0,0,0,1281,1282,5,1,0,0,1282,1284,
  	5,159,0,0,1283,1285,3,40,20,0,1284,1283,1,0,0,0,1284,1285,1,0,0,0,1285,
  	1287,1,0,0,0,1286,1288,3,106,53,0,1287,1286,1,0,0,0,1287,1288,1,0,0,0,
  	1288,1292,1,0,0,0,1289,1291,5,6,0,0,1290,1289,1,0,0,0,1291,1294,1,0,0,
  	0,1292,1290,1,0,0,0,1292,1293,1,0,0,0,1293,1295,1,0,0,0,1294,1292,1,0,
  	0,0,1295,1297,5,2,0,0,1296,1266,1,0,0,0,1296,1281,1,0,0,0,1297,121,1,
  	0,0,0,1298,1299,5,1,0,0,1299,1301,5,157,0,0,1300,1302,3,40,20,0,1301,
  	1300,1,0,0,0,1301,1302,1,0,0,0,1302,1303,1,0,0,0,1303,1304,3,124,62,0,
  	1304,1305,5,2,0,0,1305,123,1,0,0,0,1306,1323,3,30,15,0,1307,1308,3,142,
  	71,0,1308,1309,3,30,15,0,1309,1323,1,0,0,0,1310,1311,3,148,74,0,1311,
  	1312,3,124,62,0,1312,1323,1,0,0,0,1313,1314,5,1,0,0,1314,1318,5,159,0,
  	0,1315,1317,5,6,0,0,1316,1315,1,0,0,0,1317,1320,1,0,0,0,1318,1316,1,0,
  	0,0,1318,1319,1,0,0,0,1319,1321,1,0,0,0,1320,1318,1,0,0,0,1321,1323,5,
  	2,0,0,1322,1306,1,0,0,0,1322,1307,1,0,0,0,1322,1310,1,0,0,0,1322,1313,
  	1,0,0,0,1323,125,1,0,0,0,1324,1325,5,1,0,0,1325,1327,5,165,0,0,1326,1328,
  	3,40,20,0,1327,1326,1,0,0,0,1327,1328,1,0,0,0,1328,1329,1,0,0,0,1329,
  	1330,3,128,64,0,1330,1331,5,2,0,0,1331,127,1,0,0,0,1332,1334,3,148,74,
  	0,1333,1332,1,0,0,0,1334,1337,1,0,0,0,1335,1333,1,0,0,0,1335,1336,1,0,
  	0,0,1336,1339,1,0,0,0,1337,1335,1,0,0,0,1338,1340,3,32,16,0,1339,1338,
  	1,0,0,0,1339,1340,1,0,0,0,1340,1341,1,0,0,0,1341,1355,3,22,11,0,1342,
  	1344,3,148,74,0,1343,1342,1,0,0,0,1344,1347,1,0,0,0,1345,1343,1,0,0,0,
  	1345,1346,1,0,0,0,1346,1348,1,0,0,0,1347,1345,1,0,0,0,1348,1350,3,142,
  	71,0,1349,1351,3,32,16,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,
  	1,0,0,0,1352,1353,3,130,65,0,1353,1355,1,0,0,0,1354,1335,1,0,0,0,1354,
  	1345,1,0,0,0,1355,129,1,0,0,0,1356,1357,5,1,0,0,1357,1367,5,152,0,0,1358,
  	1360,3,10,5,0,1359,1358,1,0,0,0,1360,1363,1,0,0,0,1361,1359,1,0,0,0,1361,
  	1362,1,0,0,0,1362,1368,1,0,0,0,1363,1361,1,0,0,0,1364,1365,3,40,20,0,
  	1365,1366,3,10,5,0,1366,1368,1,0,0,0,1367,1361,1,0,0,0,1367,1364,1,0,
  	0,0,1368,1369,1,0,0,0,1369,1371,5,2,0,0,1370,1356,1,0,0,0,1371,1374,1,
  	0,0,0,1372,1370,1,0,0,0,1372,1373,1,0,0,0,1373,1375,1,0,0,0,1374,1372,
  	1,0,0,0,1375,1376,3,132,66,0,1376,131,1,0,0,0,1377,1378,5,1,0,0,1378,
  	1382,5,153,0,0,1379,1381,3,10,5,0,1380,1379,1,0,0,0,1381,1384,1,0,0,0,
  	1382,1380,1,0,0,0,1382,1383,1,0,0,0,1383,1385,1,0,0,0,1384,1382,1,0,0,
  	0,1385,1387,5,2,0,0,1386,1377,1,0,0,0,1387,1390,1,0,0,0,1388,1386,1,0,
  	0,0,1388,1389,1,0,0,0,1389,133,1,0,0,0,1390,1388,1,0,0,0,1391,1392,5,
  	1,0,0,1392,1394,5,155,0,0,1393,1395,3,40,20,0,1394,1393,1,0,0,0,1394,
  	1395,1,0,0,0,1395,1396,1,0,0,0,1396,1397,3,136,68,0,1397,1398,5,2,0,0,
  	1398,135,1,0,0,0,1399,1400,3,12,6,0,1400,1401,3,86,43,0,1401,1409,1,0,
  	0,0,1402,1403,3,142,71,0,1403,1404,3,12,6,0,1404,1409,1,0,0,0,1405,1406,
  	3,148,74,0,1406,1407,3,136,68,0,1407,1409,1,0,0,0,1408,1399,1,0,0,0,1408,
  	1402,1,0,0,0,1408,1405,1,0,0,0,1409,137,1,0,0,0,1410,1411,5,1,0,0,1411,
  	1413,5,150,0,0,1412,1414,3,40,20,0,1413,1412,1,0,0,0,1413,1414,1,0,0,
  	0,1414,1417,1,0,0,0,1415,1418,3,32,16,0,1416,1418,3,22,11,0,1417,1415,
  	1,0,0,0,1417,1416,1,0,0,0,1418,1419,1,0,0,0,1419,1420,5,2,0,0,1420,1457,
  	1,0,0,0,1421,1422,5,1,0,0,1422,1424,5,156,0,0,1423,1425,3,40,20,0,1424,
  	1423,1,0,0,0,1424,1425,1,0,0,0,1425,1426,1,0,0,0,1426,1427,3,28,14,0,
  	1427,1428,5,2,0,0,1428,1457,1,0,0,0,1429,1430,5,1,0,0,1430,1432,5,157,
  	0,0,1431,1433,3,40,20,0,1432,1431,1,0,0,0,1432,1433,1,0,0,0,1433,1434,
  	1,0,0,0,1434,1435,3,30,15,0,1435,1436,5,2,0,0,1436,1457,1,0,0,0,1437,
  	1438,5,1,0,0,1438,1440,5,155,0,0,1439,1441,3,40,20,0,1440,1439,1,0,0,
  	0,1440,1441,1,0,0,0,1441,1442,1,0,0,0,1442,1443,3,12,6,0,1443,1444,5,
  	2,0,0,1444,1457,1,0,0,0,1445,1446,5,1,0,0,1446,1448,5,165,0,0,1447,1449,
  	3,40,20,0,1448,1447,1,0,0,0,1448,1449,1,0,0,0,1449,1452,1,0,0,0,1450,
  	1453,3,32,16,0,1451,1453,3,22,11,0,1452,1450,1,0,0,0,1452,1451,1,0,0,
  	0,1453,1454,1,0,0,0,1454,1455,5,2,0,0,1455,1457,1,0,0,0,1456,1410,1,0,
  	0,0,1456,1421,1,0,0,0,1456,1429,1,0,0,0,1456,1437,1,0,0,0,1456,1445,1,
  	0,0,0,1457,139,1,0,0,0,1458,1459,5,1,0,0,1459,1460,5,161,0,0,1460,1461,
  	3,2,1,0,1461,1462,3,2,1,0,1462,1463,3,138,69,0,1463,1464,5,2,0,0,1464,
  	141,1,0,0,0,1465,1466,5,1,0,0,1466,1467,5,161,0,0,1467,1468,3,2,1,0,1468,
  	1469,3,2,1,0,1469,1470,5,2,0,0,1470,143,1,0,0,0,1471,1472,5,1,0,0,1472,
  	1473,7,5,0,0,1473,1474,3,38,19,0,1474,1475,5,2,0,0,1475,145,1,0,0,0,1476,
  	1477,5,1,0,0,1477,1478,5,162,0,0,1478,1479,3,2,1,0,1479,1480,3,144,72,
  	0,1480,1481,5,2,0,0,1481,147,1,0,0,0,1482,1483,5,1,0,0,1483,1484,5,162,
  	0,0,1484,1485,3,2,1,0,1485,1486,5,2,0,0,1486,149,1,0,0,0,1487,1488,5,
  	1,0,0,1488,1490,5,149,0,0,1489,1491,3,40,20,0,1490,1489,1,0,0,0,1490,
  	1491,1,0,0,0,1491,1492,1,0,0,0,1492,1493,3,26,13,0,1493,1494,5,2,0,0,
  	1494,151,1,0,0,0,1495,1506,3,150,75,0,1496,1497,5,1,0,0,1497,1501,5,41,
  	0,0,1498,1500,3,150,75,0,1499,1498,1,0,0,0,1500,1503,1,0,0,0,1501,1499,
  	1,0,0,0,1501,1502,1,0,0,0,1502,1504,1,0,0,0,1503,1501,1,0,0,0,1504,1506,
  	5,2,0,0,1505,1495,1,0,0,0,1505,1496,1,0,0,0,1506,153,1,0,0,0,1507,1508,
  	3,152,76,0,1508,155,1,0,0,0,1509,1510,5,1,0,0,1510,1511,5,151,0,0,1511,
  	1512,3,38,19,0,1512,1513,5,2,0,0,1513,157,1,0,0,0,1514,1526,3,154,77,
  	0,1515,1526,3,134,67,0,1516,1526,3,116,58,0,1517,1526,3,122,61,0,1518,
  	1526,3,88,44,0,1519,1526,3,114,57,0,1520,1526,3,120,60,0,1521,1526,3,
  	156,78,0,1522,1526,3,140,70,0,1523,1526,3,146,73,0,1524,1526,3,126,63,
  	0,1525,1514,1,0,0,0,1525,1515,1,0,0,0,1525,1516,1,0,0,0,1525,1517,1,0,
  	0,0,1525,1518,1,0,0,0,1525,1519,1,0,0,0,1525,1520,1,0,0,0,1525,1521,1,
  	0,0,0,1525,1522,1,0,0,0,1525,1523,1,0,0,0,1525,1524,1,0,0,0,1526,1527,
  	1,0,0,0,1527,1525,1,0,0,0,1527,1528,1,0,0,0,1528,159,1,0,0,0,1529,1530,
  	5,1,0,0,1530,1532,5,166,0,0,1531,1533,5,186,0,0,1532,1531,1,0,0,0,1532,
  	1533,1,0,0,0,1533,1537,1,0,0,0,1534,1536,3,158,79,0,1535,1534,1,0,0,0,
  	1536,1539,1,0,0,0,1537,1535,1,0,0,0,1537,1538,1,0,0,0,1538,1540,1,0,0,
  	0,1539,1537,1,0,0,0,1540,1541,5,2,0,0,1541,161,1,0,0,0,1542,1544,3,158,
  	79,0,1543,1542,1,0,0,0,1543,1544,1,0,0,0,1544,163,1,0,0,0,1545,1560,3,
  	160,80,0,1546,1547,5,1,0,0,1547,1549,5,166,0,0,1548,1550,5,186,0,0,1549,
  	1548,1,0,0,0,1549,1550,1,0,0,0,1550,1551,1,0,0,0,1551,1555,7,6,0,0,1552,
  	1554,5,6,0,0,1553,1552,1,0,0,0,1554,1557,1,0,0,0,1555,1553,1,0,0,0,1555,
  	1556,1,0,0,0,1556,1558,1,0,0,0,1557,1555,1,0,0,0,1558,1560,5,2,0,0,1559,
  	1545,1,0,0,0,1559,1546,1,0,0,0,1560,165,1,0,0,0,1561,1562,5,1,0,0,1562,
  	1564,5,174,0,0,1563,1565,5,186,0,0,1564,1563,1,0,0,0,1564,1565,1,0,0,
  	0,1565,1566,1,0,0,0,1566,1567,3,2,1,0,1567,1568,3,184,92,0,1568,1569,
  	5,2,0,0,1569,1579,1,0,0,0,1570,1571,5,1,0,0,1571,1573,5,175,0,0,1572,
  	1574,5,186,0,0,1573,1572,1,0,0,0,1573,1574,1,0,0,0,1574,1575,1,0,0,0,
  	1575,1576,3,2,1,0,1576,1577,5,2,0,0,1577,1579,1,0,0,0,1578,1561,1,0,0,
  	0,1578,1570,1,0,0,0,1579,167,1,0,0,0,1580,1581,5,1,0,0,1581,1582,5,176,
  	0,0,1582,1583,3,164,82,0,1583,1584,5,6,0,0,1584,1585,5,2,0,0,1585,1633,
  	1,0,0,0,1586,1587,5,1,0,0,1587,1588,5,177,0,0,1588,1589,3,164,82,0,1589,
  	1590,5,6,0,0,1590,1591,5,2,0,0,1591,1633,1,0,0,0,1592,1593,5,1,0,0,1593,
  	1594,5,178,0,0,1594,1595,3,164,82,0,1595,1596,5,6,0,0,1596,1597,5,2,0,
  	0,1597,1633,1,0,0,0,1598,1599,5,1,0,0,1599,1600,5,181,0,0,1600,1601,3,
  	164,82,0,1601,1602,5,6,0,0,1602,1603,5,2,0,0,1603,1633,1,0,0,0,1604,1605,
  	5,1,0,0,1605,1606,5,179,0,0,1606,1610,3,166,83,0,1607,1609,3,188,94,0,
  	1608,1607,1,0,0,0,1609,1612,1,0,0,0,1610,1608,1,0,0,0,1610,1611,1,0,0,
  	0,1611,1613,1,0,0,0,1612,1610,1,0,0,0,1613,1614,5,2,0,0,1614,1633,1,0,
  	0,0,1615,1616,5,1,0,0,1616,1617,5,180,0,0,1617,1618,3,166,83,0,1618,1619,
  	5,2,0,0,1619,1633,1,0,0,0,1620,1621,5,1,0,0,1621,1622,5,181,0,0,1622,
  	1623,3,166,83,0,1623,1624,5,6,0,0,1624,1625,5,2,0,0,1625,1633,1,0,0,0,
  	1626,1627,5,1,0,0,1627,1628,5,182,0,0,1628,1629,3,166,83,0,1629,1630,
  	5,6,0,0,1630,1631,5,2,0,0,1631,1633,1,0,0,0,1632,1580,1,0,0,0,1632,1586,
  	1,0,0,0,1632,1592,1,0,0,0,1632,1598,1,0,0,0,1632,1604,1,0,0,0,1632,1615,
  	1,0,0,0,1632,1620,1,0,0,0,1632,1626,1,0,0,0,1633,169,1,0,0,0,1634,1661,
  	3,166,83,0,1635,1661,3,168,84,0,1636,1661,3,164,82,0,1637,1638,5,1,0,
  	0,1638,1639,5,173,0,0,1639,1641,3,2,1,0,1640,1642,5,186,0,0,1641,1640,
  	1,0,0,0,1641,1642,1,0,0,0,1642,1643,1,0,0,0,1643,1644,5,2,0,0,1644,1661,
  	1,0,0,0,1645,1646,5,1,0,0,1646,1648,5,170,0,0,1647,1649,5,186,0,0,1648,
  	1647,1,0,0,0,1648,1649,1,0,0,0,1649,1650,1,0,0,0,1650,1651,3,172,86,0,
  	1651,1652,5,2,0,0,1652,1661,1,0,0,0,1653,1654,5,1,0,0,1654,1656,5,171,
  	0,0,1655,1657,5,186,0,0,1656,1655,1,0,0,0,1656,1657,1,0,0,0,1657,1658,
  	1,0,0,0,1658,1661,5,2,0,0,1659,1661,3,174,87,0,1660,1634,1,0,0,0,1660,
  	1635,1,0,0,0,1660,1636,1,0,0,0,1660,1637,1,0,0,0,1660,1645,1,0,0,0,1660,
  	1653,1,0,0,0,1660,1659,1,0,0,0,1661,171,1,0,0,0,1662,1663,5,1,0,0,1663,
  	1664,5,26,0,0,1664,1665,5,1,0,0,1665,1666,5,166,0,0,1666,1667,5,186,0,
  	0,1667,1668,5,2,0,0,1668,1670,5,2,0,0,1669,1662,1,0,0,0,1670,1673,1,0,
  	0,0,1671,1669,1,0,0,0,1671,1672,1,0,0,0,1672,1677,1,0,0,0,1673,1671,1,
  	0,0,0,1674,1676,3,170,85,0,1675,1674,1,0,0,0,1676,1679,1,0,0,0,1677,1675,
  	1,0,0,0,1677,1678,1,0,0,0,1678,173,1,0,0,0,1679,1677,1,0,0,0,1680,1681,
  	5,1,0,0,1681,1683,5,172,0,0,1682,1684,5,186,0,0,1683,1682,1,0,0,0,1683,
  	1684,1,0,0,0,1684,1688,1,0,0,0,1685,1687,3,170,85,0,1686,1685,1,0,0,0,
  	1687,1690,1,0,0,0,1688,1686,1,0,0,0,1688,1689,1,0,0,0,1689,1691,1,0,0,
  	0,1690,1688,1,0,0,0,1691,1713,5,2,0,0,1692,1693,5,1,0,0,1693,1695,5,183,
  	0,0,1694,1696,5,186,0,0,1695,1694,1,0,0,0,1695,1696,1,0,0,0,1696,1697,
  	1,0,0,0,1697,1698,5,6,0,0,1698,1713,5,2,0,0,1699,1700,5,1,0,0,1700,1702,
  	5,184,0,0,1701,1703,5,186,0,0,1702,1701,1,0,0,0,1702,1703,1,0,0,0,1703,
  	1704,1,0,0,0,1704,1705,5,6,0,0,1705,1713,5,2,0,0,1706,1707,5,1,0,0,1707,
  	1709,5,184,0,0,1708,1710,5,186,0,0,1709,1708,1,0,0,0,1709,1710,1,0,0,
  	0,1710,1711,1,0,0,0,1711,1713,5,2,0,0,1712,1680,1,0,0,0,1712,1692,1,0,
  	0,0,1712,1699,1,0,0,0,1712,1706,1,0,0,0,1713,175,1,0,0,0,1714,1715,5,
  	1,0,0,1715,1716,5,11,0,0,1716,1717,3,36,18,0,1717,1718,5,2,0,0,1718,177,
  	1,0,0,0,1719,1720,5,1,0,0,1720,1721,5,12,0,0,1721,1725,5,10,0,0,1722,
  	1724,3,36,18,0,1723,1722,1,0,0,0,1724,1727,1,0,0,0,1725,1723,1,0,0,0,
  	1725,1726,1,0,0,0,1726,1728,1,0,0,0,1727,1725,1,0,0,0,1728,1729,5,2,0,
  	0,1729,179,1,0,0,0,1730,1731,5,1,0,0,1731,1732,5,42,0,0,1732,1733,3,6,
  	3,0,1733,1734,5,2,0,0,1734,1744,1,0,0,0,1735,1736,5,1,0,0,1736,1737,5,
  	46,0,0,1737,1738,5,3,0,0,1738,1744,5,2,0,0,1739,1740,5,1,0,0,1740,1741,
  	5,47,0,0,1741,1742,5,3,0,0,1742,1744,5,2,0,0,1743,1730,1,0,0,0,1743,1735,
  	1,0,0,0,1743,1739,1,0,0,0,1744,181,1,0,0,0,1745,1749,3,176,88,0,1746,
  	1749,3,178,89,0,1747,1749,3,180,90,0,1748,1745,1,0,0,0,1748,1746,1,0,
  	0,0,1748,1747,1,0,0,0,1749,183,1,0,0,0,1750,1752,3,182,91,0,1751,1750,
  	1,0,0,0,1752,1755,1,0,0,0,1753,1751,1,0,0,0,1753,1754,1,0,0,0,1754,185,
  	1,0,0,0,1755,1753,1,0,0,0,1756,1759,3,36,18,0,1757,1759,5,185,0,0,1758,
  	1756,1,0,0,0,1758,1757,1,0,0,0,1759,187,1,0,0,0,1760,1789,3,176,88,0,
  	1761,1789,3,180,90,0,1762,1763,5,1,0,0,1763,1764,5,11,0,0,1764,1765,5,
  	185,0,0,1765,1789,5,2,0,0,1766,1767,5,1,0,0,1767,1768,7,7,0,0,1768,1789,
  	5,2,0,0,1769,1770,5,1,0,0,1770,1771,5,12,0,0,1771,1775,5,10,0,0,1772,
  	1774,3,186,93,0,1773,1772,1,0,0,0,1774,1777,1,0,0,0,1775,1773,1,0,0,0,
  	1775,1776,1,0,0,0,1776,1778,1,0,0,0,1777,1775,1,0,0,0,1778,1789,5,2,0,
  	0,1779,1780,5,1,0,0,1780,1784,5,169,0,0,1781,1783,3,188,94,0,1782,1781,
  	1,0,0,0,1783,1786,1,0,0,0,1784,1782,1,0,0,0,1784,1785,1,0,0,0,1785,1787,
  	1,0,0,0,1786,1784,1,0,0,0,1787,1789,5,2,0,0,1788,1760,1,0,0,0,1788,1761,
  	1,0,0,0,1788,1762,1,0,0,0,1788,1766,1,0,0,0,1788,1769,1,0,0,0,1788,1779,
  	1,0,0,0,1789,189,1,0,0,0,1790,1792,3,170,85,0,1791,1790,1,0,0,0,1792,
  	1795,1,0,0,0,1793,1791,1,0,0,0,1793,1794,1,0,0,0,1794,1796,1,0,0,0,1795,
  	1793,1,0,0,0,1796,1805,5,0,0,1,1797,1799,3,158,79,0,1798,1797,1,0,0,0,
  	1799,1800,1,0,0,0,1800,1798,1,0,0,0,1800,1801,1,0,0,0,1801,1802,1,0,0,
  	0,1802,1803,5,0,0,1,1803,1805,1,0,0,0,1804,1793,1,0,0,0,1804,1798,1,0,
  	0,0,1805,191,1,0,0,0,1806,1807,3,160,80,0,1807,1808,5,0,0,1,1808,1817,
  	1,0,0,0,1809,1811,3,158,79,0,1810,1809,1,0,0,0,1811,1814,1,0,0,0,1812,
  	1810,1,0,0,0,1812,1813,1,0,0,0,1813,1815,1,0,0,0,1814,1812,1,0,0,0,1815,
  	1817,5,0,0,1,1816,1806,1,0,0,0,1816,1812,1,0,0,0,1817,193,1,0,0,0,227,
  	199,221,226,234,238,246,253,259,264,274,281,288,293,303,311,316,322,326,
  	332,335,353,357,360,362,367,381,411,415,419,423,427,433,438,444,447,451,
  	454,458,461,465,468,472,475,480,483,563,576,586,589,593,596,601,604,608,
  	611,615,618,622,625,630,638,644,651,656,659,662,669,675,683,689,696,701,
  	705,710,713,717,721,726,728,731,740,746,754,760,766,775,781,789,795,807,
  	814,824,831,836,841,846,851,856,859,868,874,880,884,893,899,909,915,921,
  	925,932,938,948,954,960,972,975,984,990,998,1004,1016,1023,1033,1039,
  	1044,1051,1058,1068,1070,1080,1086,1094,1104,1106,1116,1122,1135,1138,
  	1143,1164,1174,1180,1187,1190,1195,1201,1204,1212,1218,1223,1228,1237,
  	1251,1257,1260,1264,1269,1276,1284,1287,1292,1296,1301,1318,1322,1327,
  	1335,1339,1345,1350,1354,1361,1367,1372,1382,1388,1394,1408,1413,1417,
  	1424,1432,1440,1448,1452,1456,1490,1501,1505,1525,1527,1532,1537,1543,
  	1549,1555,1559,1564,1573,1578,1610,1632,1641,1648,1656,1660,1671,1677,
  	1683,1688,1695,1702,1709,1712,1725,1743,1748,1753,1758,1775,1784,1788,
  	1793,1800,1804,1812,1816
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  watparserParserStaticData = staticData.release();
}

}

WatParser::WatParser(TokenStream *input) : WatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WatParser::WatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  WatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *watparserParserStaticData->atn, watparserParserStaticData->decisionToDFA, watparserParserStaticData->sharedContextCache, options);
}

WatParser::~WatParser() {
  delete _interpreter;
}

const atn::ATN& WatParser::getATN() const {
  return *watparserParserStaticData->atn;
}

std::string WatParser::getGrammarFileName() const {
  return "WatParser.g4";
}

const std::vector<std::string>& WatParser::getRuleNames() const {
  return watparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& WatParser::getVocabulary() const {
  return watparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView WatParser::getSerializedATN() const {
  return watparserParserStaticData->serializedATN;
}


//----------------- ValueContext ------------------------------------------------------------------

WatParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ValueContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::ValueContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::ValueContext::getRuleIndex() const {
  return WatParser::RuleValue;
}

void WatParser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void WatParser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}


std::any WatParser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ValueContext* WatParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 0, WatParser::RuleValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(194);
    _la = _input->LA(1);
    if (!(_la == WatParser::INT

    || _la == WatParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

WatParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NameContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}


size_t WatParser::NameContext::getRuleIndex() const {
  return WatParser::RuleName;
}

void WatParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void WatParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


std::any WatParser::NameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitName(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NameContext* WatParser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 2, WatParser::RuleName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    match(WatParser::STRING_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_optContext ------------------------------------------------------------------

WatParser::Null_optContext::Null_optContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Null_optContext::NULL_() {
  return getToken(WatParser::NULL_, 0);
}


size_t WatParser::Null_optContext::getRuleIndex() const {
  return WatParser::RuleNull_opt;
}

void WatParser::Null_optContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_opt(this);
}

void WatParser::Null_optContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_opt(this);
}


std::any WatParser::Null_optContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNull_opt(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Null_optContext* WatParser::null_opt() {
  Null_optContext *_localctx = _tracker.createInstance<Null_optContext>(_ctx, getState());
  enterRule(_localctx, 4, WatParser::RuleNull_opt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(199);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NULL_) {
      setState(198);
      match(WatParser::NULL_);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Heap_typeContext ------------------------------------------------------------------

WatParser::Heap_typeContext::Heap_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Heap_typeContext::ANY() {
  return getToken(WatParser::ANY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NONE() {
  return getToken(WatParser::NONE, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EQ() {
  return getToken(WatParser::EQ, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::I31() {
  return getToken(WatParser::I31, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOFUNC() {
  return getToken(WatParser::NOFUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EXTERN() {
  return getToken(WatParser::EXTERN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOEXTERN() {
  return getToken(WatParser::NOEXTERN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EXN() {
  return getToken(WatParser::EXN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Heap_typeContext::getRuleIndex() const {
  return WatParser::RuleHeap_type;
}

void WatParser::Heap_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeap_type(this);
}

void WatParser::Heap_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeap_type(this);
}


std::any WatParser::Heap_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHeap_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Heap_typeContext* WatParser::heap_type() {
  Heap_typeContext *_localctx = _tracker.createInstance<Heap_typeContext>(_ctx, getState());
  enterRule(_localctx, 6, WatParser::RuleHeap_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(201);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 224152690696) != 0) || _la == WatParser::FUNC

    || _la == WatParser::VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ref_typeContext ------------------------------------------------------------------

WatParser::Ref_typeContext::Ref_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Ref_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::REF() {
  return getToken(WatParser::REF, 0);
}

WatParser::Null_optContext* WatParser::Ref_typeContext::null_opt() {
  return getRuleContext<WatParser::Null_optContext>(0);
}

WatParser::Heap_typeContext* WatParser::Ref_typeContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Ref_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EXTERNREF() {
  return getToken(WatParser::EXTERNREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::FUNCREF() {
  return getToken(WatParser::FUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ANYREF() {
  return getToken(WatParser::ANYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLREF() {
  return getToken(WatParser::NULLREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EQREF() {
  return getToken(WatParser::EQREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::I31REF() {
  return getToken(WatParser::I31REF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::STRUCTREF() {
  return getToken(WatParser::STRUCTREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ARRAYREF() {
  return getToken(WatParser::ARRAYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLFUNCREF() {
  return getToken(WatParser::NULLFUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLEXTERNREF() {
  return getToken(WatParser::NULLEXTERNREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EXNREF() {
  return getToken(WatParser::EXNREF, 0);
}


size_t WatParser::Ref_typeContext::getRuleIndex() const {
  return WatParser::RuleRef_type;
}

void WatParser::Ref_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRef_type(this);
}

void WatParser::Ref_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRef_type(this);
}


std::any WatParser::Ref_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRef_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Ref_typeContext* WatParser::ref_type() {
  Ref_typeContext *_localctx = _tracker.createInstance<Ref_typeContext>(_ctx, getState());
  enterRule(_localctx, 8, WatParser::RuleRef_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(221);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(203);
      match(WatParser::LPAR);
      setState(204);
      match(WatParser::REF);
      setState(205);
      null_opt();
      setState(206);
      heap_type();
      setState(207);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(209);
      match(WatParser::EXTERNREF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(210);
      match(WatParser::FUNCREF);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(211);
      match(WatParser::ANYREF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(212);
      match(WatParser::NULLREF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(213);
      match(WatParser::EQREF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(214);
      match(WatParser::I31REF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(215);
      match(WatParser::STRUCTREF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(216);
      match(WatParser::ARRAYREF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(217);
      match(WatParser::NULLFUNCREF);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(218);
      match(WatParser::NULLEXTERNREF);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(219);
      match(WatParser::EXNREF);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(220);
      match(WatParser::EXTERNREF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Val_typeContext ------------------------------------------------------------------

WatParser::Val_typeContext::Val_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Ref_typeContext* WatParser::Val_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

tree::TerminalNode* WatParser::Val_typeContext::VEC_TYPE() {
  return getToken(WatParser::VEC_TYPE, 0);
}

tree::TerminalNode* WatParser::Val_typeContext::NUM_TYPE() {
  return getToken(WatParser::NUM_TYPE, 0);
}


size_t WatParser::Val_typeContext::getRuleIndex() const {
  return WatParser::RuleVal_type;
}

void WatParser::Val_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVal_type(this);
}

void WatParser::Val_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVal_type(this);
}


std::any WatParser::Val_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Val_typeContext* WatParser::val_type() {
  Val_typeContext *_localctx = _tracker.createInstance<Val_typeContext>(_ctx, getState());
  enterRule(_localctx, 10, WatParser::RuleVal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(226);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 1);
        setState(223);
        ref_type();
        break;
      }

      case WatParser::VEC_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(224);
        match(WatParser::VEC_TYPE);
        break;
      }

      case WatParser::NUM_TYPE: {
        enterOuterAlt(_localctx, 3);
        setState(225);
        match(WatParser::NUM_TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_typeContext ------------------------------------------------------------------

WatParser::Global_typeContext::Global_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Global_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Global_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Global_typeContext::getRuleIndex() const {
  return WatParser::RuleGlobal_type;
}

void WatParser::Global_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_type(this);
}

void WatParser::Global_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_type(this);
}


std::any WatParser::Global_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_typeContext* WatParser::global_type() {
  Global_typeContext *_localctx = _tracker.createInstance<Global_typeContext>(_ctx, getState());
  enterRule(_localctx, 12, WatParser::RuleGlobal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(234);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 3, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(228);
      val_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(229);
      match(WatParser::LPAR);
      setState(230);
      match(WatParser::MUT);
      setState(231);
      val_type();
      setState(232);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Storage_typeContext ------------------------------------------------------------------

WatParser::Storage_typeContext::Storage_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Storage_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Storage_typeContext::PACK_TYPE() {
  return getToken(WatParser::PACK_TYPE, 0);
}


size_t WatParser::Storage_typeContext::getRuleIndex() const {
  return WatParser::RuleStorage_type;
}

void WatParser::Storage_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorage_type(this);
}

void WatParser::Storage_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorage_type(this);
}


std::any WatParser::Storage_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStorage_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Storage_typeContext* WatParser::storage_type() {
  Storage_typeContext *_localctx = _tracker.createInstance<Storage_typeContext>(_ctx, getState());
  enterRule(_localctx, 14, WatParser::RuleStorage_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(238);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::LPAR:
      case WatParser::NUM_TYPE:
      case WatParser::VEC_TYPE:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 1);
        setState(236);
        val_type();
        break;
      }

      case WatParser::PACK_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(237);
        match(WatParser::PACK_TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_typeContext ------------------------------------------------------------------

WatParser::Field_typeContext::Field_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Storage_typeContext* WatParser::Field_typeContext::storage_type() {
  return getRuleContext<WatParser::Storage_typeContext>(0);
}

tree::TerminalNode* WatParser::Field_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Field_typeContext::getRuleIndex() const {
  return WatParser::RuleField_type;
}

void WatParser::Field_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_type(this);
}

void WatParser::Field_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_type(this);
}


std::any WatParser::Field_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitField_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Field_typeContext* WatParser::field_type() {
  Field_typeContext *_localctx = _tracker.createInstance<Field_typeContext>(_ctx, getState());
  enterRule(_localctx, 16, WatParser::RuleField_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(246);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 5, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(240);
      storage_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(241);
      match(WatParser::LPAR);
      setState(242);
      match(WatParser::MUT);
      setState(243);
      storage_type();
      setState(244);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_typeContext ------------------------------------------------------------------

WatParser::Struct_typeContext::Struct_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::FIELD() {
  return getTokens(WatParser::FIELD);
}

tree::TerminalNode* WatParser::Struct_typeContext::FIELD(size_t i) {
  return getToken(WatParser::FIELD, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Struct_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Struct_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Field_typeContext *> WatParser::Struct_typeContext::field_type() {
  return getRuleContexts<WatParser::Field_typeContext>();
}

WatParser::Field_typeContext* WatParser::Struct_typeContext::field_type(size_t i) {
  return getRuleContext<WatParser::Field_typeContext>(i);
}


size_t WatParser::Struct_typeContext::getRuleIndex() const {
  return WatParser::RuleStruct_type;
}

void WatParser::Struct_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_type(this);
}

void WatParser::Struct_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_type(this);
}


std::any WatParser::Struct_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStruct_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Struct_typeContext* WatParser::struct_type() {
  Struct_typeContext *_localctx = _tracker.createInstance<Struct_typeContext>(_ctx, getState());
  enterRule(_localctx, 18, WatParser::RuleStruct_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(264);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(248);
      match(WatParser::LPAR);
      setState(249);
      match(WatParser::FIELD);
      setState(259);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case WatParser::LPAR:
        case WatParser::RPAR:
        case WatParser::NUM_TYPE:
        case WatParser::PACK_TYPE:
        case WatParser::VEC_TYPE:
        case WatParser::ANYREF:
        case WatParser::NULLREF:
        case WatParser::EQREF:
        case WatParser::I31REF:
        case WatParser::STRUCTREF:
        case WatParser::ARRAYREF:
        case WatParser::FUNCREF:
        case WatParser::NULLFUNCREF:
        case WatParser::EXTERNREF:
        case WatParser::NULLEXTERNREF:
        case WatParser::EXNREF: {
          setState(253);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643778) != 0)) {
            setState(250);
            field_type();
            setState(255);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case WatParser::VAR: {
          setState(256);
          bind_var();
          setState(257);
          field_type();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(261);
      match(WatParser::RPAR);
      setState(266);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

WatParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Field_typeContext* WatParser::Array_typeContext::field_type() {
  return getRuleContext<WatParser::Field_typeContext>(0);
}


size_t WatParser::Array_typeContext::getRuleIndex() const {
  return WatParser::RuleArray_type;
}

void WatParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void WatParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}


std::any WatParser::Array_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitArray_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Array_typeContext* WatParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 20, WatParser::RuleArray_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(267);
    field_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

WatParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_typeContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_typeContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_typeContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_typeContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_typeContext::getRuleIndex() const {
  return WatParser::RuleFunc_type;
}

void WatParser::Func_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_type(this);
}

void WatParser::Func_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_type(this);
}


std::any WatParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_typeContext* WatParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 22, WatParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(293);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(269);
      match(WatParser::LPAR);
      setState(288);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 11, _ctx)) {
      case 1: {
        setState(270);
        match(WatParser::RESULT);
        setState(274);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(271);
          val_type();
          setState(276);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(277);
        match(WatParser::PARAM);
        setState(281);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(278);
          val_type();
          setState(283);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 3: {
        setState(284);
        match(WatParser::PARAM);
        setState(285);
        bind_var();
        setState(286);
        val_type();
        break;
      }

      default:
        break;
      }
      setState(290);
      match(WatParser::RPAR);
      setState(295);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Str_typeContext ------------------------------------------------------------------

WatParser::Str_typeContext::Str_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Str_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

WatParser::Struct_typeContext* WatParser::Str_typeContext::struct_type() {
  return getRuleContext<WatParser::Struct_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

WatParser::Array_typeContext* WatParser::Str_typeContext::array_type() {
  return getRuleContext<WatParser::Array_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_typeContext* WatParser::Str_typeContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}


size_t WatParser::Str_typeContext::getRuleIndex() const {
  return WatParser::RuleStr_type;
}

void WatParser::Str_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStr_type(this);
}

void WatParser::Str_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStr_type(this);
}


std::any WatParser::Str_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Str_typeContext* WatParser::str_type() {
  Str_typeContext *_localctx = _tracker.createInstance<Str_typeContext>(_ctx, getState());
  enterRule(_localctx, 24, WatParser::RuleStr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(296);
    match(WatParser::LPAR);
    setState(303);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::STRUCT: {
        setState(297);
        match(WatParser::STRUCT);
        setState(298);
        struct_type();
        break;
      }

      case WatParser::ARRAY: {
        setState(299);
        match(WatParser::ARRAY);
        setState(300);
        array_type();
        break;
      }

      case WatParser::FUNC: {
        setState(301);
        match(WatParser::FUNC);
        setState(302);
        func_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(305);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sub_typeContext ------------------------------------------------------------------

WatParser::Sub_typeContext::Sub_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Str_typeContext* WatParser::Sub_typeContext::str_type() {
  return getRuleContext<WatParser::Str_typeContext>(0);
}

tree::TerminalNode* WatParser::Sub_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::SUB() {
  return getToken(WatParser::SUB, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::FINAL() {
  return getToken(WatParser::FINAL, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Sub_typeContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Sub_typeContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::Sub_typeContext::getRuleIndex() const {
  return WatParser::RuleSub_type;
}

void WatParser::Sub_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSub_type(this);
}

void WatParser::Sub_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSub_type(this);
}


std::any WatParser::Sub_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSub_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Sub_typeContext* WatParser::sub_type() {
  Sub_typeContext *_localctx = _tracker.createInstance<Sub_typeContext>(_ctx, getState());
  enterRule(_localctx, 26, WatParser::RuleSub_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(322);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 16, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(307);
      str_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(308);
      match(WatParser::LPAR);
      setState(309);
      match(WatParser::SUB);
      setState(311);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::FINAL) {
        setState(310);
        match(WatParser::FINAL);
      }
      setState(316);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(313);
        var_();
        setState(318);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(319);
      str_type();
      setState(320);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_typeContext ------------------------------------------------------------------

WatParser::Table_typeContext::Table_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Table_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Table_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

WatParser::Ref_typeContext* WatParser::Table_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}


size_t WatParser::Table_typeContext::getRuleIndex() const {
  return WatParser::RuleTable_type;
}

void WatParser::Table_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_type(this);
}

void WatParser::Table_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_type(this);
}


std::any WatParser::Table_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_typeContext* WatParser::table_type() {
  Table_typeContext *_localctx = _tracker.createInstance<Table_typeContext>(_ctx, getState());
  enterRule(_localctx, 28, WatParser::RuleTable_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(324);
    match(WatParser::NAT);
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(325);
      match(WatParser::NAT);
    }
    setState(328);
    ref_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_typeContext ------------------------------------------------------------------

WatParser::Memory_typeContext::Memory_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Memory_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Memory_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

tree::TerminalNode* WatParser::Memory_typeContext::SHARED() {
  return getToken(WatParser::SHARED, 0);
}


size_t WatParser::Memory_typeContext::getRuleIndex() const {
  return WatParser::RuleMemory_type;
}

void WatParser::Memory_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_type(this);
}

void WatParser::Memory_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_type(this);
}


std::any WatParser::Memory_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_typeContext* WatParser::memory_type() {
  Memory_typeContext *_localctx = _tracker.createInstance<Memory_typeContext>(_ctx, getState());
  enterRule(_localctx, 30, WatParser::RuleMemory_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(330);
    match(WatParser::NAT);
    setState(332);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(331);
      match(WatParser::NAT);
    }
    setState(335);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::SHARED) {
      setState(334);
      match(WatParser::SHARED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_useContext ------------------------------------------------------------------

WatParser::Type_useContext::Type_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_useContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Var_Context* WatParser::Type_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Type_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Type_useContext::getRuleIndex() const {
  return WatParser::RuleType_use;
}

void WatParser::Type_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_use(this);
}

void WatParser::Type_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_use(this);
}


std::any WatParser::Type_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_useContext* WatParser::type_use() {
  Type_useContext *_localctx = _tracker.createInstance<Type_useContext>(_ctx, getState());
  enterRule(_localctx, 32, WatParser::RuleType_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(337);
    match(WatParser::LPAR);
    setState(338);
    match(WatParser::TYPE);
    setState(339);
    var_();
    setState(340);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nat32Context ------------------------------------------------------------------

WatParser::Nat32Context::Nat32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Nat32Context::NAT() {
  return getToken(WatParser::NAT, 0);
}


size_t WatParser::Nat32Context::getRuleIndex() const {
  return WatParser::RuleNat32;
}

void WatParser::Nat32Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNat32(this);
}

void WatParser::Nat32Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNat32(this);
}


std::any WatParser::Nat32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNat32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Nat32Context* WatParser::nat32() {
  Nat32Context *_localctx = _tracker.createInstance<Nat32Context>(_ctx, getState());
  enterRule(_localctx, 34, WatParser::RuleNat32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(342);
    match(WatParser::NAT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumContext ------------------------------------------------------------------

WatParser::NumContext::NumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NumContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::NumContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::NumContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::NumContext::getRuleIndex() const {
  return WatParser::RuleNum;
}

void WatParser::NumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNum(this);
}

void WatParser::NumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNum(this);
}


std::any WatParser::NumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNum(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumContext* WatParser::num() {
  NumContext *_localctx = _tracker.createInstance<NumContext>(_ctx, getState());
  enterRule(_localctx, 36, WatParser::RuleNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(344);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_Context ------------------------------------------------------------------

WatParser::Var_Context::Var_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Var_Context::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Var_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Var_Context::getRuleIndex() const {
  return WatParser::RuleVar_;
}

void WatParser::Var_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVar_(this);
}

void WatParser::Var_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVar_(this);
}


std::any WatParser::Var_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVar_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Var_Context* WatParser::var_() {
  Var_Context *_localctx = _tracker.createInstance<Var_Context>(_ctx, getState());
  enterRule(_localctx, 38, WatParser::RuleVar_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(346);
    _la = _input->LA(1);
    if (!(_la == WatParser::NAT || _la == WatParser::VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bind_varContext ------------------------------------------------------------------

WatParser::Bind_varContext::Bind_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Bind_varContext::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Bind_varContext::getRuleIndex() const {
  return WatParser::RuleBind_var;
}

void WatParser::Bind_varContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBind_var(this);
}

void WatParser::Bind_varContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBind_var(this);
}


std::any WatParser::Bind_varContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBind_var(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Bind_varContext* WatParser::bind_var() {
  Bind_varContext *_localctx = _tracker.createInstance<Bind_varContext>(_ctx, getState());
  enterRule(_localctx, 40, WatParser::RuleBind_var);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(348);
    match(WatParser::VAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instr_listContext ------------------------------------------------------------------

WatParser::Instr_listContext::Instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::InstrContext *> WatParser::Instr_listContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::Instr_listContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

WatParser::Call_instr_instr_listContext* WatParser::Instr_listContext::call_instr_instr_list() {
  return getRuleContext<WatParser::Call_instr_instr_listContext>(0);
}

WatParser::Select_instr_instr_listContext* WatParser::Instr_listContext::select_instr_instr_list() {
  return getRuleContext<WatParser::Select_instr_instr_listContext>(0);
}


size_t WatParser::Instr_listContext::getRuleIndex() const {
  return WatParser::RuleInstr_list;
}

void WatParser::Instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr_list(this);
}

void WatParser::Instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr_list(this);
}


std::any WatParser::Instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Instr_listContext* WatParser::instr_list() {
  Instr_listContext *_localctx = _tracker.createInstance<Instr_listContext>(_ctx, getState());
  enterRule(_localctx, 42, WatParser::RuleInstr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(353);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(350);
        instr(); 
      }
      setState(355);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 20, _ctx);
    }
    setState(362);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 23, _ctx)) {
    case 1: {
      setState(357);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::CALL_INDIRECT

      || _la == WatParser::RETURN_CALL_INDIRECT) {
        setState(356);
        call_instr_instr_list();
      }
      break;
    }

    case 2: {
      setState(360);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::SELECT) {
        setState(359);
        select_instr_instr_list();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstrContext ------------------------------------------------------------------

WatParser::InstrContext::InstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Plain_instrContext* WatParser::InstrContext::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

WatParser::Block_instrContext* WatParser::InstrContext::block_instr() {
  return getRuleContext<WatParser::Block_instrContext>(0);
}

WatParser::ExprContext* WatParser::InstrContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::InstrContext::getRuleIndex() const {
  return WatParser::RuleInstr;
}

void WatParser::InstrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr(this);
}

void WatParser::InstrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr(this);
}


std::any WatParser::InstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::InstrContext* WatParser::instr() {
  InstrContext *_localctx = _tracker.createInstance<InstrContext>(_ctx, getState());
  enterRule(_localctx, 44, WatParser::RuleInstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(367);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CONST:
      case WatParser::VEC_CONST:
      case WatParser::REF_NULL:
      case WatParser::REF_FUNC:
      case WatParser::REF_IS_NULL:
      case WatParser::REF_AS_NON_NULL:
      case WatParser::REF_TEST:
      case WatParser::REF_CAST:
      case WatParser::REF_EQ:
      case WatParser::REF_I31:
      case WatParser::THROW:
      case WatParser::THROW_REF:
      case WatParser::I31_GET:
      case WatParser::STRUCT_NEW:
      case WatParser::STRUCT_GET:
      case WatParser::STRUCT_SET:
      case WatParser::ARRAY_NEW:
      case WatParser::ARRAY_NEW_FIXED:
      case WatParser::ARRAY_NEW_ELEM:
      case WatParser::ARRAY_NEW_DATA:
      case WatParser::ARRAY_GET:
      case WatParser::ARRAY_SET:
      case WatParser::ARRAY_LEN:
      case WatParser::ARRAY_COPY:
      case WatParser::ARRAY_FILL:
      case WatParser::ARRAY_INIT_DATA:
      case WatParser::ARRAY_INIT_ELEM:
      case WatParser::EXTERN_CONVERT:
      case WatParser::MEMORY_ATOMIC_NOTIFY:
      case WatParser::MEMORY_ATOMIC_WAIT:
      case WatParser::ATOMIC_FENCE:
      case WatParser::ATOMIC_LOAD:
      case WatParser::ATOMIC_STORE:
      case WatParser::ATOMIC_RMW:
      case WatParser::ATOMIC_RMW_CMPXCHG:
      case WatParser::NOP:
      case WatParser::UNREACHABLE:
      case WatParser::DROP:
      case WatParser::BR:
      case WatParser::BR_IF:
      case WatParser::BR_TABLE:
      case WatParser::RETURN:
      case WatParser::SELECT:
      case WatParser::CALL:
      case WatParser::CALL_REF:
      case WatParser::RETURN_CALL:
      case WatParser::RETURN_CALL_REF:
      case WatParser::BR_ON_NULL:
      case WatParser::BR_ON_CAST:
      case WatParser::LOCAL_GET:
      case WatParser::LOCAL_SET:
      case WatParser::LOCAL_TEE:
      case WatParser::GLOBAL_GET:
      case WatParser::GLOBAL_SET:
      case WatParser::TABLE_GET:
      case WatParser::TABLE_SET:
      case WatParser::TABLE_SIZE:
      case WatParser::TABLE_GROW:
      case WatParser::TABLE_FILL:
      case WatParser::TABLE_COPY:
      case WatParser::TABLE_INIT:
      case WatParser::DATA_DROP:
      case WatParser::ELEM_DROP:
      case WatParser::LOAD:
      case WatParser::STORE:
      case WatParser::UNARY:
      case WatParser::BINARY:
      case WatParser::TEST:
      case WatParser::COMPARE:
      case WatParser::CONVERT:
      case WatParser::VEC_LOAD:
      case WatParser::VEC_STORE:
      case WatParser::VEC_LOAD_LANE:
      case WatParser::VEC_STORE_LANE:
      case WatParser::VEC_UNARY:
      case WatParser::VEC_BINARY:
      case WatParser::VEC_TERNARY:
      case WatParser::VEC_TEST:
      case WatParser::VEC_BITMASK:
      case WatParser::VEC_SHIFT:
      case WatParser::VEC_SHUFFLE:
      case WatParser::VEC_SPLAT:
      case WatParser::VEC_EXTRACT:
      case WatParser::VEC_REPLACE:
      case WatParser::MEMORY_SIZE:
      case WatParser::MEMORY_GROW:
      case WatParser::MEMORY_FILL:
      case WatParser::MEMORY_COPY:
      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 1);
        setState(364);
        plain_instr();
        break;
      }

      case WatParser::TRY_TABLE:
      case WatParser::BLOCK:
      case WatParser::LOOP:
      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(365);
        block_instr();
        break;
      }

      case WatParser::LPAR: {
        enterOuterAlt(_localctx, 3);
        setState(366);
        expr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plain_instrContext ------------------------------------------------------------------

WatParser::Plain_instrContext::Plain_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Plain_instrContext::UNREACHABLE() {
  return getToken(WatParser::UNREACHABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NOP() {
  return getToken(WatParser::NOP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DROP() {
  return getToken(WatParser::DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR() {
  return getToken(WatParser::BR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Plain_instrContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Plain_instrContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_IF() {
  return getToken(WatParser::BR_IF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_TABLE() {
  return getToken(WatParser::BR_TABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_NULL() {
  return getToken(WatParser::BR_ON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_CAST() {
  return getToken(WatParser::BR_ON_CAST, 0);
}

std::vector<WatParser::Ref_typeContext *> WatParser::Plain_instrContext::ref_type() {
  return getRuleContexts<WatParser::Ref_typeContext>();
}

WatParser::Ref_typeContext* WatParser::Plain_instrContext::ref_type(size_t i) {
  return getRuleContext<WatParser::Ref_typeContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN() {
  return getToken(WatParser::RETURN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL() {
  return getToken(WatParser::CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL_REF() {
  return getToken(WatParser::CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL() {
  return getToken(WatParser::RETURN_CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL_REF() {
  return getToken(WatParser::RETURN_CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_GET() {
  return getToken(WatParser::LOCAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_SET() {
  return getToken(WatParser::LOCAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_TEE() {
  return getToken(WatParser::LOCAL_TEE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_GET() {
  return getToken(WatParser::GLOBAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_SET() {
  return getToken(WatParser::GLOBAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GET() {
  return getToken(WatParser::TABLE_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SET() {
  return getToken(WatParser::TABLE_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SIZE() {
  return getToken(WatParser::TABLE_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GROW() {
  return getToken(WatParser::TABLE_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_FILL() {
  return getToken(WatParser::TABLE_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_COPY() {
  return getToken(WatParser::TABLE_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_INIT() {
  return getToken(WatParser::TABLE_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ELEM_DROP() {
  return getToken(WatParser::ELEM_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOAD() {
  return getToken(WatParser::LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::OFFSET_EQ_NAT() {
  return getToken(WatParser::OFFSET_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ALIGN_EQ_NAT() {
  return getToken(WatParser::ALIGN_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STORE() {
  return getToken(WatParser::STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD() {
  return getToken(WatParser::VEC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE() {
  return getToken(WatParser::VEC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD_LANE() {
  return getToken(WatParser::VEC_LOAD_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE_LANE() {
  return getToken(WatParser::VEC_STORE_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_SIZE() {
  return getToken(WatParser::MEMORY_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_GROW() {
  return getToken(WatParser::MEMORY_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

std::vector<WatParser::NumContext *> WatParser::Plain_instrContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Plain_instrContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_FILL() {
  return getToken(WatParser::MEMORY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_COPY() {
  return getToken(WatParser::MEMORY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_INIT() {
  return getToken(WatParser::MEMORY_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DATA_DROP() {
  return getToken(WatParser::DATA_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Plain_instrContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_IS_NULL() {
  return getToken(WatParser::REF_IS_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_AS_NON_NULL() {
  return getToken(WatParser::REF_AS_NON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_TEST() {
  return getToken(WatParser::REF_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_CAST() {
  return getToken(WatParser::REF_CAST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::I31_GET() {
  return getToken(WatParser::I31_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_NEW() {
  return getToken(WatParser::STRUCT_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_GET() {
  return getToken(WatParser::STRUCT_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_SET() {
  return getToken(WatParser::STRUCT_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW() {
  return getToken(WatParser::ARRAY_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_FIXED() {
  return getToken(WatParser::ARRAY_NEW_FIXED, 0);
}

WatParser::Nat32Context* WatParser::Plain_instrContext::nat32() {
  return getRuleContext<WatParser::Nat32Context>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_ELEM() {
  return getToken(WatParser::ARRAY_NEW_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_DATA() {
  return getToken(WatParser::ARRAY_NEW_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_GET() {
  return getToken(WatParser::ARRAY_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_SET() {
  return getToken(WatParser::ARRAY_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_LEN() {
  return getToken(WatParser::ARRAY_LEN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_COPY() {
  return getToken(WatParser::ARRAY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_FILL() {
  return getToken(WatParser::ARRAY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_DATA() {
  return getToken(WatParser::ARRAY_INIT_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_ELEM() {
  return getToken(WatParser::ARRAY_INIT_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::EXTERN_CONVERT() {
  return getToken(WatParser::EXTERN_CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TEST() {
  return getToken(WatParser::TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::COMPARE() {
  return getToken(WatParser::COMPARE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::UNARY() {
  return getToken(WatParser::UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BINARY() {
  return getToken(WatParser::BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONVERT() {
  return getToken(WatParser::CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_UNARY() {
  return getToken(WatParser::VEC_UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BINARY() {
  return getToken(WatParser::VEC_BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TERNARY() {
  return getToken(WatParser::VEC_TERNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TEST() {
  return getToken(WatParser::VEC_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHIFT() {
  return getToken(WatParser::VEC_SHIFT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BITMASK() {
  return getToken(WatParser::VEC_BITMASK, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHUFFLE() {
  return getToken(WatParser::VEC_SHUFFLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SPLAT() {
  return getToken(WatParser::VEC_SPLAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_EXTRACT() {
  return getToken(WatParser::VEC_EXTRACT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_REPLACE() {
  return getToken(WatParser::VEC_REPLACE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_WAIT() {
  return getToken(WatParser::MEMORY_ATOMIC_WAIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_NOTIFY() {
  return getToken(WatParser::MEMORY_ATOMIC_NOTIFY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_FENCE() {
  return getToken(WatParser::ATOMIC_FENCE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_LOAD() {
  return getToken(WatParser::ATOMIC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_STORE() {
  return getToken(WatParser::ATOMIC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW() {
  return getToken(WatParser::ATOMIC_RMW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW_CMPXCHG() {
  return getToken(WatParser::ATOMIC_RMW_CMPXCHG, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::THROW() {
  return getToken(WatParser::THROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::THROW_REF() {
  return getToken(WatParser::THROW_REF, 0);
}


size_t WatParser::Plain_instrContext::getRuleIndex() const {
  return WatParser::RulePlain_instr;
}

void WatParser::Plain_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlain_instr(this);
}

void WatParser::Plain_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlain_instr(this);
}


std::any WatParser::Plain_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitPlain_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Plain_instrContext* WatParser::plain_instr() {
  Plain_instrContext *_localctx = _tracker.createInstance<Plain_instrContext>(_ctx, getState());
  enterRule(_localctx, 46, WatParser::RulePlain_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(630);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::UNREACHABLE: {
        enterOuterAlt(_localctx, 1);
        setState(369);
        match(WatParser::UNREACHABLE);
        break;
      }

      case WatParser::NOP: {
        enterOuterAlt(_localctx, 2);
        setState(370);
        match(WatParser::NOP);
        break;
      }

      case WatParser::DROP: {
        enterOuterAlt(_localctx, 3);
        setState(371);
        match(WatParser::DROP);
        break;
      }

      case WatParser::SELECT: {
        enterOuterAlt(_localctx, 4);
        setState(372);
        match(WatParser::SELECT);
        break;
      }

      case WatParser::BR: {
        enterOuterAlt(_localctx, 5);
        setState(373);
        match(WatParser::BR);
        setState(374);
        var_();
        break;
      }

      case WatParser::BR_IF: {
        enterOuterAlt(_localctx, 6);
        setState(375);
        match(WatParser::BR_IF);
        setState(376);
        var_();
        break;
      }

      case WatParser::BR_TABLE: {
        enterOuterAlt(_localctx, 7);
        setState(377);
        match(WatParser::BR_TABLE);
        setState(379); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(378);
          var_();
          setState(381); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == WatParser::NAT || _la == WatParser::VAR);
        break;
      }

      case WatParser::BR_ON_NULL: {
        enterOuterAlt(_localctx, 8);
        setState(383);
        match(WatParser::BR_ON_NULL);
        setState(384);
        var_();
        break;
      }

      case WatParser::BR_ON_CAST: {
        enterOuterAlt(_localctx, 9);
        setState(385);
        match(WatParser::BR_ON_CAST);
        setState(386);
        var_();
        setState(387);
        ref_type();
        setState(388);
        ref_type();
        break;
      }

      case WatParser::RETURN: {
        enterOuterAlt(_localctx, 10);
        setState(390);
        match(WatParser::RETURN);
        break;
      }

      case WatParser::CALL: {
        enterOuterAlt(_localctx, 11);
        setState(391);
        match(WatParser::CALL);
        setState(392);
        var_();
        break;
      }

      case WatParser::CALL_REF: {
        enterOuterAlt(_localctx, 12);
        setState(393);
        match(WatParser::CALL_REF);
        setState(394);
        var_();
        break;
      }

      case WatParser::RETURN_CALL: {
        enterOuterAlt(_localctx, 13);
        setState(395);
        match(WatParser::RETURN_CALL);
        setState(396);
        var_();
        break;
      }

      case WatParser::RETURN_CALL_REF: {
        enterOuterAlt(_localctx, 14);
        setState(397);
        match(WatParser::RETURN_CALL_REF);
        setState(398);
        var_();
        break;
      }

      case WatParser::LOCAL_GET: {
        enterOuterAlt(_localctx, 15);
        setState(399);
        match(WatParser::LOCAL_GET);
        setState(400);
        var_();
        break;
      }

      case WatParser::LOCAL_SET: {
        enterOuterAlt(_localctx, 16);
        setState(401);
        match(WatParser::LOCAL_SET);
        setState(402);
        var_();
        break;
      }

      case WatParser::LOCAL_TEE: {
        enterOuterAlt(_localctx, 17);
        setState(403);
        match(WatParser::LOCAL_TEE);
        setState(404);
        var_();
        break;
      }

      case WatParser::GLOBAL_GET: {
        enterOuterAlt(_localctx, 18);
        setState(405);
        match(WatParser::GLOBAL_GET);
        setState(406);
        var_();
        break;
      }

      case WatParser::GLOBAL_SET: {
        enterOuterAlt(_localctx, 19);
        setState(407);
        match(WatParser::GLOBAL_SET);
        setState(408);
        var_();
        break;
      }

      case WatParser::TABLE_GET: {
        enterOuterAlt(_localctx, 20);
        setState(409);
        match(WatParser::TABLE_GET);
        setState(411);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(410);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SET: {
        enterOuterAlt(_localctx, 21);
        setState(413);
        match(WatParser::TABLE_SET);
        setState(415);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(414);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SIZE: {
        enterOuterAlt(_localctx, 22);
        setState(417);
        match(WatParser::TABLE_SIZE);
        setState(419);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(418);
          var_();
        }
        break;
      }

      case WatParser::TABLE_GROW: {
        enterOuterAlt(_localctx, 23);
        setState(421);
        match(WatParser::TABLE_GROW);
        setState(423);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(422);
          var_();
        }
        break;
      }

      case WatParser::TABLE_FILL: {
        enterOuterAlt(_localctx, 24);
        setState(425);
        match(WatParser::TABLE_FILL);
        setState(427);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(426);
          var_();
        }
        break;
      }

      case WatParser::TABLE_COPY: {
        enterOuterAlt(_localctx, 25);
        setState(429);
        match(WatParser::TABLE_COPY);
        setState(433);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(430);
          var_();
          setState(431);
          var_();
        }
        break;
      }

      case WatParser::TABLE_INIT: {
        enterOuterAlt(_localctx, 26);
        setState(435);
        match(WatParser::TABLE_INIT);
        setState(436);
        var_();
        setState(438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(437);
          var_();
        }
        break;
      }

      case WatParser::ELEM_DROP: {
        enterOuterAlt(_localctx, 27);
        setState(440);
        match(WatParser::ELEM_DROP);
        setState(441);
        var_();
        break;
      }

      case WatParser::LOAD: {
        enterOuterAlt(_localctx, 28);
        setState(442);
        match(WatParser::LOAD);
        setState(444);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(443);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(447);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(446);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::STORE: {
        enterOuterAlt(_localctx, 29);
        setState(449);
        match(WatParser::STORE);
        setState(451);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(450);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(454);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(453);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD: {
        enterOuterAlt(_localctx, 30);
        setState(456);
        match(WatParser::VEC_LOAD);
        setState(458);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(457);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(461);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(460);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_STORE: {
        enterOuterAlt(_localctx, 31);
        setState(463);
        match(WatParser::VEC_STORE);
        setState(465);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(464);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(468);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(467);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD_LANE: {
        enterOuterAlt(_localctx, 32);
        setState(470);
        match(WatParser::VEC_LOAD_LANE);
        setState(472);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(471);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(475);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(474);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(477);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_STORE_LANE: {
        enterOuterAlt(_localctx, 33);
        setState(478);
        match(WatParser::VEC_STORE_LANE);
        setState(480);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(479);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(482);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(485);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_SIZE: {
        enterOuterAlt(_localctx, 34);
        setState(486);
        match(WatParser::MEMORY_SIZE);
        break;
      }

      case WatParser::MEMORY_GROW: {
        enterOuterAlt(_localctx, 35);
        setState(487);
        match(WatParser::MEMORY_GROW);
        break;
      }

      case WatParser::CONST: {
        enterOuterAlt(_localctx, 36);
        setState(488);
        match(WatParser::CONST);
        setState(489);
        num();
        break;
      }

      case WatParser::MEMORY_FILL: {
        enterOuterAlt(_localctx, 37);
        setState(490);
        match(WatParser::MEMORY_FILL);
        break;
      }

      case WatParser::MEMORY_COPY: {
        enterOuterAlt(_localctx, 38);
        setState(491);
        match(WatParser::MEMORY_COPY);
        break;
      }

      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 39);
        setState(492);
        match(WatParser::MEMORY_INIT);
        setState(493);
        var_();
        break;
      }

      case WatParser::DATA_DROP: {
        enterOuterAlt(_localctx, 40);
        setState(494);
        match(WatParser::DATA_DROP);
        setState(495);
        var_();
        break;
      }

      case WatParser::REF_NULL: {
        enterOuterAlt(_localctx, 41);
        setState(496);
        match(WatParser::REF_NULL);
        setState(497);
        heap_type();
        break;
      }

      case WatParser::REF_IS_NULL: {
        enterOuterAlt(_localctx, 42);
        setState(498);
        match(WatParser::REF_IS_NULL);
        break;
      }

      case WatParser::REF_FUNC: {
        enterOuterAlt(_localctx, 43);
        setState(499);
        match(WatParser::REF_FUNC);
        setState(500);
        var_();
        break;
      }

      case WatParser::REF_AS_NON_NULL: {
        enterOuterAlt(_localctx, 44);
        setState(501);
        match(WatParser::REF_AS_NON_NULL);
        break;
      }

      case WatParser::REF_TEST: {
        enterOuterAlt(_localctx, 45);
        setState(502);
        match(WatParser::REF_TEST);
        setState(503);
        ref_type();
        break;
      }

      case WatParser::REF_CAST: {
        enterOuterAlt(_localctx, 46);
        setState(504);
        match(WatParser::REF_CAST);
        setState(505);
        ref_type();
        break;
      }

      case WatParser::REF_EQ: {
        enterOuterAlt(_localctx, 47);
        setState(506);
        match(WatParser::REF_EQ);
        break;
      }

      case WatParser::REF_I31: {
        enterOuterAlt(_localctx, 48);
        setState(507);
        match(WatParser::REF_I31);
        break;
      }

      case WatParser::I31_GET: {
        enterOuterAlt(_localctx, 49);
        setState(508);
        match(WatParser::I31_GET);
        break;
      }

      case WatParser::STRUCT_NEW: {
        enterOuterAlt(_localctx, 50);
        setState(509);
        match(WatParser::STRUCT_NEW);
        setState(510);
        var_();
        break;
      }

      case WatParser::STRUCT_GET: {
        enterOuterAlt(_localctx, 51);
        setState(511);
        match(WatParser::STRUCT_GET);
        setState(512);
        var_();
        setState(513);
        var_();
        break;
      }

      case WatParser::STRUCT_SET: {
        enterOuterAlt(_localctx, 52);
        setState(515);
        match(WatParser::STRUCT_SET);
        setState(516);
        var_();
        setState(517);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW: {
        enterOuterAlt(_localctx, 53);
        setState(519);
        match(WatParser::ARRAY_NEW);
        setState(520);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_FIXED: {
        enterOuterAlt(_localctx, 54);
        setState(521);
        match(WatParser::ARRAY_NEW_FIXED);
        setState(522);
        var_();
        setState(523);
        nat32();
        break;
      }

      case WatParser::ARRAY_NEW_ELEM: {
        enterOuterAlt(_localctx, 55);
        setState(525);
        match(WatParser::ARRAY_NEW_ELEM);
        setState(526);
        var_();
        setState(527);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_DATA: {
        enterOuterAlt(_localctx, 56);
        setState(529);
        match(WatParser::ARRAY_NEW_DATA);
        setState(530);
        var_();
        setState(531);
        var_();
        break;
      }

      case WatParser::ARRAY_GET: {
        enterOuterAlt(_localctx, 57);
        setState(533);
        match(WatParser::ARRAY_GET);
        setState(534);
        var_();
        break;
      }

      case WatParser::ARRAY_SET: {
        enterOuterAlt(_localctx, 58);
        setState(535);
        match(WatParser::ARRAY_SET);
        setState(536);
        var_();
        break;
      }

      case WatParser::ARRAY_LEN: {
        enterOuterAlt(_localctx, 59);
        setState(537);
        match(WatParser::ARRAY_LEN);
        break;
      }

      case WatParser::ARRAY_COPY: {
        enterOuterAlt(_localctx, 60);
        setState(538);
        match(WatParser::ARRAY_COPY);
        setState(539);
        var_();
        setState(540);
        var_();
        break;
      }

      case WatParser::ARRAY_FILL: {
        enterOuterAlt(_localctx, 61);
        setState(542);
        match(WatParser::ARRAY_FILL);
        setState(543);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_DATA: {
        enterOuterAlt(_localctx, 62);
        setState(544);
        match(WatParser::ARRAY_INIT_DATA);
        setState(545);
        var_();
        setState(546);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_ELEM: {
        enterOuterAlt(_localctx, 63);
        setState(548);
        match(WatParser::ARRAY_INIT_ELEM);
        setState(549);
        var_();
        setState(550);
        var_();
        break;
      }

      case WatParser::EXTERN_CONVERT: {
        enterOuterAlt(_localctx, 64);
        setState(552);
        match(WatParser::EXTERN_CONVERT);
        break;
      }

      case WatParser::TEST: {
        enterOuterAlt(_localctx, 65);
        setState(553);
        match(WatParser::TEST);
        break;
      }

      case WatParser::COMPARE: {
        enterOuterAlt(_localctx, 66);
        setState(554);
        match(WatParser::COMPARE);
        break;
      }

      case WatParser::UNARY: {
        enterOuterAlt(_localctx, 67);
        setState(555);
        match(WatParser::UNARY);
        break;
      }

      case WatParser::BINARY: {
        enterOuterAlt(_localctx, 68);
        setState(556);
        match(WatParser::BINARY);
        break;
      }

      case WatParser::CONVERT: {
        enterOuterAlt(_localctx, 69);
        setState(557);
        match(WatParser::CONVERT);
        break;
      }

      case WatParser::VEC_CONST: {
        enterOuterAlt(_localctx, 70);
        setState(558);
        match(WatParser::VEC_CONST);
        setState(559);
        match(WatParser::VEC_SHAPE);
        setState(563);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(560);
          num();
          setState(565);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_UNARY: {
        enterOuterAlt(_localctx, 71);
        setState(566);
        match(WatParser::VEC_UNARY);
        break;
      }

      case WatParser::VEC_BINARY: {
        enterOuterAlt(_localctx, 72);
        setState(567);
        match(WatParser::VEC_BINARY);
        break;
      }

      case WatParser::VEC_TERNARY: {
        enterOuterAlt(_localctx, 73);
        setState(568);
        match(WatParser::VEC_TERNARY);
        break;
      }

      case WatParser::VEC_TEST: {
        enterOuterAlt(_localctx, 74);
        setState(569);
        match(WatParser::VEC_TEST);
        break;
      }

      case WatParser::VEC_SHIFT: {
        enterOuterAlt(_localctx, 75);
        setState(570);
        match(WatParser::VEC_SHIFT);
        break;
      }

      case WatParser::VEC_BITMASK: {
        enterOuterAlt(_localctx, 76);
        setState(571);
        match(WatParser::VEC_BITMASK);
        break;
      }

      case WatParser::VEC_SHUFFLE: {
        enterOuterAlt(_localctx, 77);
        setState(572);
        match(WatParser::VEC_SHUFFLE);
        setState(576);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(573);
          num();
          setState(578);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_SPLAT: {
        enterOuterAlt(_localctx, 78);
        setState(579);
        match(WatParser::VEC_SPLAT);
        break;
      }

      case WatParser::VEC_EXTRACT: {
        enterOuterAlt(_localctx, 79);
        setState(580);
        match(WatParser::VEC_EXTRACT);
        setState(581);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_REPLACE: {
        enterOuterAlt(_localctx, 80);
        setState(582);
        match(WatParser::VEC_REPLACE);
        setState(583);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_ATOMIC_WAIT: {
        enterOuterAlt(_localctx, 81);
        setState(584);
        match(WatParser::MEMORY_ATOMIC_WAIT);
        setState(586);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(585);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(589);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(588);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::MEMORY_ATOMIC_NOTIFY: {
        enterOuterAlt(_localctx, 82);
        setState(591);
        match(WatParser::MEMORY_ATOMIC_NOTIFY);
        setState(593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(592);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(596);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(595);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_FENCE: {
        enterOuterAlt(_localctx, 83);
        setState(598);
        match(WatParser::ATOMIC_FENCE);
        break;
      }

      case WatParser::ATOMIC_LOAD: {
        enterOuterAlt(_localctx, 84);
        setState(599);
        match(WatParser::ATOMIC_LOAD);
        setState(601);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(600);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(604);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(603);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_STORE: {
        enterOuterAlt(_localctx, 85);
        setState(606);
        match(WatParser::ATOMIC_STORE);
        setState(608);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(607);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(611);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(610);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW: {
        enterOuterAlt(_localctx, 86);
        setState(613);
        match(WatParser::ATOMIC_RMW);
        setState(615);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(614);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(618);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(617);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW_CMPXCHG: {
        enterOuterAlt(_localctx, 87);
        setState(620);
        match(WatParser::ATOMIC_RMW_CMPXCHG);
        setState(622);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(621);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(625);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(624);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::THROW: {
        enterOuterAlt(_localctx, 88);
        setState(627);
        match(WatParser::THROW);
        setState(628);
        var_();
        break;
      }

      case WatParser::THROW_REF: {
        enterOuterAlt(_localctx, 89);
        setState(629);
        match(WatParser::THROW_REF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_instr_instr_listContext ------------------------------------------------------------------

WatParser::Select_instr_instr_listContext::Select_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Instr_listContext* WatParser::Select_instr_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_instr_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_instr_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleSelect_instr_instr_list;
}

void WatParser::Select_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_instr_instr_list(this);
}

void WatParser::Select_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_instr_instr_list(this);
}


std::any WatParser::Select_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_instr_instr_listContext* WatParser::select_instr_instr_list() {
  Select_instr_instr_listContext *_localctx = _tracker.createInstance<Select_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 48, WatParser::RuleSelect_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(632);
    match(WatParser::SELECT);
    setState(644);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(633);
        match(WatParser::LPAR);
        setState(634);
        match(WatParser::RESULT);
        setState(638);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(635);
          val_type();
          setState(640);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(641);
        match(WatParser::RPAR); 
      }
      setState(646);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 61, _ctx);
    }
    setState(647);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_instr_listContext::Call_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_instr_type_instr_listContext* WatParser::Call_instr_instr_listContext::call_instr_type_instr_list() {
  return getRuleContext<WatParser::Call_instr_type_instr_listContext>(0);
}

WatParser::Var_Context* WatParser::Call_instr_instr_listContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}


size_t WatParser::Call_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_instr_list;
}

void WatParser::Call_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_instr_list(this);
}

void WatParser::Call_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_instr_list(this);
}


std::any WatParser::Call_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_instr_listContext* WatParser::call_instr_instr_list() {
  Call_instr_instr_listContext *_localctx = _tracker.createInstance<Call_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 50, WatParser::RuleCall_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(659);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CALL_INDIRECT: {
        enterOuterAlt(_localctx, 1);
        setState(649);
        match(WatParser::CALL_INDIRECT);
        setState(651);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(650);
          var_();
        }
        setState(653);
        call_instr_type_instr_list();
        break;
      }

      case WatParser::RETURN_CALL_INDIRECT: {
        enterOuterAlt(_localctx, 2);
        setState(654);
        match(WatParser::RETURN_CALL_INDIRECT);
        setState(656);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(655);
          var_();
        }
        setState(658);
        call_instr_type_instr_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_type_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_type_instr_listContext::Call_instr_type_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Call_instr_type_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Type_useContext* WatParser::Call_instr_type_instr_listContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_instr_type_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_instr_type_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_instr_type_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_type_instr_list;
}

void WatParser::Call_instr_type_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_type_instr_list(this);
}

void WatParser::Call_instr_type_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_type_instr_list(this);
}


std::any WatParser::Call_instr_type_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_type_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_type_instr_listContext* WatParser::call_instr_type_instr_list() {
  Call_instr_type_instr_listContext *_localctx = _tracker.createInstance<Call_instr_type_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 52, WatParser::RuleCall_instr_type_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(662);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 65, _ctx)) {
    case 1: {
      setState(661);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(675);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(664);
        match(WatParser::LPAR);
        setState(665);
        match(WatParser::PARAM);
        setState(669);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(666);
          val_type();
          setState(671);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(672);
        match(WatParser::RPAR); 
      }
      setState(677);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 67, _ctx);
    }
    setState(689);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(678);
        match(WatParser::LPAR);
        setState(679);
        match(WatParser::RESULT);
        setState(683);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(680);
          val_type();
          setState(685);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(686);
        match(WatParser::RPAR); 
      }
      setState(691);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 69, _ctx);
    }
    setState(692);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_instrContext ------------------------------------------------------------------

WatParser::Block_instrContext::Block_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::BlockContext* WatParser::Block_instrContext::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

tree::TerminalNode* WatParser::Block_instrContext::END() {
  return getToken(WatParser::END, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

std::vector<WatParser::Bind_varContext *> WatParser::Block_instrContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Block_instrContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

tree::TerminalNode* WatParser::Block_instrContext::IF() {
  return getToken(WatParser::IF, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

WatParser::Instr_listContext* WatParser::Block_instrContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

tree::TerminalNode* WatParser::Block_instrContext::TRY_TABLE() {
  return getToken(WatParser::TRY_TABLE, 0);
}

WatParser::Handler_blockContext* WatParser::Block_instrContext::handler_block() {
  return getRuleContext<WatParser::Handler_blockContext>(0);
}


size_t WatParser::Block_instrContext::getRuleIndex() const {
  return WatParser::RuleBlock_instr;
}

void WatParser::Block_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_instr(this);
}

void WatParser::Block_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_instr(this);
}


std::any WatParser::Block_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_instrContext* WatParser::block_instr() {
  Block_instrContext *_localctx = _tracker.createInstance<Block_instrContext>(_ctx, getState());
  enterRule(_localctx, 54, WatParser::RuleBlock_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(728);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::BLOCK:
      case WatParser::LOOP: {
        enterOuterAlt(_localctx, 1);
        setState(694);
        _la = _input->LA(1);
        if (!(_la == WatParser::BLOCK

        || _la == WatParser::LOOP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(696);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(695);
          bind_var();
        }
        setState(698);
        block();
        setState(699);
        match(WatParser::END);
        setState(701);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(700);
          bind_var();
        }
        break;
      }

      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(703);
        match(WatParser::IF);
        setState(705);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(704);
          bind_var();
        }
        setState(707);
        block();
        setState(713);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ELSE) {
          setState(708);
          match(WatParser::ELSE);
          setState(710);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::VAR) {
            setState(709);
            bind_var();
          }
          setState(712);
          instr_list();
        }
        setState(715);
        match(WatParser::END);
        setState(717);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(716);
          bind_var();
        }
        break;
      }

      case WatParser::TRY_TABLE: {
        enterOuterAlt(_localctx, 3);
        setState(719);
        match(WatParser::TRY_TABLE);
        setState(721);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(720);
          bind_var();
        }
        setState(723);
        handler_block();
        setState(724);
        match(WatParser::END);
        setState(726);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(725);
          bind_var();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

WatParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Block_param_bodyContext* WatParser::BlockContext::block_param_body() {
  return getRuleContext<WatParser::Block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::BlockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::BlockContext::getRuleIndex() const {
  return WatParser::RuleBlock;
}

void WatParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void WatParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


std::any WatParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlockContext* WatParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 56, WatParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(731);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 79, _ctx)) {
    case 1: {
      setState(730);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(733);
    block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_param_bodyContext ------------------------------------------------------------------

WatParser::Block_param_bodyContext::Block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Block_param_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleBlock_param_body;
}

void WatParser::Block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_param_body(this);
}

void WatParser::Block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_param_body(this);
}


std::any WatParser::Block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_param_bodyContext* WatParser::block_param_body() {
  Block_param_bodyContext *_localctx = _tracker.createInstance<Block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 58, WatParser::RuleBlock_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(746);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(735);
        match(WatParser::LPAR);
        setState(736);
        match(WatParser::PARAM);
        setState(740);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(737);
          val_type();
          setState(742);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(743);
        match(WatParser::RPAR); 
      }
      setState(748);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 81, _ctx);
    }
    setState(760);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(749);
        match(WatParser::LPAR);
        setState(750);
        match(WatParser::RESULT);
        setState(754);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(751);
          val_type();
          setState(756);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(757);
        match(WatParser::RPAR); 
      }
      setState(762);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 83, _ctx);
    }
    setState(763);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_blockContext ------------------------------------------------------------------

WatParser::Handler_blockContext::Handler_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Handler_block_param_bodyContext* WatParser::Handler_blockContext::handler_block_param_body() {
  return getRuleContext<WatParser::Handler_block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Handler_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Handler_blockContext::getRuleIndex() const {
  return WatParser::RuleHandler_block;
}

void WatParser::Handler_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block(this);
}

void WatParser::Handler_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block(this);
}


std::any WatParser::Handler_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_blockContext* WatParser::handler_block() {
  Handler_blockContext *_localctx = _tracker.createInstance<Handler_blockContext>(_ctx, getState());
  enterRule(_localctx, 60, WatParser::RuleHandler_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(766);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx)) {
    case 1: {
      setState(765);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(768);
    handler_block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_block_param_bodyContext ------------------------------------------------------------------

WatParser::Handler_block_param_bodyContext::Handler_block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Handler_block_bodyContext* WatParser::Handler_block_param_bodyContext::handler_block_body() {
  return getRuleContext<WatParser::Handler_block_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Handler_block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Handler_block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Handler_block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleHandler_block_param_body;
}

void WatParser::Handler_block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block_param_body(this);
}

void WatParser::Handler_block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block_param_body(this);
}


std::any WatParser::Handler_block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_block_param_bodyContext* WatParser::handler_block_param_body() {
  Handler_block_param_bodyContext *_localctx = _tracker.createInstance<Handler_block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 62, WatParser::RuleHandler_block_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(781);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(770);
        match(WatParser::LPAR);
        setState(771);
        match(WatParser::PARAM);
        setState(775);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(772);
          val_type();
          setState(777);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(778);
        match(WatParser::RPAR); 
      }
      setState(783);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 86, _ctx);
    }
    setState(795);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(784);
        match(WatParser::LPAR);
        setState(785);
        match(WatParser::RESULT);
        setState(789);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(786);
          val_type();
          setState(791);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(792);
        match(WatParser::RPAR); 
      }
      setState(797);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 88, _ctx);
    }
    setState(798);
    handler_block_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_block_bodyContext ------------------------------------------------------------------

WatParser::Handler_block_bodyContext::Handler_block_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Handler_block_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<WatParser::Var_Context *> WatParser::Handler_block_bodyContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Handler_block_bodyContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH() {
  return getTokens(WatParser::CATCH);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH(size_t i) {
  return getToken(WatParser::CATCH, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_REF() {
  return getTokens(WatParser::CATCH_REF);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_REF(size_t i) {
  return getToken(WatParser::CATCH_REF, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_ALL() {
  return getTokens(WatParser::CATCH_ALL);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_ALL(size_t i) {
  return getToken(WatParser::CATCH_ALL, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_ALL_REF() {
  return getTokens(WatParser::CATCH_ALL_REF);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_ALL_REF(size_t i) {
  return getToken(WatParser::CATCH_ALL_REF, i);
}


size_t WatParser::Handler_block_bodyContext::getRuleIndex() const {
  return WatParser::RuleHandler_block_body;
}

void WatParser::Handler_block_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block_body(this);
}

void WatParser::Handler_block_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block_body(this);
}


std::any WatParser::Handler_block_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_block_bodyContext* WatParser::handler_block_body() {
  Handler_block_bodyContext *_localctx = _tracker.createInstance<Handler_block_bodyContext>(_ctx, getState());
  enterRule(_localctx, 64, WatParser::RuleHandler_block_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(814);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(800);
        match(WatParser::LPAR);
        setState(807);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::CATCH: {
            setState(801);
            match(WatParser::CATCH);
            setState(802);
            var_();
            break;
          }

          case WatParser::CATCH_REF: {
            setState(803);
            match(WatParser::CATCH_REF);
            setState(804);
            var_();
            break;
          }

          case WatParser::CATCH_ALL: {
            setState(805);
            match(WatParser::CATCH_ALL);
            break;
          }

          case WatParser::CATCH_ALL_REF: {
            setState(806);
            match(WatParser::CATCH_ALL_REF);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(809);
        var_();
        setState(810);
        match(WatParser::RPAR); 
      }
      setState(816);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 90, _ctx);
    }
    setState(817);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WatParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ExprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Plain_instrContext* WatParser::ExprContext::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

tree::TerminalNode* WatParser::ExprContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Select_expr_resultsContext* WatParser::ExprContext::select_expr_results() {
  return getRuleContext<WatParser::Select_expr_resultsContext>(0);
}

tree::TerminalNode* WatParser::ExprContext::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_expr_typeContext* WatParser::ExprContext::call_expr_type() {
  return getRuleContext<WatParser::Call_expr_typeContext>(0);
}

tree::TerminalNode* WatParser::ExprContext::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}

tree::TerminalNode* WatParser::ExprContext::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

WatParser::BlockContext* WatParser::ExprContext::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

tree::TerminalNode* WatParser::ExprContext::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

tree::TerminalNode* WatParser::ExprContext::IF() {
  return getToken(WatParser::IF, 0);
}

WatParser::If_blockContext* WatParser::ExprContext::if_block() {
  return getRuleContext<WatParser::If_blockContext>(0);
}

tree::TerminalNode* WatParser::ExprContext::TRY_TABLE() {
  return getToken(WatParser::TRY_TABLE, 0);
}

WatParser::Try_blockContext* WatParser::ExprContext::try_block() {
  return getRuleContext<WatParser::Try_blockContext>(0);
}

std::vector<WatParser::ExprContext *> WatParser::ExprContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::ExprContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

WatParser::Var_Context* WatParser::ExprContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

WatParser::Bind_varContext* WatParser::ExprContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::ExprContext::getRuleIndex() const {
  return WatParser::RuleExpr;
}

void WatParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void WatParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


std::any WatParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExprContext* WatParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 66, WatParser::RuleExpr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(819);
    match(WatParser::LPAR);
    setState(859);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 98, _ctx)) {
    case 1: {
      setState(820);
      plain_instr();
      setState(824);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(821);
        expr();
        setState(826);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      setState(827);
      match(WatParser::SELECT);
      setState(828);
      select_expr_results();
      break;
    }

    case 3: {
      setState(829);
      match(WatParser::CALL_INDIRECT);
      setState(831);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(830);
        var_();
      }
      setState(833);
      call_expr_type();
      break;
    }

    case 4: {
      setState(834);
      match(WatParser::RETURN_CALL_INDIRECT);
      setState(836);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(835);
        var_();
      }
      setState(838);
      call_expr_type();
      break;
    }

    case 5: {
      setState(839);
      match(WatParser::BLOCK);
      setState(841);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(840);
        bind_var();
      }
      setState(843);
      block();
      break;
    }

    case 6: {
      setState(844);
      match(WatParser::LOOP);
      setState(846);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(845);
        bind_var();
      }
      setState(848);
      block();
      break;
    }

    case 7: {
      setState(849);
      match(WatParser::IF);
      setState(851);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(850);
        bind_var();
      }
      setState(853);
      if_block();
      break;
    }

    case 8: {
      setState(854);
      match(WatParser::TRY_TABLE);
      setState(856);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(855);
        bind_var();
      }
      setState(858);
      try_block();
      break;
    }

    default:
      break;
    }
    setState(861);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expr_resultsContext ------------------------------------------------------------------

WatParser::Select_expr_resultsContext::Select_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Select_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Select_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleSelect_expr_results;
}

void WatParser::Select_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expr_results(this);
}

void WatParser::Select_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expr_results(this);
}


std::any WatParser::Select_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_expr_resultsContext* WatParser::select_expr_results() {
  Select_expr_resultsContext *_localctx = _tracker.createInstance<Select_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 68, WatParser::RuleSelect_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(874);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(863);
        match(WatParser::LPAR);
        setState(864);
        match(WatParser::RESULT);
        setState(868);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(865);
          val_type();
          setState(870);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(871);
        match(WatParser::RPAR); 
      }
      setState(876);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 100, _ctx);
    }
    setState(880);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(877);
      expr();
      setState(882);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_typeContext ------------------------------------------------------------------

WatParser::Call_expr_typeContext::Call_expr_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_paramsContext* WatParser::Call_expr_typeContext::call_expr_params() {
  return getRuleContext<WatParser::Call_expr_paramsContext>(0);
}

WatParser::Type_useContext* WatParser::Call_expr_typeContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Call_expr_typeContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_type;
}

void WatParser::Call_expr_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_type(this);
}

void WatParser::Call_expr_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_type(this);
}


std::any WatParser::Call_expr_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_typeContext* WatParser::call_expr_type() {
  Call_expr_typeContext *_localctx = _tracker.createInstance<Call_expr_typeContext>(_ctx, getState());
  enterRule(_localctx, 70, WatParser::RuleCall_expr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(884);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 102, _ctx)) {
    case 1: {
      setState(883);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(886);
    call_expr_params();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_paramsContext ------------------------------------------------------------------

WatParser::Call_expr_paramsContext::Call_expr_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_resultsContext* WatParser::Call_expr_paramsContext::call_expr_results() {
  return getRuleContext<WatParser::Call_expr_resultsContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_paramsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_paramsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_paramsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_params;
}

void WatParser::Call_expr_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_params(this);
}

void WatParser::Call_expr_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_params(this);
}


std::any WatParser::Call_expr_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_params(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_paramsContext* WatParser::call_expr_params() {
  Call_expr_paramsContext *_localctx = _tracker.createInstance<Call_expr_paramsContext>(_ctx, getState());
  enterRule(_localctx, 72, WatParser::RuleCall_expr_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(899);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(888);
        match(WatParser::LPAR);
        setState(889);
        match(WatParser::PARAM);
        setState(893);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(890);
          val_type();
          setState(895);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(896);
        match(WatParser::RPAR); 
      }
      setState(901);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    }
    setState(902);
    call_expr_results();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_resultsContext ------------------------------------------------------------------

WatParser::Call_expr_resultsContext::Call_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Call_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Call_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_results;
}

void WatParser::Call_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_results(this);
}

void WatParser::Call_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_results(this);
}


std::any WatParser::Call_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_resultsContext* WatParser::call_expr_results() {
  Call_expr_resultsContext *_localctx = _tracker.createInstance<Call_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 74, WatParser::RuleCall_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(915);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(904);
        match(WatParser::LPAR);
        setState(905);
        match(WatParser::RESULT);
        setState(909);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(906);
          val_type();
          setState(911);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(912);
        match(WatParser::RPAR); 
      }
      setState(917);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 106, _ctx);
    }
    setState(921);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(918);
      expr();
      setState(923);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_blockContext ------------------------------------------------------------------

WatParser::If_blockContext::If_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::If_block_result_bodyContext* WatParser::If_blockContext::if_block_result_body() {
  return getRuleContext<WatParser::If_block_result_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::If_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_blockContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::If_blockContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_blockContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_blockContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_blockContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_blockContext::getRuleIndex() const {
  return WatParser::RuleIf_block;
}

void WatParser::If_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block(this);
}

void WatParser::If_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block(this);
}


std::any WatParser::If_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_blockContext* WatParser::if_block() {
  If_blockContext *_localctx = _tracker.createInstance<If_blockContext>(_ctx, getState());
  enterRule(_localctx, 76, WatParser::RuleIf_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(925);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
    case 1: {
      setState(924);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(938);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(927);
        match(WatParser::LPAR);
        setState(928);
        match(WatParser::PARAM);
        setState(932);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(929);
          val_type();
          setState(934);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(935);
        match(WatParser::RPAR); 
      }
      setState(940);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 110, _ctx);
    }
    setState(941);
    if_block_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_block_result_bodyContext ------------------------------------------------------------------

WatParser::If_block_result_bodyContext::If_block_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::THEN() {
  return getToken(WatParser::THEN, 0);
}

std::vector<WatParser::Instr_listContext *> WatParser::If_block_result_bodyContext::instr_list() {
  return getRuleContexts<WatParser::Instr_listContext>();
}

WatParser::Instr_listContext* WatParser::If_block_result_bodyContext::instr_list(size_t i) {
  return getRuleContext<WatParser::Instr_listContext>(i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::ExprContext *> WatParser::If_block_result_bodyContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::If_block_result_bodyContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_block_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_block_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_block_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleIf_block_result_body;
}

void WatParser::If_block_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block_result_body(this);
}

void WatParser::If_block_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block_result_body(this);
}


std::any WatParser::If_block_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_block_result_bodyContext* WatParser::if_block_result_body() {
  If_block_result_bodyContext *_localctx = _tracker.createInstance<If_block_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 78, WatParser::RuleIf_block_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(954);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(943);
        match(WatParser::LPAR);
        setState(944);
        match(WatParser::RESULT);
        setState(948);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(945);
          val_type();
          setState(950);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(951);
        match(WatParser::RPAR); 
      }
      setState(956);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
    setState(960);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(957);
        expr(); 
      }
      setState(962);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    }
    setState(963);
    match(WatParser::LPAR);
    setState(964);
    match(WatParser::THEN);
    setState(965);
    instr_list();
    setState(966);
    match(WatParser::RPAR);
    setState(972);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(967);
      match(WatParser::LPAR);
      setState(968);
      match(WatParser::ELSE);
      setState(969);
      instr_list();
      setState(970);
      match(WatParser::RPAR);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_blockContext ------------------------------------------------------------------

WatParser::Try_blockContext::Try_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Try_block_param_bodyContext* WatParser::Try_blockContext::try_block_param_body() {
  return getRuleContext<WatParser::Try_block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Try_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Try_blockContext::getRuleIndex() const {
  return WatParser::RuleTry_block;
}

void WatParser::Try_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block(this);
}

void WatParser::Try_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block(this);
}


std::any WatParser::Try_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_blockContext* WatParser::try_block() {
  Try_blockContext *_localctx = _tracker.createInstance<Try_blockContext>(_ctx, getState());
  enterRule(_localctx, 80, WatParser::RuleTry_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(975);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 115, _ctx)) {
    case 1: {
      setState(974);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(977);
    try_block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_block_param_bodyContext ------------------------------------------------------------------

WatParser::Try_block_param_bodyContext::Try_block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Try_block_handler_bodyContext* WatParser::Try_block_param_bodyContext::try_block_handler_body() {
  return getRuleContext<WatParser::Try_block_handler_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Try_block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Try_block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Try_block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleTry_block_param_body;
}

void WatParser::Try_block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block_param_body(this);
}

void WatParser::Try_block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block_param_body(this);
}


std::any WatParser::Try_block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_block_param_bodyContext* WatParser::try_block_param_body() {
  Try_block_param_bodyContext *_localctx = _tracker.createInstance<Try_block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 82, WatParser::RuleTry_block_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(990);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(979);
        match(WatParser::LPAR);
        setState(980);
        match(WatParser::PARAM);
        setState(984);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(981);
          val_type();
          setState(986);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(987);
        match(WatParser::RPAR); 
      }
      setState(992);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    }
    setState(1004);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(993);
        match(WatParser::LPAR);
        setState(994);
        match(WatParser::RESULT);
        setState(998);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(995);
          val_type();
          setState(1000);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1001);
        match(WatParser::RPAR); 
      }
      setState(1006);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    }
    setState(1007);
    try_block_handler_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_block_handler_bodyContext ------------------------------------------------------------------

WatParser::Try_block_handler_bodyContext::Try_block_handler_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Try_block_handler_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<WatParser::Var_Context *> WatParser::Try_block_handler_bodyContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Try_block_handler_bodyContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH() {
  return getTokens(WatParser::CATCH);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH(size_t i) {
  return getToken(WatParser::CATCH, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_REF() {
  return getTokens(WatParser::CATCH_REF);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_REF(size_t i) {
  return getToken(WatParser::CATCH_REF, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_ALL() {
  return getTokens(WatParser::CATCH_ALL);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_ALL(size_t i) {
  return getToken(WatParser::CATCH_ALL, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_ALL_REF() {
  return getTokens(WatParser::CATCH_ALL_REF);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_ALL_REF(size_t i) {
  return getToken(WatParser::CATCH_ALL_REF, i);
}


size_t WatParser::Try_block_handler_bodyContext::getRuleIndex() const {
  return WatParser::RuleTry_block_handler_body;
}

void WatParser::Try_block_handler_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block_handler_body(this);
}

void WatParser::Try_block_handler_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block_handler_body(this);
}


std::any WatParser::Try_block_handler_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block_handler_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_block_handler_bodyContext* WatParser::try_block_handler_body() {
  Try_block_handler_bodyContext *_localctx = _tracker.createInstance<Try_block_handler_bodyContext>(_ctx, getState());
  enterRule(_localctx, 84, WatParser::RuleTry_block_handler_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1023);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1009);
        match(WatParser::LPAR);
        setState(1016);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::CATCH: {
            setState(1010);
            match(WatParser::CATCH);
            setState(1011);
            var_();
            break;
          }

          case WatParser::CATCH_REF: {
            setState(1012);
            match(WatParser::CATCH_REF);
            setState(1013);
            var_();
            break;
          }

          case WatParser::CATCH_ALL: {
            setState(1014);
            match(WatParser::CATCH_ALL);
            break;
          }

          case WatParser::CATCH_ALL_REF: {
            setState(1015);
            match(WatParser::CATCH_ALL_REF);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1018);
        var_();
        setState(1019);
        match(WatParser::RPAR); 
      }
      setState(1025);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 121, _ctx);
    }
    setState(1026);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Const_exprContext ------------------------------------------------------------------

WatParser::Const_exprContext::Const_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Const_exprContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}


size_t WatParser::Const_exprContext::getRuleIndex() const {
  return WatParser::RuleConst_expr;
}

void WatParser::Const_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConst_expr(this);
}

void WatParser::Const_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConst_expr(this);
}


std::any WatParser::Const_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitConst_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Const_exprContext* WatParser::const_expr() {
  Const_exprContext *_localctx = _tracker.createInstance<Const_exprContext>(_ctx, getState());
  enterRule(_localctx, 86, WatParser::RuleConst_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1028);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_Context ------------------------------------------------------------------

WatParser::Func_Context::Func_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Func_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Func_Context::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_fieldsContext* WatParser::Func_Context::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Func_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Func_Context::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Func_Context::getRuleIndex() const {
  return WatParser::RuleFunc_;
}

void WatParser::Func_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_(this);
}

void WatParser::Func_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_(this);
}


std::any WatParser::Func_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_Context* WatParser::func_() {
  Func_Context *_localctx = _tracker.createInstance<Func_Context>(_ctx, getState());
  enterRule(_localctx, 88, WatParser::RuleFunc_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1030);
    match(WatParser::LPAR);
    setState(1031);
    match(WatParser::FUNC);
    setState(1033);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1032);
      bind_var();
    }
    setState(1035);
    func_fields();
    setState(1036);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fieldsContext ------------------------------------------------------------------

WatParser::Func_fieldsContext::Func_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_bodyContext* WatParser::Func_fieldsContext::func_fields_body() {
  return getRuleContext<WatParser::Func_fields_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Func_fieldsContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Inline_importContext* WatParser::Func_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Func_fields_importContext* WatParser::Func_fieldsContext::func_fields_import() {
  return getRuleContext<WatParser::Func_fields_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Func_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Func_fieldsContext* WatParser::Func_fieldsContext::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}


size_t WatParser::Func_fieldsContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields;
}

void WatParser::Func_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields(this);
}

void WatParser::Func_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields(this);
}


std::any WatParser::Func_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fieldsContext* WatParser::func_fields() {
  Func_fieldsContext *_localctx = _tracker.createInstance<Func_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 90, WatParser::RuleFunc_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1051);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1039);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
      case 1: {
        setState(1038);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1041);
      func_fields_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1042);
      inline_import();
      setState(1044);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(1043);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1046);
      func_fields_import();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1048);
      inline_export();
      setState(1049);
      func_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_importContext ------------------------------------------------------------------

WatParser::Func_fields_importContext::Func_fields_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_import_resultContext* WatParser::Func_fields_importContext::func_fields_import_result() {
  return getRuleContext<WatParser::Func_fields_import_resultContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_importContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_importContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_importContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_importContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_importContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_importContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import;
}

void WatParser::Func_fields_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import(this);
}

void WatParser::Func_fields_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import(this);
}


std::any WatParser::Func_fields_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_importContext* WatParser::func_fields_import() {
  Func_fields_importContext *_localctx = _tracker.createInstance<Func_fields_importContext>(_ctx, getState());
  enterRule(_localctx, 92, WatParser::RuleFunc_fields_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1070);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1068);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 127, _ctx)) {
        case 1: {
          setState(1053);
          match(WatParser::LPAR);
          setState(1054);
          match(WatParser::PARAM);
          setState(1058);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643522) != 0)) {
            setState(1055);
            val_type();
            setState(1060);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1061);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(1062);
          match(WatParser::LPAR);
          setState(1063);
          match(WatParser::PARAM);
          setState(1064);
          bind_var();
          setState(1065);
          val_type();
          setState(1066);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(1072);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx);
    }
    setState(1073);
    func_fields_import_result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_import_resultContext ------------------------------------------------------------------

WatParser::Func_fields_import_resultContext::Func_fields_import_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_import_resultContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_import_resultContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_import_resultContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import_result;
}

void WatParser::Func_fields_import_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import_result(this);
}

void WatParser::Func_fields_import_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import_result(this);
}


std::any WatParser::Func_fields_import_resultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import_result(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_import_resultContext* WatParser::func_fields_import_result() {
  Func_fields_import_resultContext *_localctx = _tracker.createInstance<Func_fields_import_resultContext>(_ctx, getState());
  enterRule(_localctx, 94, WatParser::RuleFunc_fields_import_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1086);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1075);
      match(WatParser::LPAR);
      setState(1076);
      match(WatParser::RESULT);
      setState(1080);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 37739643522) != 0)) {
        setState(1077);
        val_type();
        setState(1082);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1083);
      match(WatParser::RPAR);
      setState(1088);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_bodyContext ------------------------------------------------------------------

WatParser::Func_fields_bodyContext::Func_fields_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_result_bodyContext* WatParser::Func_fields_bodyContext::func_result_body() {
  return getRuleContext<WatParser::Func_result_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_body;
}

void WatParser::Func_fields_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_body(this);
}

void WatParser::Func_fields_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_body(this);
}


std::any WatParser::Func_fields_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_bodyContext* WatParser::func_fields_body() {
  Func_fields_bodyContext *_localctx = _tracker.createInstance<Func_fields_bodyContext>(_ctx, getState());
  enterRule(_localctx, 96, WatParser::RuleFunc_fields_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1106);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1104);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 132, _ctx)) {
        case 1: {
          setState(1089);
          match(WatParser::LPAR);
          setState(1090);
          match(WatParser::PARAM);
          setState(1094);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643522) != 0)) {
            setState(1091);
            val_type();
            setState(1096);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1097);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(1098);
          match(WatParser::LPAR);
          setState(1099);
          match(WatParser::PARAM);
          setState(1100);
          bind_var();
          setState(1101);
          val_type();
          setState(1102);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(1108);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx);
    }
    setState(1109);
    func_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_result_bodyContext ------------------------------------------------------------------

WatParser::Func_result_bodyContext::Func_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_bodyContext* WatParser::Func_result_bodyContext::func_body() {
  return getRuleContext<WatParser::Func_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_result_body;
}

void WatParser::Func_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_result_body(this);
}

void WatParser::Func_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_result_body(this);
}


std::any WatParser::Func_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_result_bodyContext* WatParser::func_result_body() {
  Func_result_bodyContext *_localctx = _tracker.createInstance<Func_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 98, WatParser::RuleFunc_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1122);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1111);
        match(WatParser::LPAR);
        setState(1112);
        match(WatParser::RESULT);
        setState(1116);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(1113);
          val_type();
          setState(1118);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1119);
        match(WatParser::RPAR); 
      }
      setState(1124);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 135, _ctx);
    }
    setState(1125);
    func_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_bodyContext ------------------------------------------------------------------

WatParser::Func_bodyContext::Func_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Func_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LOCAL() {
  return getTokens(WatParser::LOCAL);
}

tree::TerminalNode* WatParser::Func_bodyContext::LOCAL(size_t i) {
  return getToken(WatParser::LOCAL, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_body;
}

void WatParser::Func_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_body(this);
}

void WatParser::Func_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_body(this);
}


std::any WatParser::Func_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_bodyContext* WatParser::func_body() {
  Func_bodyContext *_localctx = _tracker.createInstance<Func_bodyContext>(_ctx, getState());
  enterRule(_localctx, 100, WatParser::RuleFunc_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1143);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1127);
        match(WatParser::LPAR);
        setState(1128);
        match(WatParser::LOCAL);
        setState(1138);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::VAR: {
            setState(1129);
            bind_var();
            setState(1130);
            val_type();
            break;
          }

          case WatParser::LPAR:
          case WatParser::RPAR:
          case WatParser::NUM_TYPE:
          case WatParser::VEC_TYPE:
          case WatParser::ANYREF:
          case WatParser::NULLREF:
          case WatParser::EQREF:
          case WatParser::I31REF:
          case WatParser::STRUCTREF:
          case WatParser::ARRAYREF:
          case WatParser::FUNCREF:
          case WatParser::NULLFUNCREF:
          case WatParser::EXTERNREF:
          case WatParser::NULLEXTERNREF:
          case WatParser::EXNREF: {
            setState(1135);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 37739643522) != 0)) {
              setState(1132);
              val_type();
              setState(1137);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1140);
        match(WatParser::RPAR); 
      }
      setState(1145);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx);
    }
    setState(1146);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_useContext ------------------------------------------------------------------

WatParser::Table_useContext::Table_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Table_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_useContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Var_Context* WatParser::Table_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Table_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Table_useContext::getRuleIndex() const {
  return WatParser::RuleTable_use;
}

void WatParser::Table_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_use(this);
}

void WatParser::Table_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_use(this);
}


std::any WatParser::Table_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_useContext* WatParser::table_use() {
  Table_useContext *_localctx = _tracker.createInstance<Table_useContext>(_ctx, getState());
  enterRule(_localctx, 102, WatParser::RuleTable_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1148);
    match(WatParser::LPAR);
    setState(1149);
    match(WatParser::TABLE);
    setState(1150);
    var_();
    setState(1151);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_useContext ------------------------------------------------------------------

WatParser::Memory_useContext::Memory_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Memory_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_useContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Var_Context* WatParser::Memory_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Memory_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Memory_useContext::getRuleIndex() const {
  return WatParser::RuleMemory_use;
}

void WatParser::Memory_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_use(this);
}

void WatParser::Memory_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_use(this);
}


std::any WatParser::Memory_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_useContext* WatParser::memory_use() {
  Memory_useContext *_localctx = _tracker.createInstance<Memory_useContext>(_ctx, getState());
  enterRule(_localctx, 104, WatParser::RuleMemory_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1153);
    match(WatParser::LPAR);
    setState(1154);
    match(WatParser::MEMORY);
    setState(1155);
    var_();
    setState(1156);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetContext ------------------------------------------------------------------

WatParser::OffsetContext::OffsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::OffsetContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::OffsetContext::OFFSET() {
  return getToken(WatParser::OFFSET, 0);
}

WatParser::Const_exprContext* WatParser::OffsetContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::OffsetContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::OffsetContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::OffsetContext::getRuleIndex() const {
  return WatParser::RuleOffset;
}

void WatParser::OffsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOffset(this);
}

void WatParser::OffsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOffset(this);
}


std::any WatParser::OffsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitOffset(this);
  else
    return visitor->visitChildren(this);
}

WatParser::OffsetContext* WatParser::offset() {
  OffsetContext *_localctx = _tracker.createInstance<OffsetContext>(_ctx, getState());
  enterRule(_localctx, 106, WatParser::RuleOffset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1164);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1158);
      match(WatParser::LPAR);
      setState(1159);
      match(WatParser::OFFSET);
      setState(1160);
      const_expr();
      setState(1161);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1163);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_kindContext ------------------------------------------------------------------

WatParser::Elem_kindContext::Elem_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_kindContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}


size_t WatParser::Elem_kindContext::getRuleIndex() const {
  return WatParser::RuleElem_kind;
}

void WatParser::Elem_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_kind(this);
}

void WatParser::Elem_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_kind(this);
}


std::any WatParser::Elem_kindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_kind(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_kindContext* WatParser::elem_kind() {
  Elem_kindContext *_localctx = _tracker.createInstance<Elem_kindContext>(_ctx, getState());
  enterRule(_localctx, 108, WatParser::RuleElem_kind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1166);
    match(WatParser::FUNC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_exprContext ------------------------------------------------------------------

WatParser::Elem_exprContext::Elem_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_exprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Elem_exprContext::ITEM() {
  return getToken(WatParser::ITEM, 0);
}

WatParser::Const_exprContext* WatParser::Elem_exprContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::Elem_exprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::Elem_exprContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::Elem_exprContext::getRuleIndex() const {
  return WatParser::RuleElem_expr;
}

void WatParser::Elem_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_expr(this);
}

void WatParser::Elem_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_expr(this);
}


std::any WatParser::Elem_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_exprContext* WatParser::elem_expr() {
  Elem_exprContext *_localctx = _tracker.createInstance<Elem_exprContext>(_ctx, getState());
  enterRule(_localctx, 110, WatParser::RuleElem_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1174);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1168);
      match(WatParser::LPAR);
      setState(1169);
      match(WatParser::ITEM);
      setState(1170);
      const_expr();
      setState(1171);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1173);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_listContext ------------------------------------------------------------------

WatParser::Elem_listContext::Elem_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Elem_kindContext* WatParser::Elem_listContext::elem_kind() {
  return getRuleContext<WatParser::Elem_kindContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::Elem_listContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Elem_listContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

WatParser::Ref_typeContext* WatParser::Elem_listContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Elem_listContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Elem_listContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Elem_listContext::getRuleIndex() const {
  return WatParser::RuleElem_list;
}

void WatParser::Elem_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_list(this);
}

void WatParser::Elem_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_list(this);
}


std::any WatParser::Elem_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_listContext* WatParser::elem_list() {
  Elem_listContext *_localctx = _tracker.createInstance<Elem_listContext>(_ctx, getState());
  enterRule(_localctx, 112, WatParser::RuleElem_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1190);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::FUNC: {
        enterOuterAlt(_localctx, 1);
        setState(1176);
        elem_kind();
        setState(1180);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1177);
          var_();
          setState(1182);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 2);
        setState(1183);
        ref_type();
        setState(1187);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1184);
          elem_expr();
          setState(1189);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemContext ------------------------------------------------------------------

WatParser::ElemContext::ElemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ElemContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ElemContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

WatParser::Elem_listContext* WatParser::ElemContext::elem_list() {
  return getRuleContext<WatParser::Elem_listContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Table_useContext* WatParser::ElemContext::table_use() {
  return getRuleContext<WatParser::Table_useContext>(0);
}

WatParser::OffsetContext* WatParser::ElemContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::DECLARE() {
  return getToken(WatParser::DECLARE, 0);
}

WatParser::Bind_varContext* WatParser::ElemContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::ElemContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::ElemContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::ElemContext::getRuleIndex() const {
  return WatParser::RuleElem;
}

void WatParser::ElemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem(this);
}

void WatParser::ElemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem(this);
}


std::any WatParser::ElemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemContext* WatParser::elem() {
  ElemContext *_localctx = _tracker.createInstance<ElemContext>(_ctx, getState());
  enterRule(_localctx, 114, WatParser::RuleElem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1223);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 149, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1192);
      match(WatParser::LPAR);
      setState(1193);
      match(WatParser::ELEM);
      setState(1195);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1194);
        bind_var();
      }
      setState(1204);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
      case 1: {
        setState(1197);
        table_use();
        setState(1198);
        offset();
        break;
      }

      case 2: {
        setState(1201);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
        case 1: {
          setState(1200);
          offset();
          break;
        }

        default:
          break;
        }
        break;
      }

      case 3: {
        setState(1203);
        match(WatParser::DECLARE);
        break;
      }

      default:
        break;
      }
      setState(1206);
      elem_list();
      setState(1207);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1209);
      match(WatParser::LPAR);
      setState(1210);
      match(WatParser::ELEM);
      setState(1212);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1211);
        bind_var();
      }
      setState(1214);
      offset();
      setState(1218);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(1215);
        var_();
        setState(1220);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1221);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableContext ------------------------------------------------------------------

WatParser::TableContext::TableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::TableContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::TableContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_fieldsContext* WatParser::TableContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

tree::TerminalNode* WatParser::TableContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::TableContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::TableContext::getRuleIndex() const {
  return WatParser::RuleTable;
}

void WatParser::TableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable(this);
}

void WatParser::TableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable(this);
}


std::any WatParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableContext* WatParser::table() {
  TableContext *_localctx = _tracker.createInstance<TableContext>(_ctx, getState());
  enterRule(_localctx, 116, WatParser::RuleTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1225);
    match(WatParser::LPAR);
    setState(1226);
    match(WatParser::TABLE);
    setState(1228);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1227);
      bind_var();
    }
    setState(1230);
    table_fields();
    setState(1231);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_fieldsContext ------------------------------------------------------------------

WatParser::Table_fieldsContext::Table_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Table_typeContext* WatParser::Table_fieldsContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

WatParser::InstrContext* WatParser::Table_fieldsContext::instr() {
  return getRuleContext<WatParser::InstrContext>(0);
}

WatParser::Instr_listContext* WatParser::Table_fieldsContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Inline_importContext* WatParser::Table_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Table_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Table_fieldsContext* WatParser::Table_fieldsContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

WatParser::Ref_typeContext* WatParser::Table_fieldsContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Table_fieldsContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Table_fieldsContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Table_fieldsContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Table_fieldsContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Table_fieldsContext::getRuleIndex() const {
  return WatParser::RuleTable_fields;
}

void WatParser::Table_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_fields(this);
}

void WatParser::Table_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_fields(this);
}


std::any WatParser::Table_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_fieldsContext* WatParser::table_fields() {
  Table_fieldsContext *_localctx = _tracker.createInstance<Table_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 118, WatParser::RuleTable_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1264);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1233);
      table_type();
      setState(1237);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1099146589915572222) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1729383438093385729) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 2097151) != 0)) {
        setState(1234);
        instr();
        setState(1235);
        instr_list();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1239);
      inline_import();
      setState(1240);
      table_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1242);
      inline_export();
      setState(1243);
      table_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1245);
      ref_type();
      setState(1246);
      match(WatParser::LPAR);
      setState(1247);
      match(WatParser::ELEM);
      setState(1260);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 154, _ctx)) {
      case 1: {
        setState(1251);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1248);
          var_();
          setState(1253);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(1257);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1254);
          elem_expr();
          setState(1259);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(1262);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataContext ------------------------------------------------------------------

WatParser::DataContext::DataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::DataContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::DataContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

WatParser::Memory_useContext* WatParser::DataContext::memory_use() {
  return getRuleContext<WatParser::Memory_useContext>(0);
}

WatParser::OffsetContext* WatParser::DataContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::DataContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::DataContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::DataContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::DataContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::DataContext::getRuleIndex() const {
  return WatParser::RuleData;
}

void WatParser::DataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData(this);
}

void WatParser::DataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData(this);
}


std::any WatParser::DataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitData(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DataContext* WatParser::data() {
  DataContext *_localctx = _tracker.createInstance<DataContext>(_ctx, getState());
  enterRule(_localctx, 120, WatParser::RuleData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1296);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1266);
      match(WatParser::LPAR);
      setState(1267);
      match(WatParser::DATA);
      setState(1269);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1268);
        bind_var();
      }
      setState(1271);
      memory_use();
      setState(1272);
      offset();
      setState(1276);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1273);
        match(WatParser::STRING_);
        setState(1278);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1279);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1281);
      match(WatParser::LPAR);
      setState(1282);
      match(WatParser::DATA);
      setState(1284);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1283);
        bind_var();
      }
      setState(1287);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::LPAR) {
        setState(1286);
        offset();
      }
      setState(1292);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1289);
        match(WatParser::STRING_);
        setState(1294);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1295);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemoryContext ------------------------------------------------------------------

WatParser::MemoryContext::MemoryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MemoryContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MemoryContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_fieldsContext* WatParser::MemoryContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::MemoryContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::MemoryContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::MemoryContext::getRuleIndex() const {
  return WatParser::RuleMemory;
}

void WatParser::MemoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory(this);
}

void WatParser::MemoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory(this);
}


std::any WatParser::MemoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemoryContext* WatParser::memory() {
  MemoryContext *_localctx = _tracker.createInstance<MemoryContext>(_ctx, getState());
  enterRule(_localctx, 122, WatParser::RuleMemory);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1298);
    match(WatParser::LPAR);
    setState(1299);
    match(WatParser::MEMORY);
    setState(1301);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1300);
      bind_var();
    }
    setState(1303);
    memory_fields();
    setState(1304);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_fieldsContext ------------------------------------------------------------------

WatParser::Memory_fieldsContext::Memory_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Memory_typeContext* WatParser::Memory_fieldsContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

WatParser::Inline_importContext* WatParser::Memory_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Memory_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Memory_fieldsContext* WatParser::Memory_fieldsContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Memory_fieldsContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Memory_fieldsContext::getRuleIndex() const {
  return WatParser::RuleMemory_fields;
}

void WatParser::Memory_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_fields(this);
}

void WatParser::Memory_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_fields(this);
}


std::any WatParser::Memory_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_fieldsContext* WatParser::memory_fields() {
  Memory_fieldsContext *_localctx = _tracker.createInstance<Memory_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 124, WatParser::RuleMemory_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1322);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 164, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1306);
      memory_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1307);
      inline_import();
      setState(1308);
      memory_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1310);
      inline_export();
      setState(1311);
      memory_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1313);
      match(WatParser::LPAR);
      setState(1314);
      match(WatParser::DATA);
      setState(1318);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1315);
        match(WatParser::STRING_);
        setState(1320);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1321);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagContext ------------------------------------------------------------------

WatParser::TagContext::TagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::TagContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::TagContext::TAG() {
  return getToken(WatParser::TAG, 0);
}

WatParser::Tag_fieldsContext* WatParser::TagContext::tag_fields() {
  return getRuleContext<WatParser::Tag_fieldsContext>(0);
}

tree::TerminalNode* WatParser::TagContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::TagContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::TagContext::getRuleIndex() const {
  return WatParser::RuleTag;
}

void WatParser::TagContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag(this);
}

void WatParser::TagContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag(this);
}


std::any WatParser::TagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TagContext* WatParser::tag() {
  TagContext *_localctx = _tracker.createInstance<TagContext>(_ctx, getState());
  enterRule(_localctx, 126, WatParser::RuleTag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1324);
    match(WatParser::LPAR);
    setState(1325);
    match(WatParser::TAG);
    setState(1327);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1326);
      bind_var();
    }
    setState(1329);
    tag_fields();
    setState(1330);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fieldsContext ------------------------------------------------------------------

WatParser::Tag_fieldsContext::Tag_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_typeContext* WatParser::Tag_fieldsContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}

std::vector<WatParser::Inline_exportContext *> WatParser::Tag_fieldsContext::inline_export() {
  return getRuleContexts<WatParser::Inline_exportContext>();
}

WatParser::Inline_exportContext* WatParser::Tag_fieldsContext::inline_export(size_t i) {
  return getRuleContext<WatParser::Inline_exportContext>(i);
}

WatParser::Type_useContext* WatParser::Tag_fieldsContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Inline_importContext* WatParser::Tag_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Tag_fields_importContext* WatParser::Tag_fieldsContext::tag_fields_import() {
  return getRuleContext<WatParser::Tag_fields_importContext>(0);
}


size_t WatParser::Tag_fieldsContext::getRuleIndex() const {
  return WatParser::RuleTag_fields;
}

void WatParser::Tag_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields(this);
}

void WatParser::Tag_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields(this);
}


std::any WatParser::Tag_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fieldsContext* WatParser::tag_fields() {
  Tag_fieldsContext *_localctx = _tracker.createInstance<Tag_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 128, WatParser::RuleTag_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1354);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1335);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1332);
          inline_export(); 
        }
        setState(1337);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 166, _ctx);
      }
      setState(1339);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
      case 1: {
        setState(1338);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1341);
      func_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1345);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1342);
          inline_export(); 
        }
        setState(1347);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx);
      }
      setState(1348);
      inline_import();
      setState(1350);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx)) {
      case 1: {
        setState(1349);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1352);
      tag_fields_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fields_importContext ------------------------------------------------------------------

WatParser::Tag_fields_importContext::Tag_fields_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Tag_fields_import_resultContext* WatParser::Tag_fields_importContext::tag_fields_import_result() {
  return getRuleContext<WatParser::Tag_fields_import_resultContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Tag_fields_importContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Tag_fields_importContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Tag_fields_importContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Tag_fields_importContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Tag_fields_importContext::getRuleIndex() const {
  return WatParser::RuleTag_fields_import;
}

void WatParser::Tag_fields_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields_import(this);
}

void WatParser::Tag_fields_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields_import(this);
}


std::any WatParser::Tag_fields_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fields_importContext* WatParser::tag_fields_import() {
  Tag_fields_importContext *_localctx = _tracker.createInstance<Tag_fields_importContext>(_ctx, getState());
  enterRule(_localctx, 130, WatParser::RuleTag_fields_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1372);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1356);
        match(WatParser::LPAR);
        setState(1357);
        match(WatParser::PARAM);
        setState(1367);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::LPAR:
          case WatParser::RPAR:
          case WatParser::NUM_TYPE:
          case WatParser::VEC_TYPE:
          case WatParser::ANYREF:
          case WatParser::NULLREF:
          case WatParser::EQREF:
          case WatParser::I31REF:
          case WatParser::STRUCTREF:
          case WatParser::ARRAYREF:
          case WatParser::FUNCREF:
          case WatParser::NULLFUNCREF:
          case WatParser::EXTERNREF:
          case WatParser::NULLEXTERNREF:
          case WatParser::EXNREF: {
            setState(1361);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 37739643522) != 0)) {
              setState(1358);
              val_type();
              setState(1363);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

          case WatParser::VAR: {
            setState(1364);
            bind_var();
            setState(1365);
            val_type();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1369);
        match(WatParser::RPAR); 
      }
      setState(1374);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 173, _ctx);
    }
    setState(1375);
    tag_fields_import_result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fields_import_resultContext ------------------------------------------------------------------

WatParser::Tag_fields_import_resultContext::Tag_fields_import_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Tag_fields_import_resultContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Tag_fields_import_resultContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Tag_fields_import_resultContext::getRuleIndex() const {
  return WatParser::RuleTag_fields_import_result;
}

void WatParser::Tag_fields_import_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields_import_result(this);
}

void WatParser::Tag_fields_import_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields_import_result(this);
}


std::any WatParser::Tag_fields_import_resultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields_import_result(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fields_import_resultContext* WatParser::tag_fields_import_result() {
  Tag_fields_import_resultContext *_localctx = _tracker.createInstance<Tag_fields_import_resultContext>(_ctx, getState());
  enterRule(_localctx, 132, WatParser::RuleTag_fields_import_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1388);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1377);
      match(WatParser::LPAR);
      setState(1378);
      match(WatParser::RESULT);
      setState(1382);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 37739643522) != 0)) {
        setState(1379);
        val_type();
        setState(1384);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1385);
      match(WatParser::RPAR);
      setState(1390);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SglobalContext ------------------------------------------------------------------

WatParser::SglobalContext::SglobalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SglobalContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SglobalContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_fieldsContext* WatParser::SglobalContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}

tree::TerminalNode* WatParser::SglobalContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::SglobalContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::SglobalContext::getRuleIndex() const {
  return WatParser::RuleSglobal;
}

void WatParser::SglobalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSglobal(this);
}

void WatParser::SglobalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSglobal(this);
}


std::any WatParser::SglobalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSglobal(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SglobalContext* WatParser::sglobal() {
  SglobalContext *_localctx = _tracker.createInstance<SglobalContext>(_ctx, getState());
  enterRule(_localctx, 134, WatParser::RuleSglobal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1391);
    match(WatParser::LPAR);
    setState(1392);
    match(WatParser::GLOBAL);
    setState(1394);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1393);
      bind_var();
    }
    setState(1396);
    global_fields();
    setState(1397);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_fieldsContext ------------------------------------------------------------------

WatParser::Global_fieldsContext::Global_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Global_typeContext* WatParser::Global_fieldsContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}

WatParser::Const_exprContext* WatParser::Global_fieldsContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

WatParser::Inline_importContext* WatParser::Global_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Global_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Global_fieldsContext* WatParser::Global_fieldsContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}


size_t WatParser::Global_fieldsContext::getRuleIndex() const {
  return WatParser::RuleGlobal_fields;
}

void WatParser::Global_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_fields(this);
}

void WatParser::Global_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_fields(this);
}


std::any WatParser::Global_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_fieldsContext* WatParser::global_fields() {
  Global_fieldsContext *_localctx = _tracker.createInstance<Global_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 136, WatParser::RuleGlobal_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1408);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1399);
      global_type();
      setState(1400);
      const_expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1402);
      inline_import();
      setState(1403);
      global_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1405);
      inline_export();
      setState(1406);
      global_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_descContext ------------------------------------------------------------------

WatParser::Import_descContext::Import_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Import_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Import_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Import_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Type_useContext* WatParser::Import_descContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Func_typeContext* WatParser::Import_descContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}

WatParser::Bind_varContext* WatParser::Import_descContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_typeContext* WatParser::Import_descContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_typeContext* WatParser::Import_descContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_typeContext* WatParser::Import_descContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::TAG() {
  return getToken(WatParser::TAG, 0);
}


size_t WatParser::Import_descContext::getRuleIndex() const {
  return WatParser::RuleImport_desc;
}

void WatParser::Import_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_desc(this);
}

void WatParser::Import_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_desc(this);
}


std::any WatParser::Import_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitImport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Import_descContext* WatParser::import_desc() {
  Import_descContext *_localctx = _tracker.createInstance<Import_descContext>(_ctx, getState());
  enterRule(_localctx, 138, WatParser::RuleImport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1456);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1410);
      match(WatParser::LPAR);
      setState(1411);
      match(WatParser::FUNC);
      setState(1413);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1412);
        bind_var();
      }
      setState(1417);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 179, _ctx)) {
      case 1: {
        setState(1415);
        type_use();
        break;
      }

      case 2: {
        setState(1416);
        func_type();
        break;
      }

      default:
        break;
      }
      setState(1419);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1421);
      match(WatParser::LPAR);
      setState(1422);
      match(WatParser::TABLE);
      setState(1424);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1423);
        bind_var();
      }
      setState(1426);
      table_type();
      setState(1427);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1429);
      match(WatParser::LPAR);
      setState(1430);
      match(WatParser::MEMORY);
      setState(1432);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1431);
        bind_var();
      }
      setState(1434);
      memory_type();
      setState(1435);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1437);
      match(WatParser::LPAR);
      setState(1438);
      match(WatParser::GLOBAL);
      setState(1440);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1439);
        bind_var();
      }
      setState(1442);
      global_type();
      setState(1443);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1445);
      match(WatParser::LPAR);
      setState(1446);
      match(WatParser::TAG);
      setState(1448);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1447);
        bind_var();
      }
      setState(1452);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
      case 1: {
        setState(1450);
        type_use();
        break;
      }

      case 2: {
        setState(1451);
        func_type();
        break;
      }

      default:
        break;
      }
      setState(1454);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimportContext ------------------------------------------------------------------

WatParser::SimportContext::SimportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SimportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SimportContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::SimportContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::SimportContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

WatParser::Import_descContext* WatParser::SimportContext::import_desc() {
  return getRuleContext<WatParser::Import_descContext>(0);
}

tree::TerminalNode* WatParser::SimportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::SimportContext::getRuleIndex() const {
  return WatParser::RuleSimport;
}

void WatParser::SimportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimport(this);
}

void WatParser::SimportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimport(this);
}


std::any WatParser::SimportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSimport(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SimportContext* WatParser::simport() {
  SimportContext *_localctx = _tracker.createInstance<SimportContext>(_ctx, getState());
  enterRule(_localctx, 140, WatParser::RuleSimport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1458);
    match(WatParser::LPAR);
    setState(1459);
    match(WatParser::IMPORT);
    setState(1460);
    name();
    setState(1461);
    name();
    setState(1462);
    import_desc();
    setState(1463);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_importContext ------------------------------------------------------------------

WatParser::Inline_importContext::Inline_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_importContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_importContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::Inline_importContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::Inline_importContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

tree::TerminalNode* WatParser::Inline_importContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_importContext::getRuleIndex() const {
  return WatParser::RuleInline_import;
}

void WatParser::Inline_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_import(this);
}

void WatParser::Inline_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_import(this);
}


std::any WatParser::Inline_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_importContext* WatParser::inline_import() {
  Inline_importContext *_localctx = _tracker.createInstance<Inline_importContext>(_ctx, getState());
  enterRule(_localctx, 142, WatParser::RuleInline_import);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1465);
    match(WatParser::LPAR);
    setState(1466);
    match(WatParser::IMPORT);
    setState(1467);
    name();
    setState(1468);
    name();
    setState(1469);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_descContext ------------------------------------------------------------------

WatParser::Export_descContext::Export_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

WatParser::Var_Context* WatParser::Export_descContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Export_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Export_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Export_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

tree::TerminalNode* WatParser::Export_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

tree::TerminalNode* WatParser::Export_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

tree::TerminalNode* WatParser::Export_descContext::TAG() {
  return getToken(WatParser::TAG, 0);
}


size_t WatParser::Export_descContext::getRuleIndex() const {
  return WatParser::RuleExport_desc;
}

void WatParser::Export_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_desc(this);
}

void WatParser::Export_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_desc(this);
}


std::any WatParser::Export_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_descContext* WatParser::export_desc() {
  Export_descContext *_localctx = _tracker.createInstance<Export_descContext>(_ctx, getState());
  enterRule(_localctx, 144, WatParser::RuleExport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1471);
    match(WatParser::LPAR);
    setState(1472);
    _la = _input->LA(1);
    if (!(((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & 32993) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1473);
    var_();
    setState(1474);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_Context ------------------------------------------------------------------

WatParser::Export_Context::Export_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Export_Context::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Export_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Export_descContext* WatParser::Export_Context::export_desc() {
  return getRuleContext<WatParser::Export_descContext>(0);
}

tree::TerminalNode* WatParser::Export_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Export_Context::getRuleIndex() const {
  return WatParser::RuleExport_;
}

void WatParser::Export_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_(this);
}

void WatParser::Export_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_(this);
}


std::any WatParser::Export_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_Context* WatParser::export_() {
  Export_Context *_localctx = _tracker.createInstance<Export_Context>(_ctx, getState());
  enterRule(_localctx, 146, WatParser::RuleExport_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1476);
    match(WatParser::LPAR);
    setState(1477);
    match(WatParser::EXPORT);
    setState(1478);
    name();
    setState(1479);
    export_desc();
    setState(1480);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_exportContext ------------------------------------------------------------------

WatParser::Inline_exportContext::Inline_exportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_exportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_exportContext::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Inline_exportContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::Inline_exportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_exportContext::getRuleIndex() const {
  return WatParser::RuleInline_export;
}

void WatParser::Inline_exportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_export(this);
}

void WatParser::Inline_exportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_export(this);
}


std::any WatParser::Inline_exportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_export(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_exportContext* WatParser::inline_export() {
  Inline_exportContext *_localctx = _tracker.createInstance<Inline_exportContext>(_ctx, getState());
  enterRule(_localctx, 148, WatParser::RuleInline_export);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1482);
    match(WatParser::LPAR);
    setState(1483);
    match(WatParser::EXPORT);
    setState(1484);
    name();
    setState(1485);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_defContext ------------------------------------------------------------------

WatParser::Type_defContext::Type_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_defContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_defContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Sub_typeContext* WatParser::Type_defContext::sub_type() {
  return getRuleContext<WatParser::Sub_typeContext>(0);
}

tree::TerminalNode* WatParser::Type_defContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Type_defContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Type_defContext::getRuleIndex() const {
  return WatParser::RuleType_def;
}

void WatParser::Type_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_def(this);
}

void WatParser::Type_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_def(this);
}


std::any WatParser::Type_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_def(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_defContext* WatParser::type_def() {
  Type_defContext *_localctx = _tracker.createInstance<Type_defContext>(_ctx, getState());
  enterRule(_localctx, 150, WatParser::RuleType_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1487);
    match(WatParser::LPAR);
    setState(1488);
    match(WatParser::TYPE);
    setState(1490);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1489);
      bind_var();
    }
    setState(1492);
    sub_type();
    setState(1493);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rec_typeContext ------------------------------------------------------------------

WatParser::Rec_typeContext::Rec_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_defContext *> WatParser::Rec_typeContext::type_def() {
  return getRuleContexts<WatParser::Type_defContext>();
}

WatParser::Type_defContext* WatParser::Rec_typeContext::type_def(size_t i) {
  return getRuleContext<WatParser::Type_defContext>(i);
}

tree::TerminalNode* WatParser::Rec_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::REC() {
  return getToken(WatParser::REC, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Rec_typeContext::getRuleIndex() const {
  return WatParser::RuleRec_type;
}

void WatParser::Rec_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRec_type(this);
}

void WatParser::Rec_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRec_type(this);
}


std::any WatParser::Rec_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRec_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Rec_typeContext* WatParser::rec_type() {
  Rec_typeContext *_localctx = _tracker.createInstance<Rec_typeContext>(_ctx, getState());
  enterRule(_localctx, 152, WatParser::RuleRec_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1505);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 188, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1495);
      type_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1496);
      match(WatParser::LPAR);
      setState(1497);
      match(WatParser::REC);
      setState(1501);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1498);
        type_def();
        setState(1503);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1504);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

WatParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Rec_typeContext* WatParser::Type_Context::rec_type() {
  return getRuleContext<WatParser::Rec_typeContext>(0);
}


size_t WatParser::Type_Context::getRuleIndex() const {
  return WatParser::RuleType_;
}

void WatParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void WatParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}


std::any WatParser::Type_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_Context* WatParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 154, WatParser::RuleType_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1507);
    rec_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_Context ------------------------------------------------------------------

WatParser::Start_Context::Start_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Start_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Start_Context::START_() {
  return getToken(WatParser::START_, 0);
}

WatParser::Var_Context* WatParser::Start_Context::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Start_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Start_Context::getRuleIndex() const {
  return WatParser::RuleStart_;
}

void WatParser::Start_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_(this);
}

void WatParser::Start_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_(this);
}


std::any WatParser::Start_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStart_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Start_Context* WatParser::start_() {
  Start_Context *_localctx = _tracker.createInstance<Start_Context>(_ctx, getState());
  enterRule(_localctx, 156, WatParser::RuleStart_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1509);
    match(WatParser::LPAR);
    setState(1510);
    match(WatParser::START_);
    setState(1511);
    var_();
    setState(1512);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_fieldContext ------------------------------------------------------------------

WatParser::Module_fieldContext::Module_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_Context *> WatParser::Module_fieldContext::type_() {
  return getRuleContexts<WatParser::Type_Context>();
}

WatParser::Type_Context* WatParser::Module_fieldContext::type_(size_t i) {
  return getRuleContext<WatParser::Type_Context>(i);
}

std::vector<WatParser::SglobalContext *> WatParser::Module_fieldContext::sglobal() {
  return getRuleContexts<WatParser::SglobalContext>();
}

WatParser::SglobalContext* WatParser::Module_fieldContext::sglobal(size_t i) {
  return getRuleContext<WatParser::SglobalContext>(i);
}

std::vector<WatParser::TableContext *> WatParser::Module_fieldContext::table() {
  return getRuleContexts<WatParser::TableContext>();
}

WatParser::TableContext* WatParser::Module_fieldContext::table(size_t i) {
  return getRuleContext<WatParser::TableContext>(i);
}

std::vector<WatParser::MemoryContext *> WatParser::Module_fieldContext::memory() {
  return getRuleContexts<WatParser::MemoryContext>();
}

WatParser::MemoryContext* WatParser::Module_fieldContext::memory(size_t i) {
  return getRuleContext<WatParser::MemoryContext>(i);
}

std::vector<WatParser::Func_Context *> WatParser::Module_fieldContext::func_() {
  return getRuleContexts<WatParser::Func_Context>();
}

WatParser::Func_Context* WatParser::Module_fieldContext::func_(size_t i) {
  return getRuleContext<WatParser::Func_Context>(i);
}

std::vector<WatParser::ElemContext *> WatParser::Module_fieldContext::elem() {
  return getRuleContexts<WatParser::ElemContext>();
}

WatParser::ElemContext* WatParser::Module_fieldContext::elem(size_t i) {
  return getRuleContext<WatParser::ElemContext>(i);
}

std::vector<WatParser::DataContext *> WatParser::Module_fieldContext::data() {
  return getRuleContexts<WatParser::DataContext>();
}

WatParser::DataContext* WatParser::Module_fieldContext::data(size_t i) {
  return getRuleContext<WatParser::DataContext>(i);
}

std::vector<WatParser::Start_Context *> WatParser::Module_fieldContext::start_() {
  return getRuleContexts<WatParser::Start_Context>();
}

WatParser::Start_Context* WatParser::Module_fieldContext::start_(size_t i) {
  return getRuleContext<WatParser::Start_Context>(i);
}

std::vector<WatParser::SimportContext *> WatParser::Module_fieldContext::simport() {
  return getRuleContexts<WatParser::SimportContext>();
}

WatParser::SimportContext* WatParser::Module_fieldContext::simport(size_t i) {
  return getRuleContext<WatParser::SimportContext>(i);
}

std::vector<WatParser::Export_Context *> WatParser::Module_fieldContext::export_() {
  return getRuleContexts<WatParser::Export_Context>();
}

WatParser::Export_Context* WatParser::Module_fieldContext::export_(size_t i) {
  return getRuleContext<WatParser::Export_Context>(i);
}

std::vector<WatParser::TagContext *> WatParser::Module_fieldContext::tag() {
  return getRuleContexts<WatParser::TagContext>();
}

WatParser::TagContext* WatParser::Module_fieldContext::tag(size_t i) {
  return getRuleContext<WatParser::TagContext>(i);
}


size_t WatParser::Module_fieldContext::getRuleIndex() const {
  return WatParser::RuleModule_field;
}

void WatParser::Module_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_field(this);
}

void WatParser::Module_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_field(this);
}


std::any WatParser::Module_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_field(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_fieldContext* WatParser::module_field() {
  Module_fieldContext *_localctx = _tracker.createInstance<Module_fieldContext>(_ctx, getState());
  enterRule(_localctx, 158, WatParser::RuleModule_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1525); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1525);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
              case 1: {
                setState(1514);
                type_();
                break;
              }

              case 2: {
                setState(1515);
                sglobal();
                break;
              }

              case 3: {
                setState(1516);
                table();
                break;
              }

              case 4: {
                setState(1517);
                memory();
                break;
              }

              case 5: {
                setState(1518);
                func_();
                break;
              }

              case 6: {
                setState(1519);
                elem();
                break;
              }

              case 7: {
                setState(1520);
                data();
                break;
              }

              case 8: {
                setState(1521);
                start_();
                break;
              }

              case 9: {
                setState(1522);
                simport();
                break;
              }

              case 10: {
                setState(1523);
                export_();
                break;
              }

              case 11: {
                setState(1524);
                tag();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1527); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_Context ------------------------------------------------------------------

WatParser::Module_Context::Module_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Module_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Module_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::Module_Context::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::Module_Context::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::Module_Context::getRuleIndex() const {
  return WatParser::RuleModule_;
}

void WatParser::Module_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_(this);
}

void WatParser::Module_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_(this);
}


std::any WatParser::Module_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_Context* WatParser::module_() {
  Module_Context *_localctx = _tracker.createInstance<Module_Context>(_ctx, getState());
  enterRule(_localctx, 160, WatParser::RuleModule_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1529);
    match(WatParser::LPAR);
    setState(1530);
    match(WatParser::MODULE);
    setState(1532);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1531);
      match(WatParser::VAR);
    }
    setState(1537);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1534);
      module_field();
      setState(1539);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1540);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_moduleContext ------------------------------------------------------------------

WatParser::Inline_moduleContext::Inline_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_fieldContext* WatParser::Inline_moduleContext::module_field() {
  return getRuleContext<WatParser::Module_fieldContext>(0);
}


size_t WatParser::Inline_moduleContext::getRuleIndex() const {
  return WatParser::RuleInline_module;
}

void WatParser::Inline_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_module(this);
}

void WatParser::Inline_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_module(this);
}


std::any WatParser::Inline_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_moduleContext* WatParser::inline_module() {
  Inline_moduleContext *_localctx = _tracker.createInstance<Inline_moduleContext>(_ctx, getState());
  enterRule(_localctx, 162, WatParser::RuleInline_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1543);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(1542);
      module_field();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Script_moduleContext ------------------------------------------------------------------

WatParser::Script_moduleContext::Script_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::Script_moduleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::Script_moduleContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::BIN() {
  return getToken(WatParser::BIN, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::QUOTE() {
  return getToken(WatParser::QUOTE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Script_moduleContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Script_moduleContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Script_moduleContext::getRuleIndex() const {
  return WatParser::RuleScript_module;
}

void WatParser::Script_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript_module(this);
}

void WatParser::Script_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript_module(this);
}


std::any WatParser::Script_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Script_moduleContext* WatParser::script_module() {
  Script_moduleContext *_localctx = _tracker.createInstance<Script_moduleContext>(_ctx, getState());
  enterRule(_localctx, 164, WatParser::RuleScript_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1559);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 196, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1545);
      module_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1546);
      match(WatParser::LPAR);
      setState(1547);
      match(WatParser::MODULE);
      setState(1549);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1548);
        match(WatParser::VAR);
      }
      setState(1551);
      _la = _input->LA(1);
      if (!(_la == WatParser::BIN

      || _la == WatParser::QUOTE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1555);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1552);
        match(WatParser::STRING_);
        setState(1557);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1558);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_Context ------------------------------------------------------------------

WatParser::Action_Context::Action_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Action_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::INVOKE() {
  return getToken(WatParser::INVOKE, 0);
}

WatParser::NameContext* WatParser::Action_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Literal_listContext* WatParser::Action_Context::literal_list() {
  return getRuleContext<WatParser::Literal_listContext>(0);
}

tree::TerminalNode* WatParser::Action_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::GET() {
  return getToken(WatParser::GET, 0);
}


size_t WatParser::Action_Context::getRuleIndex() const {
  return WatParser::RuleAction_;
}

void WatParser::Action_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_(this);
}

void WatParser::Action_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_(this);
}


std::any WatParser::Action_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAction_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Action_Context* WatParser::action_() {
  Action_Context *_localctx = _tracker.createInstance<Action_Context>(_ctx, getState());
  enterRule(_localctx, 166, WatParser::RuleAction_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1578);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 199, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1561);
      match(WatParser::LPAR);
      setState(1562);
      match(WatParser::INVOKE);
      setState(1564);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1563);
        match(WatParser::VAR);
      }
      setState(1566);
      name();
      setState(1567);
      literal_list();
      setState(1568);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1570);
      match(WatParser::LPAR);
      setState(1571);
      match(WatParser::GET);
      setState(1573);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1572);
        match(WatParser::VAR);
      }
      setState(1575);
      name();
      setState(1576);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertionContext ------------------------------------------------------------------

WatParser::AssertionContext::AssertionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::AssertionContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_MALFORMED() {
  return getToken(WatParser::ASSERT_MALFORMED, 0);
}

WatParser::Script_moduleContext* WatParser::AssertionContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::AssertionContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::AssertionContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_INVALID() {
  return getToken(WatParser::ASSERT_INVALID, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_UNLINKABLE() {
  return getToken(WatParser::ASSERT_UNLINKABLE, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_TRAP() {
  return getToken(WatParser::ASSERT_TRAP, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_RETURN() {
  return getToken(WatParser::ASSERT_RETURN, 0);
}

WatParser::Action_Context* WatParser::AssertionContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

std::vector<WatParser::ResultContext *> WatParser::AssertionContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::AssertionContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_EXCEPTION() {
  return getToken(WatParser::ASSERT_EXCEPTION, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_EXHAUSTION() {
  return getToken(WatParser::ASSERT_EXHAUSTION, 0);
}


size_t WatParser::AssertionContext::getRuleIndex() const {
  return WatParser::RuleAssertion;
}

void WatParser::AssertionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion(this);
}

void WatParser::AssertionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion(this);
}


std::any WatParser::AssertionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAssertion(this);
  else
    return visitor->visitChildren(this);
}

WatParser::AssertionContext* WatParser::assertion() {
  AssertionContext *_localctx = _tracker.createInstance<AssertionContext>(_ctx, getState());
  enterRule(_localctx, 168, WatParser::RuleAssertion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1632);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 201, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1580);
      match(WatParser::LPAR);
      setState(1581);
      match(WatParser::ASSERT_MALFORMED);
      setState(1582);
      script_module();
      setState(1583);
      match(WatParser::STRING_);
      setState(1584);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1586);
      match(WatParser::LPAR);
      setState(1587);
      match(WatParser::ASSERT_INVALID);
      setState(1588);
      script_module();
      setState(1589);
      match(WatParser::STRING_);
      setState(1590);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1592);
      match(WatParser::LPAR);
      setState(1593);
      match(WatParser::ASSERT_UNLINKABLE);
      setState(1594);
      script_module();
      setState(1595);
      match(WatParser::STRING_);
      setState(1596);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1598);
      match(WatParser::LPAR);
      setState(1599);
      match(WatParser::ASSERT_TRAP);
      setState(1600);
      script_module();
      setState(1601);
      match(WatParser::STRING_);
      setState(1602);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1604);
      match(WatParser::LPAR);
      setState(1605);
      match(WatParser::ASSERT_RETURN);
      setState(1606);
      action_();
      setState(1610);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1607);
        result();
        setState(1612);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1613);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1615);
      match(WatParser::LPAR);
      setState(1616);
      match(WatParser::ASSERT_EXCEPTION);
      setState(1617);
      action_();
      setState(1618);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1620);
      match(WatParser::LPAR);
      setState(1621);
      match(WatParser::ASSERT_TRAP);
      setState(1622);
      action_();
      setState(1623);
      match(WatParser::STRING_);
      setState(1624);
      match(WatParser::RPAR);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1626);
      match(WatParser::LPAR);
      setState(1627);
      match(WatParser::ASSERT_EXHAUSTION);
      setState(1628);
      action_();
      setState(1629);
      match(WatParser::STRING_);
      setState(1630);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CmdContext ------------------------------------------------------------------

WatParser::CmdContext::CmdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Action_Context* WatParser::CmdContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

WatParser::AssertionContext* WatParser::CmdContext::assertion() {
  return getRuleContext<WatParser::AssertionContext>(0);
}

WatParser::Script_moduleContext* WatParser::CmdContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::REGISTER() {
  return getToken(WatParser::REGISTER, 0);
}

WatParser::NameContext* WatParser::CmdContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::THREAD() {
  return getToken(WatParser::THREAD, 0);
}

WatParser::Shared_cmd_listContext* WatParser::CmdContext::shared_cmd_list() {
  return getRuleContext<WatParser::Shared_cmd_listContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::WAIT() {
  return getToken(WatParser::WAIT, 0);
}

WatParser::MetaContext* WatParser::CmdContext::meta() {
  return getRuleContext<WatParser::MetaContext>(0);
}


size_t WatParser::CmdContext::getRuleIndex() const {
  return WatParser::RuleCmd;
}

void WatParser::CmdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCmd(this);
}

void WatParser::CmdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCmd(this);
}


std::any WatParser::CmdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCmd(this);
  else
    return visitor->visitChildren(this);
}

WatParser::CmdContext* WatParser::cmd() {
  CmdContext *_localctx = _tracker.createInstance<CmdContext>(_ctx, getState());
  enterRule(_localctx, 170, WatParser::RuleCmd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1660);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 205, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1634);
      action_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1635);
      assertion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1636);
      script_module();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1637);
      match(WatParser::LPAR);
      setState(1638);
      match(WatParser::REGISTER);
      setState(1639);
      name();
      setState(1641);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1640);
        match(WatParser::VAR);
      }
      setState(1643);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1645);
      match(WatParser::LPAR);
      setState(1646);
      match(WatParser::THREAD);
      setState(1648);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1647);
        match(WatParser::VAR);
      }
      setState(1650);
      shared_cmd_list();
      setState(1651);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1653);
      match(WatParser::LPAR);
      setState(1654);
      match(WatParser::WAIT);
      setState(1656);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1655);
        match(WatParser::VAR);
      }
      setState(1658);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1659);
      meta();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shared_cmd_listContext ------------------------------------------------------------------

WatParser::Shared_cmd_listContext::Shared_cmd_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::SHARED() {
  return getTokens(WatParser::SHARED);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::SHARED(size_t i) {
  return getToken(WatParser::SHARED, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::MODULE() {
  return getTokens(WatParser::MODULE);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::MODULE(size_t i) {
  return getToken(WatParser::MODULE, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::VAR() {
  return getTokens(WatParser::VAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::VAR(size_t i) {
  return getToken(WatParser::VAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::CmdContext *> WatParser::Shared_cmd_listContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::Shared_cmd_listContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}


size_t WatParser::Shared_cmd_listContext::getRuleIndex() const {
  return WatParser::RuleShared_cmd_list;
}

void WatParser::Shared_cmd_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShared_cmd_list(this);
}

void WatParser::Shared_cmd_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShared_cmd_list(this);
}


std::any WatParser::Shared_cmd_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitShared_cmd_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Shared_cmd_listContext* WatParser::shared_cmd_list() {
  Shared_cmd_listContext *_localctx = _tracker.createInstance<Shared_cmd_listContext>(_ctx, getState());
  enterRule(_localctx, 172, WatParser::RuleShared_cmd_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1671);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1662);
        match(WatParser::LPAR);
        setState(1663);
        match(WatParser::SHARED);
        setState(1664);
        match(WatParser::LPAR);
        setState(1665);
        match(WatParser::MODULE);
        setState(1666);
        match(WatParser::VAR);
        setState(1667);
        match(WatParser::RPAR);
        setState(1668);
        match(WatParser::RPAR); 
      }
      setState(1673);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx);
    }
    setState(1677);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1674);
      cmd();
      setState(1679);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaContext ------------------------------------------------------------------

WatParser::MetaContext::MetaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MetaContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::SCRIPT() {
  return getToken(WatParser::SCRIPT, 0);
}

tree::TerminalNode* WatParser::MetaContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::CmdContext *> WatParser::MetaContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::MetaContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

tree::TerminalNode* WatParser::MetaContext::INPUT() {
  return getToken(WatParser::INPUT, 0);
}

tree::TerminalNode* WatParser::MetaContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::MetaContext::OUTPUT() {
  return getToken(WatParser::OUTPUT, 0);
}


size_t WatParser::MetaContext::getRuleIndex() const {
  return WatParser::RuleMeta;
}

void WatParser::MetaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta(this);
}

void WatParser::MetaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta(this);
}


std::any WatParser::MetaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMeta(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MetaContext* WatParser::meta() {
  MetaContext *_localctx = _tracker.createInstance<MetaContext>(_ctx, getState());
  enterRule(_localctx, 174, WatParser::RuleMeta);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1712);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 213, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1680);
      match(WatParser::LPAR);
      setState(1681);
      match(WatParser::SCRIPT);
      setState(1683);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1682);
        match(WatParser::VAR);
      }
      setState(1688);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1685);
        cmd();
        setState(1690);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1691);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1692);
      match(WatParser::LPAR);
      setState(1693);
      match(WatParser::INPUT);
      setState(1695);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1694);
        match(WatParser::VAR);
      }
      setState(1697);
      match(WatParser::STRING_);
      setState(1698);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1699);
      match(WatParser::LPAR);
      setState(1700);
      match(WatParser::OUTPUT);
      setState(1702);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1701);
        match(WatParser::VAR);
      }
      setState(1704);
      match(WatParser::STRING_);
      setState(1705);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1706);
      match(WatParser::LPAR);
      setState(1707);
      match(WatParser::OUTPUT);
      setState(1709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1708);
        match(WatParser::VAR);
      }
      setState(1711);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_numContext ------------------------------------------------------------------

WatParser::Literal_numContext::Literal_numContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_numContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_numContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

WatParser::NumContext* WatParser::Literal_numContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::Literal_numContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Literal_numContext::getRuleIndex() const {
  return WatParser::RuleLiteral_num;
}

void WatParser::Literal_numContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_num(this);
}

void WatParser::Literal_numContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_num(this);
}


std::any WatParser::Literal_numContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_num(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_numContext* WatParser::literal_num() {
  Literal_numContext *_localctx = _tracker.createInstance<Literal_numContext>(_ctx, getState());
  enterRule(_localctx, 176, WatParser::RuleLiteral_num);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1714);
    match(WatParser::LPAR);
    setState(1715);
    match(WatParser::CONST);
    setState(1716);
    num();
    setState(1717);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_vecContext ------------------------------------------------------------------

WatParser::Literal_vecContext::Literal_vecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_vecContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::NumContext *> WatParser::Literal_vecContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Literal_vecContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}


size_t WatParser::Literal_vecContext::getRuleIndex() const {
  return WatParser::RuleLiteral_vec;
}

void WatParser::Literal_vecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_vec(this);
}

void WatParser::Literal_vecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_vec(this);
}


std::any WatParser::Literal_vecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_vec(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_vecContext* WatParser::literal_vec() {
  Literal_vecContext *_localctx = _tracker.createInstance<Literal_vecContext>(_ctx, getState());
  enterRule(_localctx, 178, WatParser::RuleLiteral_vec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1719);
    match(WatParser::LPAR);
    setState(1720);
    match(WatParser::VEC_CONST);
    setState(1721);
    match(WatParser::VEC_SHAPE);
    setState(1725);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0)) {
      setState(1722);
      num();
      setState(1727);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1728);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_refContext ------------------------------------------------------------------

WatParser::Literal_refContext::Literal_refContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_refContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Literal_refContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Literal_refContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_HOST() {
  return getToken(WatParser::REF_HOST, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}


size_t WatParser::Literal_refContext::getRuleIndex() const {
  return WatParser::RuleLiteral_ref;
}

void WatParser::Literal_refContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_ref(this);
}

void WatParser::Literal_refContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_ref(this);
}


std::any WatParser::Literal_refContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_ref(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_refContext* WatParser::literal_ref() {
  Literal_refContext *_localctx = _tracker.createInstance<Literal_refContext>(_ctx, getState());
  enterRule(_localctx, 180, WatParser::RuleLiteral_ref);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1743);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 215, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1730);
      match(WatParser::LPAR);
      setState(1731);
      match(WatParser::REF_NULL);
      setState(1732);
      heap_type();
      setState(1733);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1735);
      match(WatParser::LPAR);
      setState(1736);
      match(WatParser::REF_HOST);
      setState(1737);
      match(WatParser::NAT);
      setState(1738);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1739);
      match(WatParser::LPAR);
      setState(1740);
      match(WatParser::REF_EXTERN);
      setState(1741);
      match(WatParser::NAT);
      setState(1742);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

WatParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::LiteralContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_vecContext* WatParser::LiteralContext::literal_vec() {
  return getRuleContext<WatParser::Literal_vecContext>(0);
}

WatParser::Literal_refContext* WatParser::LiteralContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}


size_t WatParser::LiteralContext::getRuleIndex() const {
  return WatParser::RuleLiteral;
}

void WatParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void WatParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}


std::any WatParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LiteralContext* WatParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 182, WatParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1748);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1745);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1746);
      literal_vec();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1747);
      literal_ref();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_listContext ------------------------------------------------------------------

WatParser::Literal_listContext::Literal_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::LiteralContext *> WatParser::Literal_listContext::literal() {
  return getRuleContexts<WatParser::LiteralContext>();
}

WatParser::LiteralContext* WatParser::Literal_listContext::literal(size_t i) {
  return getRuleContext<WatParser::LiteralContext>(i);
}


size_t WatParser::Literal_listContext::getRuleIndex() const {
  return WatParser::RuleLiteral_list;
}

void WatParser::Literal_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_list(this);
}

void WatParser::Literal_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_list(this);
}


std::any WatParser::Literal_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_listContext* WatParser::literal_list() {
  Literal_listContext *_localctx = _tracker.createInstance<Literal_listContext>(_ctx, getState());
  enterRule(_localctx, 184, WatParser::RuleLiteral_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1753);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1750);
      literal();
      setState(1755);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumpatContext ------------------------------------------------------------------

WatParser::NumpatContext::NumpatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::NumContext* WatParser::NumpatContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::NumpatContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}


size_t WatParser::NumpatContext::getRuleIndex() const {
  return WatParser::RuleNumpat;
}

void WatParser::NumpatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumpat(this);
}

void WatParser::NumpatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumpat(this);
}


std::any WatParser::NumpatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNumpat(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumpatContext* WatParser::numpat() {
  NumpatContext *_localctx = _tracker.createInstance<NumpatContext>(_ctx, getState());
  enterRule(_localctx, 186, WatParser::RuleNumpat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1758);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NAT:
      case WatParser::INT:
      case WatParser::FLOAT: {
        enterOuterAlt(_localctx, 1);
        setState(1756);
        num();
        break;
      }

      case WatParser::NAN_: {
        enterOuterAlt(_localctx, 2);
        setState(1757);
        match(WatParser::NAN_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

WatParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::ResultContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_refContext* WatParser::ResultContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}

tree::TerminalNode* WatParser::ResultContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}

tree::TerminalNode* WatParser::ResultContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF() {
  return getToken(WatParser::REF, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_STRUCT() {
  return getToken(WatParser::REF_STRUCT, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_ARRAY() {
  return getToken(WatParser::REF_ARRAY, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

std::vector<WatParser::NumpatContext *> WatParser::ResultContext::numpat() {
  return getRuleContexts<WatParser::NumpatContext>();
}

WatParser::NumpatContext* WatParser::ResultContext::numpat(size_t i) {
  return getRuleContext<WatParser::NumpatContext>(i);
}

tree::TerminalNode* WatParser::ResultContext::EITHER() {
  return getToken(WatParser::EITHER, 0);
}

std::vector<WatParser::ResultContext *> WatParser::ResultContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::ResultContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::ResultContext::getRuleIndex() const {
  return WatParser::RuleResult;
}

void WatParser::ResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult(this);
}

void WatParser::ResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult(this);
}


std::any WatParser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ResultContext* WatParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 188, WatParser::RuleResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1788);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 221, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1760);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1761);
      literal_ref();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1762);
      match(WatParser::LPAR);
      setState(1763);
      match(WatParser::CONST);
      setState(1764);
      match(WatParser::NAN_);
      setState(1765);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1766);
      match(WatParser::LPAR);
      setState(1767);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13717511363100672) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1768);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1769);
      match(WatParser::LPAR);
      setState(1770);
      match(WatParser::VEC_CONST);
      setState(1771);
      match(WatParser::VEC_SHAPE);
      setState(1775);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 56) != 0) || _la == WatParser::NAN_) {
        setState(1772);
        numpat();
        setState(1777);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1778);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1779);
      match(WatParser::LPAR);
      setState(1780);
      match(WatParser::EITHER);
      setState(1784);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1781);
        result();
        setState(1786);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1787);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScriptContext ------------------------------------------------------------------

WatParser::ScriptContext::ScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ScriptContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::CmdContext *> WatParser::ScriptContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::ScriptContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ScriptContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ScriptContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ScriptContext::getRuleIndex() const {
  return WatParser::RuleScript;
}

void WatParser::ScriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript(this);
}

void WatParser::ScriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript(this);
}


std::any WatParser::ScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ScriptContext* WatParser::script() {
  ScriptContext *_localctx = _tracker.createInstance<ScriptContext>(_ctx, getState());
  enterRule(_localctx, 190, WatParser::RuleScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1804);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 224, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1793);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1790);
        cmd();
        setState(1795);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1796);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1798); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1797);
        module_field();
        setState(1800); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == WatParser::LPAR);
      setState(1802);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

WatParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::ModuleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::ModuleContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ModuleContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ModuleContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ModuleContext::getRuleIndex() const {
  return WatParser::RuleModule;
}

void WatParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void WatParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any WatParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModuleContext* WatParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 192, WatParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1816);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 226, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1806);
      module_();
      setState(1807);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1812);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1809);
        module_field();
        setState(1814);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1815);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void WatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  watparserParserInitialize();
#else
  ::antlr4::internal::call_once(watparserParserOnceFlag, watparserParserInitialize);
#endif
}
