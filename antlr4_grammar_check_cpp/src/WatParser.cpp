
// Generated from WatParser.g4 by ANTLR 4.13.1


#include "WatParserListener.h"
#include "WatParserVisitor.h"

#include "WatParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct WatParserStaticData final {
  WatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  WatParserStaticData(const WatParserStaticData&) = delete;
  WatParserStaticData(WatParserStaticData&&) = delete;
  WatParserStaticData& operator=(const WatParserStaticData&) = delete;
  WatParserStaticData& operator=(WatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag watparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
WatParserStaticData *watparserParserStaticData = nullptr;

void watparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (watparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(watparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<WatParserStaticData>(
    std::vector<std::string>{
      "value", "name", "null_opt", "heap_type", "ref_type", "val_type", 
      "global_type", "storage_type", "field_type", "struct_type", "array_type", 
      "func_type", "str_type", "sub_type", "table_type", "memory_type", 
      "type_use", "nat32", "num", "var_", "bind_var", "instr_list", "instr", 
      "plain_instr", "select_instr_instr_list", "call_instr_instr_list", 
      "call_instr_type_instr_list", "block_instr", "block", "block_param_body", 
      "expr", "expr1", "select_expr_results", "call_expr_type", "call_expr_params", 
      "call_expr_results", "if_block", "if_block_result_body", "const_expr", 
      "func_", "func_fields", "func_fields_import", "func_fields_import_result", 
      "func_fields_body", "func_result_body", "func_body", "table_use", 
      "memory_use", "offset", "elem_kind", "elem_expr", "elem_list", "elem", 
      "table", "table_fields", "data", "memory", "memory_fields", "sglobal", 
      "global_fields", "import_desc", "simport", "inline_import", "export_desc", 
      "export_", "inline_export", "type_def", "rec_type", "type_", "start_", 
      "module_field", "module_", "inline_module", "script_module", "action_", 
      "assertion", "cmd", "shared_cmd_list", "meta", "literal_num", "literal_vec", 
      "literal_ref", "literal", "literal_list", "numpat", "result", "script", 
      "module"
    },
    std::vector<std::string>{
      "", "'('", "')'", "", "", "", "", "", "", "", "", "", "", "'any'", 
      "'anyref'", "'none'", "'nullref'", "'eq'", "'eqref'", "'i31'", "'i31ref'", 
      "'structref'", "'arrayref'", "'nofunc'", "'funcref'", "'mut'", "'shared'", 
      "'nullfuncref'", "'extern'", "'noextern'", "'externref'", "'nullexternref'", 
      "'ref'", "'null'", "'array'", "'struct'", "'field'", "'sub'", "'final'", 
      "'rec'", "'ref.null'", "'ref.func'", "'ref.struct'", "'ref.array'", 
      "'ref.host'", "'ref.extern'", "'ref.is_null'", "'ref.as_non_null'", 
      "'ref.test'", "'ref.cast'", "'ref.eq'", "'ref.i31'", "", "", "", "'struct.set'", 
      "", "'array.new_fixed'", "'array.new_elem'", "'array.new_data'", "", 
      "'array.set'", "'array.len'", "'array.copy'", "'array.fill'", "'array.init_data'", 
      "'array.init_elem'", "", "'memory.atomic_notify'", "", "'atomic.fence'", 
      "", "", "", "", "'nop'", "'unreachable'", "'drop'", "'block'", "'loop'", 
      "'end'", "'br'", "'br_if'", "'br_table'", "'return'", "'if'", "'then'", 
      "'else'", "'select'", "'call'", "'call_indirect'", "'call_ref'", "'return_call'", 
      "'return_call_ref'", "'return_call_indirect'", "", "", "'local.get'", 
      "'local.set'", "'local.tee'", "'global.get'", "'global.set'", "'table_get'", 
      "'table_set'", "'table_size'", "'table_grow'", "'table_fill'", "'table_copy'", 
      "'table_init'", "'data.drop'", "'elem.drop'", "", "", "", "", "", 
      "", "", "", "", "", "'v128.store'", "", "", "", "", "", "", "", "", 
      "'i8x16.shuffle'", "", "", "", "'memory.size'", "'memory.grow'", "'memory.fill'", 
      "'memory.copy'", "'memory.init'", "'type'", "'func'", "'start'", "'param'", 
      "'result'", "'local'", "'global'", "'table'", "'memory'", "'elem'", 
      "'data'", "'offset'", "'import'", "'export'", "'declare'", "'item'", 
      "'module'", "'binary'", "'quote'", "'either'", "'thread'", "'wait'", 
      "'script'", "'register'", "'invoke'", "'get'", "'assert_malformed'", 
      "'assert_invalid'", "'assert_unlinkable'", "'assert_return'", "'assert_trap'", 
      "'assert_exhaustion'", "'input'", "'output'"
    },
    std::vector<std::string>{
      "", "LPAR", "RPAR", "NAT", "INT", "FLOAT", "STRING_", "NUM_TYPE", 
      "PACK_TYPE", "VEC_TYPE", "VEC_SHAPE", "CONST", "VEC_CONST", "ANY", 
      "ANYREF", "NONE", "NULLREF", "EQ", "EQREF", "I31", "I31REF", "STRUCTREF", 
      "ARRAYREF", "NOFUNC", "FUNCREF", "MUT", "SHARED", "NULLFUNCREF", "EXTERN", 
      "NOEXTERN", "EXTERNREF", "NULLEXTERNREF", "REF", "NULL", "ARRAY", 
      "STRUCT", "FIELD", "SUB", "FINAL", "REC", "REF_NULL", "REF_FUNC", 
      "REF_STRUCT", "REF_ARRAY", "REF_HOST", "REF_EXTERN", "REF_IS_NULL", 
      "REF_AS_NON_NULL", "REF_TEST", "REF_CAST", "REF_EQ", "REF_I31", "I31_GET", 
      "STRUCT_NEW", "STRUCT_GET", "STRUCT_SET", "ARRAY_NEW", "ARRAY_NEW_FIXED", 
      "ARRAY_NEW_ELEM", "ARRAY_NEW_DATA", "ARRAY_GET", "ARRAY_SET", "ARRAY_LEN", 
      "ARRAY_COPY", "ARRAY_FILL", "ARRAY_INIT_DATA", "ARRAY_INIT_ELEM", 
      "EXTERN_CONVERT", "MEMORY_ATOMIC_NOTIFY", "MEMORY_ATOMIC_WAIT", "ATOMIC_FENCE", 
      "ATOMIC_LOAD", "ATOMIC_STORE", "ATOMIC_RMW", "ATOMIC_RMW_CMPXCHG", 
      "NOP", "UNREACHABLE", "DROP", "BLOCK", "LOOP", "END", "BR", "BR_IF", 
      "BR_TABLE", "RETURN", "IF", "THEN", "ELSE", "SELECT", "CALL", "CALL_INDIRECT", 
      "CALL_REF", "RETURN_CALL", "RETURN_CALL_REF", "RETURN_CALL_INDIRECT", 
      "BR_ON_NULL", "BR_ON_CAST", "LOCAL_GET", "LOCAL_SET", "LOCAL_TEE", 
      "GLOBAL_GET", "GLOBAL_SET", "TABLE_GET", "TABLE_SET", "TABLE_SIZE", 
      "TABLE_GROW", "TABLE_FILL", "TABLE_COPY", "TABLE_INIT", "DATA_DROP", 
      "ELEM_DROP", "LOAD", "STORE", "OFFSET_EQ_NAT", "ALIGN_EQ_NAT", "UNARY", 
      "BINARY", "TEST", "COMPARE", "CONVERT", "VEC_LOAD", "VEC_STORE", "VEC_LOAD_LANE", 
      "VEC_STORE_LANE", "VEC_UNARY", "VEC_BINARY", "VEC_TERNARY", "VEC_TEST", 
      "VEC_BITMASK", "VEC_SHIFT", "VEC_SHUFFLE", "VEC_SPLAT", "VEC_EXTRACT", 
      "VEC_REPLACE", "MEMORY_SIZE", "MEMORY_GROW", "MEMORY_FILL", "MEMORY_COPY", 
      "MEMORY_INIT", "TYPE", "FUNC", "START_", "PARAM", "RESULT", "LOCAL", 
      "GLOBAL", "TABLE", "MEMORY", "ELEM", "DATA", "OFFSET", "IMPORT", "EXPORT", 
      "DECLARE", "ITEM", "MODULE", "BIN", "QUOTE", "EITHER", "THREAD", "WAIT", 
      "SCRIPT", "REGISTER", "INVOKE", "GET", "ASSERT_MALFORMED", "ASSERT_INVALID", 
      "ASSERT_UNLINKABLE", "ASSERT_RETURN", "ASSERT_TRAP", "ASSERT_EXHAUSTION", 
      "INPUT", "OUTPUT", "NAN_", "VAR", "SPACE", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,176,1600,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,1,0,1,0,1,1,1,1,1,2,3,2,182,8,2,1,
  	3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,3,3,195,8,3,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,213,8,4,1,5,1,5,1,
  	5,3,5,218,8,5,1,6,1,6,1,6,1,6,1,6,1,6,3,6,226,8,6,1,7,1,7,3,7,230,8,7,
  	1,8,1,8,1,8,1,8,1,8,1,8,3,8,238,8,8,1,9,1,9,1,9,5,9,243,8,9,10,9,12,9,
  	246,9,9,1,9,1,9,1,9,3,9,251,8,9,1,9,5,9,254,8,9,10,9,12,9,257,9,9,1,10,
  	1,10,1,11,1,11,1,11,5,11,264,8,11,10,11,12,11,267,9,11,1,11,1,11,5,11,
  	271,8,11,10,11,12,11,274,9,11,1,11,1,11,1,11,1,11,3,11,280,8,11,1,11,
  	5,11,283,8,11,10,11,12,11,286,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,
  	3,12,295,8,12,1,12,1,12,1,13,1,13,1,13,1,13,3,13,303,8,13,1,13,5,13,306,
  	8,13,10,13,12,13,309,9,13,1,13,1,13,1,13,3,13,314,8,13,1,14,1,14,3,14,
  	318,8,14,1,14,1,14,1,15,1,15,3,15,324,8,15,1,15,3,15,327,8,15,1,16,1,
  	16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,5,21,343,
  	8,21,10,21,12,21,346,9,21,1,21,3,21,349,8,21,1,21,3,21,352,8,21,3,21,
  	354,8,21,1,22,1,22,1,22,3,22,359,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,4,23,371,8,23,11,23,12,23,372,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,3,23,403,8,23,1,23,1,
  	23,3,23,407,8,23,1,23,1,23,3,23,411,8,23,1,23,1,23,3,23,415,8,23,1,23,
  	1,23,3,23,419,8,23,1,23,1,23,1,23,1,23,3,23,425,8,23,1,23,1,23,1,23,3,
  	23,430,8,23,1,23,1,23,1,23,1,23,3,23,436,8,23,1,23,3,23,439,8,23,1,23,
  	1,23,3,23,443,8,23,1,23,3,23,446,8,23,1,23,1,23,3,23,450,8,23,1,23,3,
  	23,453,8,23,1,23,1,23,3,23,457,8,23,1,23,3,23,460,8,23,1,23,1,23,3,23,
  	464,8,23,1,23,3,23,467,8,23,1,23,1,23,1,23,3,23,472,8,23,1,23,3,23,475,
  	8,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,5,23,551,8,23,10,23,12,23,554,9,23,1,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,5,23,564,8,23,10,23,12,23,567,9,23,1,23,
  	1,23,1,23,1,23,1,23,1,23,1,23,3,23,576,8,23,1,23,3,23,579,8,23,1,23,1,
  	23,3,23,583,8,23,1,23,3,23,586,8,23,1,23,1,23,1,23,3,23,591,8,23,1,23,
  	3,23,594,8,23,1,23,1,23,3,23,598,8,23,1,23,3,23,601,8,23,1,23,1,23,3,
  	23,605,8,23,1,23,3,23,608,8,23,1,23,1,23,3,23,612,8,23,1,23,3,23,615,
  	8,23,3,23,617,8,23,1,24,1,24,1,24,1,24,5,24,623,8,24,10,24,12,24,626,
  	9,24,1,24,5,24,629,8,24,10,24,12,24,632,9,24,1,24,1,24,1,25,1,25,3,25,
  	638,8,25,1,25,1,25,1,25,3,25,643,8,25,1,25,3,25,646,8,25,1,26,3,26,649,
  	8,26,1,26,1,26,1,26,5,26,654,8,26,10,26,12,26,657,9,26,1,26,5,26,660,
  	8,26,10,26,12,26,663,9,26,1,26,1,26,1,26,5,26,668,8,26,10,26,12,26,671,
  	9,26,1,26,5,26,674,8,26,10,26,12,26,677,9,26,1,26,1,26,1,27,1,27,3,27,
  	683,8,27,1,27,1,27,1,27,3,27,688,8,27,1,27,1,27,3,27,692,8,27,1,27,1,
  	27,1,27,3,27,697,8,27,1,27,3,27,700,8,27,1,27,1,27,3,27,704,8,27,3,27,
  	706,8,27,1,28,3,28,709,8,28,1,28,1,28,1,29,1,29,1,29,5,29,716,8,29,10,
  	29,12,29,719,9,29,1,29,5,29,722,8,29,10,29,12,29,725,9,29,1,29,1,29,1,
  	29,5,29,730,8,29,10,29,12,29,733,9,29,1,29,5,29,736,8,29,10,29,12,29,
  	739,9,29,1,29,1,29,1,30,1,30,1,30,1,30,1,31,1,31,5,31,749,8,31,10,31,
  	12,31,752,9,31,1,31,1,31,1,31,1,31,3,31,758,8,31,1,31,1,31,1,31,3,31,
  	763,8,31,1,31,1,31,1,31,3,31,768,8,31,1,31,1,31,1,31,3,31,773,8,31,1,
  	31,1,31,1,31,3,31,778,8,31,1,31,3,31,781,8,31,1,32,1,32,1,32,5,32,786,
  	8,32,10,32,12,32,789,9,32,1,32,5,32,792,8,32,10,32,12,32,795,9,32,1,32,
  	5,32,798,8,32,10,32,12,32,801,9,32,1,33,3,33,804,8,33,1,33,1,33,1,34,
  	1,34,1,34,5,34,811,8,34,10,34,12,34,814,9,34,1,34,5,34,817,8,34,10,34,
  	12,34,820,9,34,1,34,1,34,1,35,1,35,1,35,5,35,827,8,35,10,35,12,35,830,
  	9,35,1,35,5,35,833,8,35,10,35,12,35,836,9,35,1,35,5,35,839,8,35,10,35,
  	12,35,842,9,35,1,36,3,36,845,8,36,1,36,1,36,1,36,5,36,850,8,36,10,36,
  	12,36,853,9,36,1,36,5,36,856,8,36,10,36,12,36,859,9,36,1,36,1,36,1,37,
  	1,37,1,37,5,37,866,8,37,10,37,12,37,869,9,37,1,37,5,37,872,8,37,10,37,
  	12,37,875,9,37,1,37,5,37,878,8,37,10,37,12,37,881,9,37,1,37,1,37,1,37,
  	1,37,1,37,1,37,1,37,1,37,1,37,3,37,892,8,37,1,38,1,38,1,39,1,39,1,39,
  	3,39,899,8,39,1,39,1,39,1,39,1,40,3,40,905,8,40,1,40,1,40,1,40,3,40,910,
  	8,40,1,40,1,40,1,40,1,40,1,40,3,40,917,8,40,1,41,1,41,1,41,5,41,922,8,
  	41,10,41,12,41,925,9,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,5,41,934,8,
  	41,10,41,12,41,937,9,41,1,41,1,41,1,42,1,42,1,42,5,42,944,8,42,10,42,
  	12,42,947,9,42,1,42,5,42,950,8,42,10,42,12,42,953,9,42,1,43,1,43,1,43,
  	5,43,958,8,43,10,43,12,43,961,9,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,
  	5,43,970,8,43,10,43,12,43,973,9,43,1,43,1,43,1,44,1,44,1,44,5,44,980,
  	8,44,10,44,12,44,983,9,44,1,44,5,44,986,8,44,10,44,12,44,989,9,44,1,44,
  	1,44,1,45,1,45,1,45,1,45,1,45,1,45,5,45,999,8,45,10,45,12,45,1002,9,45,
  	3,45,1004,8,45,1,45,5,45,1007,8,45,10,45,12,45,1010,9,45,1,45,1,45,1,
  	46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
  	48,1,48,3,48,1030,8,48,1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,50,3,50,1040,
  	8,50,1,51,1,51,5,51,1044,8,51,10,51,12,51,1047,9,51,1,51,1,51,5,51,1051,
  	8,51,10,51,12,51,1054,9,51,3,51,1056,8,51,1,52,1,52,1,52,3,52,1061,8,
  	52,1,52,1,52,1,52,1,52,3,52,1067,8,52,1,52,3,52,1070,8,52,1,52,1,52,1,
  	52,1,52,1,52,1,52,3,52,1078,8,52,1,52,1,52,5,52,1082,8,52,10,52,12,52,
  	1085,9,52,1,52,1,52,3,52,1089,8,52,1,53,1,53,1,53,3,53,1094,8,53,1,53,
  	1,53,1,53,1,54,1,54,1,54,1,54,3,54,1103,8,54,1,54,1,54,1,54,1,54,1,54,
  	1,54,1,54,1,54,1,54,1,54,5,54,1115,8,54,10,54,12,54,1118,9,54,1,54,5,
  	54,1121,8,54,10,54,12,54,1124,9,54,3,54,1126,8,54,1,54,1,54,3,54,1130,
  	8,54,1,55,1,55,1,55,3,55,1135,8,55,1,55,1,55,1,55,5,55,1140,8,55,10,55,
  	12,55,1143,9,55,1,55,1,55,1,55,1,55,1,55,3,55,1150,8,55,1,55,3,55,1153,
  	8,55,1,55,5,55,1156,8,55,10,55,12,55,1159,9,55,1,55,3,55,1162,8,55,1,
  	56,1,56,1,56,3,56,1167,8,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,
  	57,1,57,1,57,1,57,1,57,5,57,1182,8,57,10,57,12,57,1185,9,57,1,57,3,57,
  	1188,8,57,1,58,1,58,1,58,3,58,1193,8,58,1,58,1,58,1,58,1,59,1,59,1,59,
  	1,59,1,59,1,59,1,59,1,59,1,59,3,59,1207,8,59,1,60,1,60,1,60,3,60,1212,
  	8,60,1,60,1,60,3,60,1216,8,60,1,60,1,60,1,60,1,60,1,60,3,60,1223,8,60,
  	1,60,1,60,1,60,1,60,1,60,1,60,3,60,1231,8,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,3,60,1239,8,60,1,60,1,60,1,60,3,60,1244,8,60,1,61,1,61,1,61,1,61,
  	1,61,1,61,1,61,1,62,1,62,1,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,
  	1,64,1,64,1,64,1,64,1,64,1,64,1,65,1,65,1,65,1,65,1,65,1,66,1,66,1,66,
  	3,66,1278,8,66,1,66,1,66,1,66,1,67,1,67,1,67,1,67,5,67,1287,8,67,10,67,
  	12,67,1290,9,67,1,67,3,67,1293,8,67,1,68,1,68,1,69,1,69,1,69,1,69,1,69,
  	1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,1,70,4,70,1312,8,70,11,70,
  	12,70,1313,1,71,1,71,1,71,3,71,1319,8,71,1,71,5,71,1322,8,71,10,71,12,
  	71,1325,9,71,1,71,1,71,1,72,3,72,1330,8,72,1,73,1,73,1,73,1,73,3,73,1336,
  	8,73,1,73,1,73,5,73,1340,8,73,10,73,12,73,1343,9,73,1,73,3,73,1346,8,
  	73,1,74,1,74,1,74,3,74,1351,8,74,1,74,1,74,1,74,1,74,1,74,1,74,1,74,3,
  	74,1360,8,74,1,74,1,74,1,74,3,74,1365,8,74,1,75,1,75,1,75,1,75,1,75,1,
  	75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,
  	75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,5,75,1395,8,75,10,75,12,75,
  	1398,9,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,1,75,
  	1,75,1,75,3,75,1414,8,75,1,76,1,76,1,76,1,76,1,76,1,76,1,76,3,76,1423,
  	8,76,1,76,1,76,1,76,1,76,1,76,3,76,1430,8,76,1,76,1,76,1,76,1,76,1,76,
  	1,76,3,76,1438,8,76,1,76,1,76,3,76,1442,8,76,1,77,1,77,1,77,1,77,1,77,
  	1,77,1,77,5,77,1451,8,77,10,77,12,77,1454,9,77,1,77,5,77,1457,8,77,10,
  	77,12,77,1460,9,77,1,78,1,78,1,78,3,78,1465,8,78,1,78,5,78,1468,8,78,
  	10,78,12,78,1471,9,78,1,78,1,78,1,78,1,78,3,78,1477,8,78,1,78,1,78,1,
  	78,1,78,1,78,3,78,1484,8,78,1,78,1,78,1,78,1,78,1,78,3,78,1491,8,78,1,
  	78,3,78,1494,8,78,1,79,1,79,1,79,1,79,1,79,1,80,1,80,1,80,1,80,5,80,1505,
  	8,80,10,80,12,80,1508,9,80,1,80,1,80,1,81,1,81,1,81,1,81,1,81,1,81,1,
  	81,1,81,1,81,1,81,1,81,1,81,1,81,3,81,1525,8,81,1,82,1,82,1,82,3,82,1530,
  	8,82,1,83,5,83,1533,8,83,10,83,12,83,1536,9,83,1,84,1,84,3,84,1540,8,
  	84,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,5,
  	85,1555,8,85,10,85,12,85,1558,9,85,1,85,1,85,1,85,1,85,5,85,1564,8,85,
  	10,85,12,85,1567,9,85,1,85,3,85,1570,8,85,1,86,5,86,1573,8,86,10,86,12,
  	86,1576,9,86,1,86,1,86,4,86,1580,8,86,11,86,12,86,1581,1,86,1,86,3,86,
  	1586,8,86,1,87,1,87,1,87,1,87,5,87,1592,8,87,10,87,12,87,1595,9,87,1,
  	87,3,87,1598,8,87,1,87,0,0,88,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,
  	30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,
  	76,78,80,82,84,86,88,90,92,94,96,98,100,102,104,106,108,110,112,114,116,
  	118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,
  	154,156,158,160,162,164,166,168,170,172,174,0,7,1,0,4,5,1,0,3,5,2,0,3,
  	3,174,174,1,0,78,79,2,0,140,140,145,147,1,0,156,157,4,0,32,32,40,43,45,
  	45,50,51,1856,0,176,1,0,0,0,2,178,1,0,0,0,4,181,1,0,0,0,6,194,1,0,0,0,
  	8,212,1,0,0,0,10,217,1,0,0,0,12,225,1,0,0,0,14,229,1,0,0,0,16,237,1,0,
  	0,0,18,255,1,0,0,0,20,258,1,0,0,0,22,284,1,0,0,0,24,287,1,0,0,0,26,313,
  	1,0,0,0,28,315,1,0,0,0,30,321,1,0,0,0,32,328,1,0,0,0,34,333,1,0,0,0,36,
  	335,1,0,0,0,38,337,1,0,0,0,40,339,1,0,0,0,42,344,1,0,0,0,44,358,1,0,0,
  	0,46,616,1,0,0,0,48,618,1,0,0,0,50,645,1,0,0,0,52,648,1,0,0,0,54,705,
  	1,0,0,0,56,708,1,0,0,0,58,723,1,0,0,0,60,742,1,0,0,0,62,780,1,0,0,0,64,
  	793,1,0,0,0,66,803,1,0,0,0,68,818,1,0,0,0,70,834,1,0,0,0,72,844,1,0,0,
  	0,74,873,1,0,0,0,76,893,1,0,0,0,78,895,1,0,0,0,80,916,1,0,0,0,82,935,
  	1,0,0,0,84,951,1,0,0,0,86,971,1,0,0,0,88,987,1,0,0,0,90,1008,1,0,0,0,
  	92,1013,1,0,0,0,94,1018,1,0,0,0,96,1029,1,0,0,0,98,1031,1,0,0,0,100,1039,
  	1,0,0,0,102,1055,1,0,0,0,104,1088,1,0,0,0,106,1090,1,0,0,0,108,1129,1,
  	0,0,0,110,1161,1,0,0,0,112,1163,1,0,0,0,114,1187,1,0,0,0,116,1189,1,0,
  	0,0,118,1206,1,0,0,0,120,1243,1,0,0,0,122,1245,1,0,0,0,124,1252,1,0,0,
  	0,126,1258,1,0,0,0,128,1263,1,0,0,0,130,1269,1,0,0,0,132,1274,1,0,0,0,
  	134,1292,1,0,0,0,136,1294,1,0,0,0,138,1296,1,0,0,0,140,1311,1,0,0,0,142,
  	1315,1,0,0,0,144,1329,1,0,0,0,146,1345,1,0,0,0,148,1364,1,0,0,0,150,1413,
  	1,0,0,0,152,1441,1,0,0,0,154,1452,1,0,0,0,156,1493,1,0,0,0,158,1495,1,
  	0,0,0,160,1500,1,0,0,0,162,1524,1,0,0,0,164,1529,1,0,0,0,166,1534,1,0,
  	0,0,168,1539,1,0,0,0,170,1569,1,0,0,0,172,1585,1,0,0,0,174,1597,1,0,0,
  	0,176,177,7,0,0,0,177,1,1,0,0,0,178,179,5,6,0,0,179,3,1,0,0,0,180,182,
  	5,33,0,0,181,180,1,0,0,0,181,182,1,0,0,0,182,5,1,0,0,0,183,195,5,13,0,
  	0,184,195,5,15,0,0,185,195,5,17,0,0,186,195,5,19,0,0,187,195,5,35,0,0,
  	188,195,5,34,0,0,189,195,5,140,0,0,190,195,5,23,0,0,191,195,5,28,0,0,
  	192,195,5,29,0,0,193,195,3,38,19,0,194,183,1,0,0,0,194,184,1,0,0,0,194,
  	185,1,0,0,0,194,186,1,0,0,0,194,187,1,0,0,0,194,188,1,0,0,0,194,189,1,
  	0,0,0,194,190,1,0,0,0,194,191,1,0,0,0,194,192,1,0,0,0,194,193,1,0,0,0,
  	195,7,1,0,0,0,196,213,5,24,0,0,197,213,5,30,0,0,198,199,5,1,0,0,199,200,
  	5,32,0,0,200,201,3,4,2,0,201,202,3,6,3,0,202,203,5,2,0,0,203,213,1,0,
  	0,0,204,213,5,14,0,0,205,213,5,16,0,0,206,213,5,18,0,0,207,213,5,20,0,
  	0,208,213,5,21,0,0,209,213,5,22,0,0,210,213,5,27,0,0,211,213,5,31,0,0,
  	212,196,1,0,0,0,212,197,1,0,0,0,212,198,1,0,0,0,212,204,1,0,0,0,212,205,
  	1,0,0,0,212,206,1,0,0,0,212,207,1,0,0,0,212,208,1,0,0,0,212,209,1,0,0,
  	0,212,210,1,0,0,0,212,211,1,0,0,0,213,9,1,0,0,0,214,218,5,7,0,0,215,218,
  	5,9,0,0,216,218,3,8,4,0,217,214,1,0,0,0,217,215,1,0,0,0,217,216,1,0,0,
  	0,218,11,1,0,0,0,219,226,3,10,5,0,220,221,5,1,0,0,221,222,5,25,0,0,222,
  	223,3,10,5,0,223,224,5,2,0,0,224,226,1,0,0,0,225,219,1,0,0,0,225,220,
  	1,0,0,0,226,13,1,0,0,0,227,230,3,10,5,0,228,230,5,8,0,0,229,227,1,0,0,
  	0,229,228,1,0,0,0,230,15,1,0,0,0,231,238,3,14,7,0,232,233,5,1,0,0,233,
  	234,5,25,0,0,234,235,3,14,7,0,235,236,5,2,0,0,236,238,1,0,0,0,237,231,
  	1,0,0,0,237,232,1,0,0,0,238,17,1,0,0,0,239,240,5,1,0,0,240,250,5,36,0,
  	0,241,243,3,16,8,0,242,241,1,0,0,0,243,246,1,0,0,0,244,242,1,0,0,0,244,
  	245,1,0,0,0,245,251,1,0,0,0,246,244,1,0,0,0,247,248,3,40,20,0,248,249,
  	3,16,8,0,249,251,1,0,0,0,250,244,1,0,0,0,250,247,1,0,0,0,251,252,1,0,
  	0,0,252,254,5,2,0,0,253,239,1,0,0,0,254,257,1,0,0,0,255,253,1,0,0,0,255,
  	256,1,0,0,0,256,19,1,0,0,0,257,255,1,0,0,0,258,259,3,16,8,0,259,21,1,
  	0,0,0,260,279,5,1,0,0,261,265,5,143,0,0,262,264,3,10,5,0,263,262,1,0,
  	0,0,264,267,1,0,0,0,265,263,1,0,0,0,265,266,1,0,0,0,266,280,1,0,0,0,267,
  	265,1,0,0,0,268,272,5,142,0,0,269,271,3,10,5,0,270,269,1,0,0,0,271,274,
  	1,0,0,0,272,270,1,0,0,0,272,273,1,0,0,0,273,280,1,0,0,0,274,272,1,0,0,
  	0,275,276,5,142,0,0,276,277,3,40,20,0,277,278,3,10,5,0,278,280,1,0,0,
  	0,279,261,1,0,0,0,279,268,1,0,0,0,279,275,1,0,0,0,280,281,1,0,0,0,281,
  	283,5,2,0,0,282,260,1,0,0,0,283,286,1,0,0,0,284,282,1,0,0,0,284,285,1,
  	0,0,0,285,23,1,0,0,0,286,284,1,0,0,0,287,294,5,1,0,0,288,289,5,35,0,0,
  	289,295,3,18,9,0,290,291,5,34,0,0,291,295,3,20,10,0,292,293,5,140,0,0,
  	293,295,3,22,11,0,294,288,1,0,0,0,294,290,1,0,0,0,294,292,1,0,0,0,295,
  	296,1,0,0,0,296,297,5,2,0,0,297,25,1,0,0,0,298,314,3,24,12,0,299,300,
  	5,1,0,0,300,302,5,37,0,0,301,303,5,38,0,0,302,301,1,0,0,0,302,303,1,0,
  	0,0,303,307,1,0,0,0,304,306,3,38,19,0,305,304,1,0,0,0,306,309,1,0,0,0,
  	307,305,1,0,0,0,307,308,1,0,0,0,308,310,1,0,0,0,309,307,1,0,0,0,310,311,
  	3,24,12,0,311,312,5,2,0,0,312,314,1,0,0,0,313,298,1,0,0,0,313,299,1,0,
  	0,0,314,27,1,0,0,0,315,317,5,3,0,0,316,318,5,3,0,0,317,316,1,0,0,0,317,
  	318,1,0,0,0,318,319,1,0,0,0,319,320,3,8,4,0,320,29,1,0,0,0,321,323,5,
  	3,0,0,322,324,5,3,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,326,1,0,0,0,
  	325,327,5,26,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,31,1,0,0,0,328,329,
  	5,1,0,0,329,330,5,139,0,0,330,331,3,38,19,0,331,332,5,2,0,0,332,33,1,
  	0,0,0,333,334,5,3,0,0,334,35,1,0,0,0,335,336,7,1,0,0,336,37,1,0,0,0,337,
  	338,7,2,0,0,338,39,1,0,0,0,339,340,5,174,0,0,340,41,1,0,0,0,341,343,3,
  	44,22,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,1,0,0,0,344,345,1,0,0,
  	0,345,353,1,0,0,0,346,344,1,0,0,0,347,349,3,50,25,0,348,347,1,0,0,0,348,
  	349,1,0,0,0,349,354,1,0,0,0,350,352,3,48,24,0,351,350,1,0,0,0,351,352,
  	1,0,0,0,352,354,1,0,0,0,353,348,1,0,0,0,353,351,1,0,0,0,354,43,1,0,0,
  	0,355,359,3,46,23,0,356,359,3,54,27,0,357,359,3,60,30,0,358,355,1,0,0,
  	0,358,356,1,0,0,0,358,357,1,0,0,0,359,45,1,0,0,0,360,617,5,76,0,0,361,
  	617,5,75,0,0,362,617,5,77,0,0,363,617,5,88,0,0,364,365,5,81,0,0,365,617,
  	3,38,19,0,366,367,5,82,0,0,367,617,3,38,19,0,368,370,5,83,0,0,369,371,
  	3,38,19,0,370,369,1,0,0,0,371,372,1,0,0,0,372,370,1,0,0,0,372,373,1,0,
  	0,0,373,617,1,0,0,0,374,375,5,95,0,0,375,617,3,38,19,0,376,377,5,96,0,
  	0,377,378,3,38,19,0,378,379,3,8,4,0,379,380,3,8,4,0,380,617,1,0,0,0,381,
  	617,5,84,0,0,382,383,5,89,0,0,383,617,3,38,19,0,384,385,5,91,0,0,385,
  	617,3,38,19,0,386,387,5,92,0,0,387,617,3,38,19,0,388,389,5,93,0,0,389,
  	617,3,38,19,0,390,391,5,97,0,0,391,617,3,38,19,0,392,393,5,98,0,0,393,
  	617,3,38,19,0,394,395,5,99,0,0,395,617,3,38,19,0,396,397,5,100,0,0,397,
  	617,3,38,19,0,398,399,5,101,0,0,399,617,3,38,19,0,400,402,5,102,0,0,401,
  	403,3,38,19,0,402,401,1,0,0,0,402,403,1,0,0,0,403,617,1,0,0,0,404,406,
  	5,103,0,0,405,407,3,38,19,0,406,405,1,0,0,0,406,407,1,0,0,0,407,617,1,
  	0,0,0,408,410,5,104,0,0,409,411,3,38,19,0,410,409,1,0,0,0,410,411,1,0,
  	0,0,411,617,1,0,0,0,412,414,5,105,0,0,413,415,3,38,19,0,414,413,1,0,0,
  	0,414,415,1,0,0,0,415,617,1,0,0,0,416,418,5,106,0,0,417,419,3,38,19,0,
  	418,417,1,0,0,0,418,419,1,0,0,0,419,617,1,0,0,0,420,424,5,107,0,0,421,
  	422,3,38,19,0,422,423,3,38,19,0,423,425,1,0,0,0,424,421,1,0,0,0,424,425,
  	1,0,0,0,425,617,1,0,0,0,426,427,5,108,0,0,427,429,3,38,19,0,428,430,3,
  	38,19,0,429,428,1,0,0,0,429,430,1,0,0,0,430,617,1,0,0,0,431,432,5,110,
  	0,0,432,617,3,38,19,0,433,435,5,111,0,0,434,436,5,113,0,0,435,434,1,0,
  	0,0,435,436,1,0,0,0,436,438,1,0,0,0,437,439,5,114,0,0,438,437,1,0,0,0,
  	438,439,1,0,0,0,439,617,1,0,0,0,440,442,5,112,0,0,441,443,5,113,0,0,442,
  	441,1,0,0,0,442,443,1,0,0,0,443,445,1,0,0,0,444,446,5,114,0,0,445,444,
  	1,0,0,0,445,446,1,0,0,0,446,617,1,0,0,0,447,449,5,120,0,0,448,450,5,113,
  	0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,452,1,0,0,0,451,453,5,114,0,0,
  	452,451,1,0,0,0,452,453,1,0,0,0,453,617,1,0,0,0,454,456,5,121,0,0,455,
  	457,5,113,0,0,456,455,1,0,0,0,456,457,1,0,0,0,457,459,1,0,0,0,458,460,
  	5,114,0,0,459,458,1,0,0,0,459,460,1,0,0,0,460,617,1,0,0,0,461,463,5,122,
  	0,0,462,464,5,113,0,0,463,462,1,0,0,0,463,464,1,0,0,0,464,466,1,0,0,0,
  	465,467,5,114,0,0,466,465,1,0,0,0,466,467,1,0,0,0,467,468,1,0,0,0,468,
  	617,5,3,0,0,469,471,5,123,0,0,470,472,5,113,0,0,471,470,1,0,0,0,471,472,
  	1,0,0,0,472,474,1,0,0,0,473,475,5,114,0,0,474,473,1,0,0,0,474,475,1,0,
  	0,0,475,476,1,0,0,0,476,617,5,3,0,0,477,617,5,134,0,0,478,617,5,135,0,
  	0,479,480,5,11,0,0,480,617,3,36,18,0,481,617,5,136,0,0,482,617,5,137,
  	0,0,483,484,5,138,0,0,484,617,3,38,19,0,485,486,5,109,0,0,486,617,3,38,
  	19,0,487,488,5,40,0,0,488,617,3,6,3,0,489,617,5,46,0,0,490,491,5,41,0,
  	0,491,617,3,38,19,0,492,617,5,47,0,0,493,617,5,48,0,0,494,617,5,49,0,
  	0,495,617,5,50,0,0,496,617,5,51,0,0,497,617,5,52,0,0,498,499,5,53,0,0,
  	499,617,3,38,19,0,500,501,5,54,0,0,501,502,3,38,19,0,502,503,3,38,19,
  	0,503,617,1,0,0,0,504,505,5,55,0,0,505,506,3,38,19,0,506,507,3,38,19,
  	0,507,617,1,0,0,0,508,509,5,56,0,0,509,617,3,38,19,0,510,511,5,57,0,0,
  	511,512,3,38,19,0,512,513,3,34,17,0,513,617,1,0,0,0,514,515,5,58,0,0,
  	515,516,3,38,19,0,516,517,3,38,19,0,517,617,1,0,0,0,518,519,5,59,0,0,
  	519,520,3,38,19,0,520,521,3,38,19,0,521,617,1,0,0,0,522,523,5,60,0,0,
  	523,617,3,38,19,0,524,525,5,61,0,0,525,617,3,38,19,0,526,617,5,62,0,0,
  	527,528,5,63,0,0,528,529,3,38,19,0,529,530,3,38,19,0,530,617,1,0,0,0,
  	531,532,5,64,0,0,532,617,3,38,19,0,533,534,5,65,0,0,534,535,3,38,19,0,
  	535,536,3,38,19,0,536,617,1,0,0,0,537,538,5,66,0,0,538,539,3,38,19,0,
  	539,540,3,38,19,0,540,617,1,0,0,0,541,617,5,67,0,0,542,617,5,117,0,0,
  	543,617,5,118,0,0,544,617,5,115,0,0,545,617,5,116,0,0,546,617,5,119,0,
  	0,547,548,5,12,0,0,548,552,5,10,0,0,549,551,3,36,18,0,550,549,1,0,0,0,
  	551,554,1,0,0,0,552,550,1,0,0,0,552,553,1,0,0,0,553,617,1,0,0,0,554,552,
  	1,0,0,0,555,617,5,124,0,0,556,617,5,125,0,0,557,617,5,126,0,0,558,617,
  	5,127,0,0,559,617,5,129,0,0,560,617,5,128,0,0,561,565,5,130,0,0,562,564,
  	3,36,18,0,563,562,1,0,0,0,564,567,1,0,0,0,565,563,1,0,0,0,565,566,1,0,
  	0,0,566,617,1,0,0,0,567,565,1,0,0,0,568,617,5,131,0,0,569,570,5,132,0,
  	0,570,617,5,3,0,0,571,572,5,133,0,0,572,617,5,3,0,0,573,575,5,69,0,0,
  	574,576,5,113,0,0,575,574,1,0,0,0,575,576,1,0,0,0,576,578,1,0,0,0,577,
  	579,5,114,0,0,578,577,1,0,0,0,578,579,1,0,0,0,579,617,1,0,0,0,580,582,
  	5,68,0,0,581,583,5,113,0,0,582,581,1,0,0,0,582,583,1,0,0,0,583,585,1,
  	0,0,0,584,586,5,114,0,0,585,584,1,0,0,0,585,586,1,0,0,0,586,617,1,0,0,
  	0,587,617,5,70,0,0,588,590,5,71,0,0,589,591,5,113,0,0,590,589,1,0,0,0,
  	590,591,1,0,0,0,591,593,1,0,0,0,592,594,5,114,0,0,593,592,1,0,0,0,593,
  	594,1,0,0,0,594,617,1,0,0,0,595,597,5,72,0,0,596,598,5,113,0,0,597,596,
  	1,0,0,0,597,598,1,0,0,0,598,600,1,0,0,0,599,601,5,114,0,0,600,599,1,0,
  	0,0,600,601,1,0,0,0,601,617,1,0,0,0,602,604,5,73,0,0,603,605,5,113,0,
  	0,604,603,1,0,0,0,604,605,1,0,0,0,605,607,1,0,0,0,606,608,5,114,0,0,607,
  	606,1,0,0,0,607,608,1,0,0,0,608,617,1,0,0,0,609,611,5,74,0,0,610,612,
  	5,113,0,0,611,610,1,0,0,0,611,612,1,0,0,0,612,614,1,0,0,0,613,615,5,114,
  	0,0,614,613,1,0,0,0,614,615,1,0,0,0,615,617,1,0,0,0,616,360,1,0,0,0,616,
  	361,1,0,0,0,616,362,1,0,0,0,616,363,1,0,0,0,616,364,1,0,0,0,616,366,1,
  	0,0,0,616,368,1,0,0,0,616,374,1,0,0,0,616,376,1,0,0,0,616,381,1,0,0,0,
  	616,382,1,0,0,0,616,384,1,0,0,0,616,386,1,0,0,0,616,388,1,0,0,0,616,390,
  	1,0,0,0,616,392,1,0,0,0,616,394,1,0,0,0,616,396,1,0,0,0,616,398,1,0,0,
  	0,616,400,1,0,0,0,616,404,1,0,0,0,616,408,1,0,0,0,616,412,1,0,0,0,616,
  	416,1,0,0,0,616,420,1,0,0,0,616,426,1,0,0,0,616,431,1,0,0,0,616,433,1,
  	0,0,0,616,440,1,0,0,0,616,447,1,0,0,0,616,454,1,0,0,0,616,461,1,0,0,0,
  	616,469,1,0,0,0,616,477,1,0,0,0,616,478,1,0,0,0,616,479,1,0,0,0,616,481,
  	1,0,0,0,616,482,1,0,0,0,616,483,1,0,0,0,616,485,1,0,0,0,616,487,1,0,0,
  	0,616,489,1,0,0,0,616,490,1,0,0,0,616,492,1,0,0,0,616,493,1,0,0,0,616,
  	494,1,0,0,0,616,495,1,0,0,0,616,496,1,0,0,0,616,497,1,0,0,0,616,498,1,
  	0,0,0,616,500,1,0,0,0,616,504,1,0,0,0,616,508,1,0,0,0,616,510,1,0,0,0,
  	616,514,1,0,0,0,616,518,1,0,0,0,616,522,1,0,0,0,616,524,1,0,0,0,616,526,
  	1,0,0,0,616,527,1,0,0,0,616,531,1,0,0,0,616,533,1,0,0,0,616,537,1,0,0,
  	0,616,541,1,0,0,0,616,542,1,0,0,0,616,543,1,0,0,0,616,544,1,0,0,0,616,
  	545,1,0,0,0,616,546,1,0,0,0,616,547,1,0,0,0,616,555,1,0,0,0,616,556,1,
  	0,0,0,616,557,1,0,0,0,616,558,1,0,0,0,616,559,1,0,0,0,616,560,1,0,0,0,
  	616,561,1,0,0,0,616,568,1,0,0,0,616,569,1,0,0,0,616,571,1,0,0,0,616,573,
  	1,0,0,0,616,580,1,0,0,0,616,587,1,0,0,0,616,588,1,0,0,0,616,595,1,0,0,
  	0,616,602,1,0,0,0,616,609,1,0,0,0,617,47,1,0,0,0,618,630,5,88,0,0,619,
  	620,5,1,0,0,620,624,5,143,0,0,621,623,3,10,5,0,622,621,1,0,0,0,623,626,
  	1,0,0,0,624,622,1,0,0,0,624,625,1,0,0,0,625,627,1,0,0,0,626,624,1,0,0,
  	0,627,629,5,2,0,0,628,619,1,0,0,0,629,632,1,0,0,0,630,628,1,0,0,0,630,
  	631,1,0,0,0,631,633,1,0,0,0,632,630,1,0,0,0,633,634,3,42,21,0,634,49,
  	1,0,0,0,635,637,5,90,0,0,636,638,3,38,19,0,637,636,1,0,0,0,637,638,1,
  	0,0,0,638,639,1,0,0,0,639,646,3,52,26,0,640,642,5,94,0,0,641,643,3,38,
  	19,0,642,641,1,0,0,0,642,643,1,0,0,0,643,644,1,0,0,0,644,646,3,52,26,
  	0,645,635,1,0,0,0,645,640,1,0,0,0,646,51,1,0,0,0,647,649,3,32,16,0,648,
  	647,1,0,0,0,648,649,1,0,0,0,649,661,1,0,0,0,650,651,5,1,0,0,651,655,5,
  	142,0,0,652,654,3,10,5,0,653,652,1,0,0,0,654,657,1,0,0,0,655,653,1,0,
  	0,0,655,656,1,0,0,0,656,658,1,0,0,0,657,655,1,0,0,0,658,660,5,2,0,0,659,
  	650,1,0,0,0,660,663,1,0,0,0,661,659,1,0,0,0,661,662,1,0,0,0,662,675,1,
  	0,0,0,663,661,1,0,0,0,664,665,5,1,0,0,665,669,5,143,0,0,666,668,3,10,
  	5,0,667,666,1,0,0,0,668,671,1,0,0,0,669,667,1,0,0,0,669,670,1,0,0,0,670,
  	672,1,0,0,0,671,669,1,0,0,0,672,674,5,2,0,0,673,664,1,0,0,0,674,677,1,
  	0,0,0,675,673,1,0,0,0,675,676,1,0,0,0,676,678,1,0,0,0,677,675,1,0,0,0,
  	678,679,3,42,21,0,679,53,1,0,0,0,680,682,7,3,0,0,681,683,3,40,20,0,682,
  	681,1,0,0,0,682,683,1,0,0,0,683,684,1,0,0,0,684,685,3,56,28,0,685,687,
  	5,80,0,0,686,688,3,40,20,0,687,686,1,0,0,0,687,688,1,0,0,0,688,706,1,
  	0,0,0,689,691,5,85,0,0,690,692,3,40,20,0,691,690,1,0,0,0,691,692,1,0,
  	0,0,692,693,1,0,0,0,693,699,3,56,28,0,694,696,5,87,0,0,695,697,3,40,20,
  	0,696,695,1,0,0,0,696,697,1,0,0,0,697,698,1,0,0,0,698,700,3,42,21,0,699,
  	694,1,0,0,0,699,700,1,0,0,0,700,701,1,0,0,0,701,703,5,80,0,0,702,704,
  	3,40,20,0,703,702,1,0,0,0,703,704,1,0,0,0,704,706,1,0,0,0,705,680,1,0,
  	0,0,705,689,1,0,0,0,706,55,1,0,0,0,707,709,3,32,16,0,708,707,1,0,0,0,
  	708,709,1,0,0,0,709,710,1,0,0,0,710,711,3,58,29,0,711,57,1,0,0,0,712,
  	713,5,1,0,0,713,717,5,142,0,0,714,716,3,10,5,0,715,714,1,0,0,0,716,719,
  	1,0,0,0,717,715,1,0,0,0,717,718,1,0,0,0,718,720,1,0,0,0,719,717,1,0,0,
  	0,720,722,5,2,0,0,721,712,1,0,0,0,722,725,1,0,0,0,723,721,1,0,0,0,723,
  	724,1,0,0,0,724,737,1,0,0,0,725,723,1,0,0,0,726,727,5,1,0,0,727,731,5,
  	143,0,0,728,730,3,10,5,0,729,728,1,0,0,0,730,733,1,0,0,0,731,729,1,0,
  	0,0,731,732,1,0,0,0,732,734,1,0,0,0,733,731,1,0,0,0,734,736,5,2,0,0,735,
  	726,1,0,0,0,736,739,1,0,0,0,737,735,1,0,0,0,737,738,1,0,0,0,738,740,1,
  	0,0,0,739,737,1,0,0,0,740,741,3,42,21,0,741,59,1,0,0,0,742,743,5,1,0,
  	0,743,744,3,62,31,0,744,745,5,2,0,0,745,61,1,0,0,0,746,750,3,46,23,0,
  	747,749,3,60,30,0,748,747,1,0,0,0,749,752,1,0,0,0,750,748,1,0,0,0,750,
  	751,1,0,0,0,751,781,1,0,0,0,752,750,1,0,0,0,753,754,5,88,0,0,754,781,
  	3,64,32,0,755,757,5,90,0,0,756,758,3,38,19,0,757,756,1,0,0,0,757,758,
  	1,0,0,0,758,759,1,0,0,0,759,781,3,66,33,0,760,762,5,94,0,0,761,763,3,
  	38,19,0,762,761,1,0,0,0,762,763,1,0,0,0,763,764,1,0,0,0,764,781,3,66,
  	33,0,765,767,5,78,0,0,766,768,3,40,20,0,767,766,1,0,0,0,767,768,1,0,0,
  	0,768,769,1,0,0,0,769,781,3,56,28,0,770,772,5,79,0,0,771,773,3,40,20,
  	0,772,771,1,0,0,0,772,773,1,0,0,0,773,774,1,0,0,0,774,781,3,56,28,0,775,
  	777,5,85,0,0,776,778,3,40,20,0,777,776,1,0,0,0,777,778,1,0,0,0,778,779,
  	1,0,0,0,779,781,3,72,36,0,780,746,1,0,0,0,780,753,1,0,0,0,780,755,1,0,
  	0,0,780,760,1,0,0,0,780,765,1,0,0,0,780,770,1,0,0,0,780,775,1,0,0,0,781,
  	63,1,0,0,0,782,783,5,1,0,0,783,787,5,143,0,0,784,786,3,10,5,0,785,784,
  	1,0,0,0,786,789,1,0,0,0,787,785,1,0,0,0,787,788,1,0,0,0,788,790,1,0,0,
  	0,789,787,1,0,0,0,790,792,5,2,0,0,791,782,1,0,0,0,792,795,1,0,0,0,793,
  	791,1,0,0,0,793,794,1,0,0,0,794,799,1,0,0,0,795,793,1,0,0,0,796,798,3,
  	60,30,0,797,796,1,0,0,0,798,801,1,0,0,0,799,797,1,0,0,0,799,800,1,0,0,
  	0,800,65,1,0,0,0,801,799,1,0,0,0,802,804,3,32,16,0,803,802,1,0,0,0,803,
  	804,1,0,0,0,804,805,1,0,0,0,805,806,3,68,34,0,806,67,1,0,0,0,807,808,
  	5,1,0,0,808,812,5,142,0,0,809,811,3,10,5,0,810,809,1,0,0,0,811,814,1,
  	0,0,0,812,810,1,0,0,0,812,813,1,0,0,0,813,815,1,0,0,0,814,812,1,0,0,0,
  	815,817,5,2,0,0,816,807,1,0,0,0,817,820,1,0,0,0,818,816,1,0,0,0,818,819,
  	1,0,0,0,819,821,1,0,0,0,820,818,1,0,0,0,821,822,3,70,35,0,822,69,1,0,
  	0,0,823,824,5,1,0,0,824,828,5,143,0,0,825,827,3,10,5,0,826,825,1,0,0,
  	0,827,830,1,0,0,0,828,826,1,0,0,0,828,829,1,0,0,0,829,831,1,0,0,0,830,
  	828,1,0,0,0,831,833,5,2,0,0,832,823,1,0,0,0,833,836,1,0,0,0,834,832,1,
  	0,0,0,834,835,1,0,0,0,835,840,1,0,0,0,836,834,1,0,0,0,837,839,3,60,30,
  	0,838,837,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,0,841,
  	71,1,0,0,0,842,840,1,0,0,0,843,845,3,32,16,0,844,843,1,0,0,0,844,845,
  	1,0,0,0,845,857,1,0,0,0,846,847,5,1,0,0,847,851,5,142,0,0,848,850,3,10,
  	5,0,849,848,1,0,0,0,850,853,1,0,0,0,851,849,1,0,0,0,851,852,1,0,0,0,852,
  	854,1,0,0,0,853,851,1,0,0,0,854,856,5,2,0,0,855,846,1,0,0,0,856,859,1,
  	0,0,0,857,855,1,0,0,0,857,858,1,0,0,0,858,860,1,0,0,0,859,857,1,0,0,0,
  	860,861,3,74,37,0,861,73,1,0,0,0,862,863,5,1,0,0,863,867,5,143,0,0,864,
  	866,3,10,5,0,865,864,1,0,0,0,866,869,1,0,0,0,867,865,1,0,0,0,867,868,
  	1,0,0,0,868,870,1,0,0,0,869,867,1,0,0,0,870,872,5,2,0,0,871,862,1,0,0,
  	0,872,875,1,0,0,0,873,871,1,0,0,0,873,874,1,0,0,0,874,879,1,0,0,0,875,
  	873,1,0,0,0,876,878,3,60,30,0,877,876,1,0,0,0,878,881,1,0,0,0,879,877,
  	1,0,0,0,879,880,1,0,0,0,880,882,1,0,0,0,881,879,1,0,0,0,882,883,5,1,0,
  	0,883,884,5,86,0,0,884,885,3,42,21,0,885,891,5,2,0,0,886,887,5,1,0,0,
  	887,888,5,87,0,0,888,889,3,42,21,0,889,890,5,2,0,0,890,892,1,0,0,0,891,
  	886,1,0,0,0,891,892,1,0,0,0,892,75,1,0,0,0,893,894,3,42,21,0,894,77,1,
  	0,0,0,895,896,5,1,0,0,896,898,5,140,0,0,897,899,3,40,20,0,898,897,1,0,
  	0,0,898,899,1,0,0,0,899,900,1,0,0,0,900,901,3,80,40,0,901,902,5,2,0,0,
  	902,79,1,0,0,0,903,905,3,32,16,0,904,903,1,0,0,0,904,905,1,0,0,0,905,
  	906,1,0,0,0,906,917,3,86,43,0,907,909,3,124,62,0,908,910,3,32,16,0,909,
  	908,1,0,0,0,909,910,1,0,0,0,910,911,1,0,0,0,911,912,3,82,41,0,912,917,
  	1,0,0,0,913,914,3,130,65,0,914,915,3,80,40,0,915,917,1,0,0,0,916,904,
  	1,0,0,0,916,907,1,0,0,0,916,913,1,0,0,0,917,81,1,0,0,0,918,919,5,1,0,
  	0,919,923,5,142,0,0,920,922,3,10,5,0,921,920,1,0,0,0,922,925,1,0,0,0,
  	923,921,1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,923,1,0,0,0,926,934,
  	5,2,0,0,927,928,5,1,0,0,928,929,5,142,0,0,929,930,3,40,20,0,930,931,3,
  	10,5,0,931,932,5,2,0,0,932,934,1,0,0,0,933,918,1,0,0,0,933,927,1,0,0,
  	0,934,937,1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,938,1,0,0,0,937,
  	935,1,0,0,0,938,939,3,84,42,0,939,83,1,0,0,0,940,941,5,1,0,0,941,945,
  	5,143,0,0,942,944,3,10,5,0,943,942,1,0,0,0,944,947,1,0,0,0,945,943,1,
  	0,0,0,945,946,1,0,0,0,946,948,1,0,0,0,947,945,1,0,0,0,948,950,5,2,0,0,
  	949,940,1,0,0,0,950,953,1,0,0,0,951,949,1,0,0,0,951,952,1,0,0,0,952,85,
  	1,0,0,0,953,951,1,0,0,0,954,955,5,1,0,0,955,959,5,142,0,0,956,958,3,10,
  	5,0,957,956,1,0,0,0,958,961,1,0,0,0,959,957,1,0,0,0,959,960,1,0,0,0,960,
  	962,1,0,0,0,961,959,1,0,0,0,962,970,5,2,0,0,963,964,5,1,0,0,964,965,5,
  	142,0,0,965,966,3,40,20,0,966,967,3,10,5,0,967,968,5,2,0,0,968,970,1,
  	0,0,0,969,954,1,0,0,0,969,963,1,0,0,0,970,973,1,0,0,0,971,969,1,0,0,0,
  	971,972,1,0,0,0,972,974,1,0,0,0,973,971,1,0,0,0,974,975,3,88,44,0,975,
  	87,1,0,0,0,976,977,5,1,0,0,977,981,5,143,0,0,978,980,3,10,5,0,979,978,
  	1,0,0,0,980,983,1,0,0,0,981,979,1,0,0,0,981,982,1,0,0,0,982,984,1,0,0,
  	0,983,981,1,0,0,0,984,986,5,2,0,0,985,976,1,0,0,0,986,989,1,0,0,0,987,
  	985,1,0,0,0,987,988,1,0,0,0,988,990,1,0,0,0,989,987,1,0,0,0,990,991,3,
  	90,45,0,991,89,1,0,0,0,992,993,5,1,0,0,993,1003,5,144,0,0,994,995,3,40,
  	20,0,995,996,3,10,5,0,996,1004,1,0,0,0,997,999,3,10,5,0,998,997,1,0,0,
  	0,999,1002,1,0,0,0,1000,998,1,0,0,0,1000,1001,1,0,0,0,1001,1004,1,0,0,
  	0,1002,1000,1,0,0,0,1003,994,1,0,0,0,1003,1000,1,0,0,0,1004,1005,1,0,
  	0,0,1005,1007,5,2,0,0,1006,992,1,0,0,0,1007,1010,1,0,0,0,1008,1006,1,
  	0,0,0,1008,1009,1,0,0,0,1009,1011,1,0,0,0,1010,1008,1,0,0,0,1011,1012,
  	3,42,21,0,1012,91,1,0,0,0,1013,1014,5,1,0,0,1014,1015,5,146,0,0,1015,
  	1016,3,38,19,0,1016,1017,5,2,0,0,1017,93,1,0,0,0,1018,1019,5,1,0,0,1019,
  	1020,5,147,0,0,1020,1021,3,38,19,0,1021,1022,5,2,0,0,1022,95,1,0,0,0,
  	1023,1024,5,1,0,0,1024,1025,5,150,0,0,1025,1026,3,76,38,0,1026,1027,5,
  	2,0,0,1027,1030,1,0,0,0,1028,1030,3,60,30,0,1029,1023,1,0,0,0,1029,1028,
  	1,0,0,0,1030,97,1,0,0,0,1031,1032,5,140,0,0,1032,99,1,0,0,0,1033,1034,
  	5,1,0,0,1034,1035,5,154,0,0,1035,1036,3,76,38,0,1036,1037,5,2,0,0,1037,
  	1040,1,0,0,0,1038,1040,3,60,30,0,1039,1033,1,0,0,0,1039,1038,1,0,0,0,
  	1040,101,1,0,0,0,1041,1045,3,98,49,0,1042,1044,3,38,19,0,1043,1042,1,
  	0,0,0,1044,1047,1,0,0,0,1045,1043,1,0,0,0,1045,1046,1,0,0,0,1046,1056,
  	1,0,0,0,1047,1045,1,0,0,0,1048,1052,3,8,4,0,1049,1051,3,100,50,0,1050,
  	1049,1,0,0,0,1051,1054,1,0,0,0,1052,1050,1,0,0,0,1052,1053,1,0,0,0,1053,
  	1056,1,0,0,0,1054,1052,1,0,0,0,1055,1041,1,0,0,0,1055,1048,1,0,0,0,1056,
  	103,1,0,0,0,1057,1058,5,1,0,0,1058,1060,5,148,0,0,1059,1061,3,40,20,0,
  	1060,1059,1,0,0,0,1060,1061,1,0,0,0,1061,1069,1,0,0,0,1062,1063,3,92,
  	46,0,1063,1064,3,96,48,0,1064,1070,1,0,0,0,1065,1067,3,96,48,0,1066,1065,
  	1,0,0,0,1066,1067,1,0,0,0,1067,1070,1,0,0,0,1068,1070,5,153,0,0,1069,
  	1062,1,0,0,0,1069,1066,1,0,0,0,1069,1068,1,0,0,0,1070,1071,1,0,0,0,1071,
  	1072,3,102,51,0,1072,1073,5,2,0,0,1073,1089,1,0,0,0,1074,1075,5,1,0,0,
  	1075,1077,5,148,0,0,1076,1078,3,40,20,0,1077,1076,1,0,0,0,1077,1078,1,
  	0,0,0,1078,1079,1,0,0,0,1079,1083,3,96,48,0,1080,1082,3,38,19,0,1081,
  	1080,1,0,0,0,1082,1085,1,0,0,0,1083,1081,1,0,0,0,1083,1084,1,0,0,0,1084,
  	1086,1,0,0,0,1085,1083,1,0,0,0,1086,1087,5,2,0,0,1087,1089,1,0,0,0,1088,
  	1057,1,0,0,0,1088,1074,1,0,0,0,1089,105,1,0,0,0,1090,1091,5,1,0,0,1091,
  	1093,5,146,0,0,1092,1094,3,40,20,0,1093,1092,1,0,0,0,1093,1094,1,0,0,
  	0,1094,1095,1,0,0,0,1095,1096,3,108,54,0,1096,1097,5,2,0,0,1097,107,1,
  	0,0,0,1098,1102,3,28,14,0,1099,1100,3,44,22,0,1100,1101,3,42,21,0,1101,
  	1103,1,0,0,0,1102,1099,1,0,0,0,1102,1103,1,0,0,0,1103,1130,1,0,0,0,1104,
  	1105,3,124,62,0,1105,1106,3,28,14,0,1106,1130,1,0,0,0,1107,1108,3,130,
  	65,0,1108,1109,3,108,54,0,1109,1130,1,0,0,0,1110,1111,3,8,4,0,1111,1112,
  	5,1,0,0,1112,1125,5,148,0,0,1113,1115,3,38,19,0,1114,1113,1,0,0,0,1115,
  	1118,1,0,0,0,1116,1114,1,0,0,0,1116,1117,1,0,0,0,1117,1126,1,0,0,0,1118,
  	1116,1,0,0,0,1119,1121,3,100,50,0,1120,1119,1,0,0,0,1121,1124,1,0,0,0,
  	1122,1120,1,0,0,0,1122,1123,1,0,0,0,1123,1126,1,0,0,0,1124,1122,1,0,0,
  	0,1125,1116,1,0,0,0,1125,1122,1,0,0,0,1126,1127,1,0,0,0,1127,1128,5,2,
  	0,0,1128,1130,1,0,0,0,1129,1098,1,0,0,0,1129,1104,1,0,0,0,1129,1107,1,
  	0,0,0,1129,1110,1,0,0,0,1130,109,1,0,0,0,1131,1132,5,1,0,0,1132,1134,
  	5,149,0,0,1133,1135,3,40,20,0,1134,1133,1,0,0,0,1134,1135,1,0,0,0,1135,
  	1136,1,0,0,0,1136,1137,3,94,47,0,1137,1141,3,96,48,0,1138,1140,5,6,0,
  	0,1139,1138,1,0,0,0,1140,1143,1,0,0,0,1141,1139,1,0,0,0,1141,1142,1,0,
  	0,0,1142,1144,1,0,0,0,1143,1141,1,0,0,0,1144,1145,5,2,0,0,1145,1162,1,
  	0,0,0,1146,1147,5,1,0,0,1147,1149,5,149,0,0,1148,1150,3,40,20,0,1149,
  	1148,1,0,0,0,1149,1150,1,0,0,0,1150,1152,1,0,0,0,1151,1153,3,96,48,0,
  	1152,1151,1,0,0,0,1152,1153,1,0,0,0,1153,1157,1,0,0,0,1154,1156,5,6,0,
  	0,1155,1154,1,0,0,0,1156,1159,1,0,0,0,1157,1155,1,0,0,0,1157,1158,1,0,
  	0,0,1158,1160,1,0,0,0,1159,1157,1,0,0,0,1160,1162,5,2,0,0,1161,1131,1,
  	0,0,0,1161,1146,1,0,0,0,1162,111,1,0,0,0,1163,1164,5,1,0,0,1164,1166,
  	5,147,0,0,1165,1167,3,40,20,0,1166,1165,1,0,0,0,1166,1167,1,0,0,0,1167,
  	1168,1,0,0,0,1168,1169,3,114,57,0,1169,1170,5,2,0,0,1170,113,1,0,0,0,
  	1171,1188,3,30,15,0,1172,1173,3,124,62,0,1173,1174,3,30,15,0,1174,1188,
  	1,0,0,0,1175,1176,3,130,65,0,1176,1177,3,114,57,0,1177,1188,1,0,0,0,1178,
  	1179,5,1,0,0,1179,1183,5,149,0,0,1180,1182,5,6,0,0,1181,1180,1,0,0,0,
  	1182,1185,1,0,0,0,1183,1181,1,0,0,0,1183,1184,1,0,0,0,1184,1186,1,0,0,
  	0,1185,1183,1,0,0,0,1186,1188,5,2,0,0,1187,1171,1,0,0,0,1187,1172,1,0,
  	0,0,1187,1175,1,0,0,0,1187,1178,1,0,0,0,1188,115,1,0,0,0,1189,1190,5,
  	1,0,0,1190,1192,5,145,0,0,1191,1193,3,40,20,0,1192,1191,1,0,0,0,1192,
  	1193,1,0,0,0,1193,1194,1,0,0,0,1194,1195,3,118,59,0,1195,1196,5,2,0,0,
  	1196,117,1,0,0,0,1197,1198,3,12,6,0,1198,1199,3,76,38,0,1199,1207,1,0,
  	0,0,1200,1201,3,124,62,0,1201,1202,3,12,6,0,1202,1207,1,0,0,0,1203,1204,
  	3,130,65,0,1204,1205,3,118,59,0,1205,1207,1,0,0,0,1206,1197,1,0,0,0,1206,
  	1200,1,0,0,0,1206,1203,1,0,0,0,1207,119,1,0,0,0,1208,1209,5,1,0,0,1209,
  	1211,5,140,0,0,1210,1212,3,40,20,0,1211,1210,1,0,0,0,1211,1212,1,0,0,
  	0,1212,1215,1,0,0,0,1213,1216,3,32,16,0,1214,1216,3,22,11,0,1215,1213,
  	1,0,0,0,1215,1214,1,0,0,0,1216,1217,1,0,0,0,1217,1218,5,2,0,0,1218,1244,
  	1,0,0,0,1219,1220,5,1,0,0,1220,1222,5,146,0,0,1221,1223,3,40,20,0,1222,
  	1221,1,0,0,0,1222,1223,1,0,0,0,1223,1224,1,0,0,0,1224,1225,3,28,14,0,
  	1225,1226,5,2,0,0,1226,1244,1,0,0,0,1227,1228,5,1,0,0,1228,1230,5,147,
  	0,0,1229,1231,3,40,20,0,1230,1229,1,0,0,0,1230,1231,1,0,0,0,1231,1232,
  	1,0,0,0,1232,1233,3,30,15,0,1233,1234,5,2,0,0,1234,1244,1,0,0,0,1235,
  	1236,5,1,0,0,1236,1238,5,145,0,0,1237,1239,3,40,20,0,1238,1237,1,0,0,
  	0,1238,1239,1,0,0,0,1239,1240,1,0,0,0,1240,1241,3,12,6,0,1241,1242,5,
  	2,0,0,1242,1244,1,0,0,0,1243,1208,1,0,0,0,1243,1219,1,0,0,0,1243,1227,
  	1,0,0,0,1243,1235,1,0,0,0,1244,121,1,0,0,0,1245,1246,5,1,0,0,1246,1247,
  	5,151,0,0,1247,1248,3,2,1,0,1248,1249,3,2,1,0,1249,1250,3,120,60,0,1250,
  	1251,5,2,0,0,1251,123,1,0,0,0,1252,1253,5,1,0,0,1253,1254,5,151,0,0,1254,
  	1255,3,2,1,0,1255,1256,3,2,1,0,1256,1257,5,2,0,0,1257,125,1,0,0,0,1258,
  	1259,5,1,0,0,1259,1260,7,4,0,0,1260,1261,3,38,19,0,1261,1262,5,2,0,0,
  	1262,127,1,0,0,0,1263,1264,5,1,0,0,1264,1265,5,152,0,0,1265,1266,3,2,
  	1,0,1266,1267,3,126,63,0,1267,1268,5,2,0,0,1268,129,1,0,0,0,1269,1270,
  	5,1,0,0,1270,1271,5,152,0,0,1271,1272,3,2,1,0,1272,1273,5,2,0,0,1273,
  	131,1,0,0,0,1274,1275,5,1,0,0,1275,1277,5,139,0,0,1276,1278,3,40,20,0,
  	1277,1276,1,0,0,0,1277,1278,1,0,0,0,1278,1279,1,0,0,0,1279,1280,3,26,
  	13,0,1280,1281,5,2,0,0,1281,133,1,0,0,0,1282,1293,3,132,66,0,1283,1284,
  	5,1,0,0,1284,1288,5,39,0,0,1285,1287,3,132,66,0,1286,1285,1,0,0,0,1287,
  	1290,1,0,0,0,1288,1286,1,0,0,0,1288,1289,1,0,0,0,1289,1291,1,0,0,0,1290,
  	1288,1,0,0,0,1291,1293,5,2,0,0,1292,1282,1,0,0,0,1292,1283,1,0,0,0,1293,
  	135,1,0,0,0,1294,1295,3,134,67,0,1295,137,1,0,0,0,1296,1297,5,1,0,0,1297,
  	1298,5,141,0,0,1298,1299,3,38,19,0,1299,1300,5,2,0,0,1300,139,1,0,0,0,
  	1301,1312,3,136,68,0,1302,1312,3,116,58,0,1303,1312,3,106,53,0,1304,1312,
  	3,112,56,0,1305,1312,3,78,39,0,1306,1312,3,104,52,0,1307,1312,3,110,55,
  	0,1308,1312,3,138,69,0,1309,1312,3,122,61,0,1310,1312,3,128,64,0,1311,
  	1301,1,0,0,0,1311,1302,1,0,0,0,1311,1303,1,0,0,0,1311,1304,1,0,0,0,1311,
  	1305,1,0,0,0,1311,1306,1,0,0,0,1311,1307,1,0,0,0,1311,1308,1,0,0,0,1311,
  	1309,1,0,0,0,1311,1310,1,0,0,0,1312,1313,1,0,0,0,1313,1311,1,0,0,0,1313,
  	1314,1,0,0,0,1314,141,1,0,0,0,1315,1316,5,1,0,0,1316,1318,5,155,0,0,1317,
  	1319,5,174,0,0,1318,1317,1,0,0,0,1318,1319,1,0,0,0,1319,1323,1,0,0,0,
  	1320,1322,3,140,70,0,1321,1320,1,0,0,0,1322,1325,1,0,0,0,1323,1321,1,
  	0,0,0,1323,1324,1,0,0,0,1324,1326,1,0,0,0,1325,1323,1,0,0,0,1326,1327,
  	5,2,0,0,1327,143,1,0,0,0,1328,1330,3,140,70,0,1329,1328,1,0,0,0,1329,
  	1330,1,0,0,0,1330,145,1,0,0,0,1331,1346,3,142,71,0,1332,1333,5,1,0,0,
  	1333,1335,5,155,0,0,1334,1336,5,174,0,0,1335,1334,1,0,0,0,1335,1336,1,
  	0,0,0,1336,1337,1,0,0,0,1337,1341,7,5,0,0,1338,1340,5,6,0,0,1339,1338,
  	1,0,0,0,1340,1343,1,0,0,0,1341,1339,1,0,0,0,1341,1342,1,0,0,0,1342,1344,
  	1,0,0,0,1343,1341,1,0,0,0,1344,1346,5,2,0,0,1345,1331,1,0,0,0,1345,1332,
  	1,0,0,0,1346,147,1,0,0,0,1347,1348,5,1,0,0,1348,1350,5,163,0,0,1349,1351,
  	5,174,0,0,1350,1349,1,0,0,0,1350,1351,1,0,0,0,1351,1352,1,0,0,0,1352,
  	1353,3,2,1,0,1353,1354,3,166,83,0,1354,1355,5,2,0,0,1355,1365,1,0,0,0,
  	1356,1357,5,1,0,0,1357,1359,5,164,0,0,1358,1360,5,174,0,0,1359,1358,1,
  	0,0,0,1359,1360,1,0,0,0,1360,1361,1,0,0,0,1361,1362,3,2,1,0,1362,1363,
  	5,2,0,0,1363,1365,1,0,0,0,1364,1347,1,0,0,0,1364,1356,1,0,0,0,1365,149,
  	1,0,0,0,1366,1367,5,1,0,0,1367,1368,5,165,0,0,1368,1369,3,146,73,0,1369,
  	1370,5,6,0,0,1370,1371,5,2,0,0,1371,1414,1,0,0,0,1372,1373,5,1,0,0,1373,
  	1374,5,166,0,0,1374,1375,3,146,73,0,1375,1376,5,6,0,0,1376,1377,5,2,0,
  	0,1377,1414,1,0,0,0,1378,1379,5,1,0,0,1379,1380,5,167,0,0,1380,1381,3,
  	146,73,0,1381,1382,5,6,0,0,1382,1383,5,2,0,0,1383,1414,1,0,0,0,1384,1385,
  	5,1,0,0,1385,1386,5,169,0,0,1386,1387,3,146,73,0,1387,1388,5,6,0,0,1388,
  	1389,5,2,0,0,1389,1414,1,0,0,0,1390,1391,5,1,0,0,1391,1392,5,168,0,0,
  	1392,1396,3,148,74,0,1393,1395,3,170,85,0,1394,1393,1,0,0,0,1395,1398,
  	1,0,0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,1399,1,0,0,0,1398,1396,
  	1,0,0,0,1399,1400,5,2,0,0,1400,1414,1,0,0,0,1401,1402,5,1,0,0,1402,1403,
  	5,169,0,0,1403,1404,3,148,74,0,1404,1405,5,6,0,0,1405,1406,5,2,0,0,1406,
  	1414,1,0,0,0,1407,1408,5,1,0,0,1408,1409,5,170,0,0,1409,1410,3,148,74,
  	0,1410,1411,5,6,0,0,1411,1412,5,2,0,0,1412,1414,1,0,0,0,1413,1366,1,0,
  	0,0,1413,1372,1,0,0,0,1413,1378,1,0,0,0,1413,1384,1,0,0,0,1413,1390,1,
  	0,0,0,1413,1401,1,0,0,0,1413,1407,1,0,0,0,1414,151,1,0,0,0,1415,1442,
  	3,148,74,0,1416,1442,3,150,75,0,1417,1442,3,146,73,0,1418,1419,5,1,0,
  	0,1419,1420,5,162,0,0,1420,1422,3,2,1,0,1421,1423,5,174,0,0,1422,1421,
  	1,0,0,0,1422,1423,1,0,0,0,1423,1424,1,0,0,0,1424,1425,5,2,0,0,1425,1442,
  	1,0,0,0,1426,1427,5,1,0,0,1427,1429,5,159,0,0,1428,1430,5,174,0,0,1429,
  	1428,1,0,0,0,1429,1430,1,0,0,0,1430,1431,1,0,0,0,1431,1432,3,154,77,0,
  	1432,1433,5,2,0,0,1433,1442,1,0,0,0,1434,1435,5,1,0,0,1435,1437,5,160,
  	0,0,1436,1438,5,174,0,0,1437,1436,1,0,0,0,1437,1438,1,0,0,0,1438,1439,
  	1,0,0,0,1439,1442,5,2,0,0,1440,1442,3,156,78,0,1441,1415,1,0,0,0,1441,
  	1416,1,0,0,0,1441,1417,1,0,0,0,1441,1418,1,0,0,0,1441,1426,1,0,0,0,1441,
  	1434,1,0,0,0,1441,1440,1,0,0,0,1442,153,1,0,0,0,1443,1444,5,1,0,0,1444,
  	1445,5,26,0,0,1445,1446,5,1,0,0,1446,1447,5,155,0,0,1447,1448,5,174,0,
  	0,1448,1449,5,2,0,0,1449,1451,5,2,0,0,1450,1443,1,0,0,0,1451,1454,1,0,
  	0,0,1452,1450,1,0,0,0,1452,1453,1,0,0,0,1453,1458,1,0,0,0,1454,1452,1,
  	0,0,0,1455,1457,3,152,76,0,1456,1455,1,0,0,0,1457,1460,1,0,0,0,1458,1456,
  	1,0,0,0,1458,1459,1,0,0,0,1459,155,1,0,0,0,1460,1458,1,0,0,0,1461,1462,
  	5,1,0,0,1462,1464,5,161,0,0,1463,1465,5,174,0,0,1464,1463,1,0,0,0,1464,
  	1465,1,0,0,0,1465,1469,1,0,0,0,1466,1468,3,152,76,0,1467,1466,1,0,0,0,
  	1468,1471,1,0,0,0,1469,1467,1,0,0,0,1469,1470,1,0,0,0,1470,1472,1,0,0,
  	0,1471,1469,1,0,0,0,1472,1494,5,2,0,0,1473,1474,5,1,0,0,1474,1476,5,171,
  	0,0,1475,1477,5,174,0,0,1476,1475,1,0,0,0,1476,1477,1,0,0,0,1477,1478,
  	1,0,0,0,1478,1479,5,6,0,0,1479,1494,5,2,0,0,1480,1481,5,1,0,0,1481,1483,
  	5,172,0,0,1482,1484,5,174,0,0,1483,1482,1,0,0,0,1483,1484,1,0,0,0,1484,
  	1485,1,0,0,0,1485,1486,5,6,0,0,1486,1494,5,2,0,0,1487,1488,5,1,0,0,1488,
  	1490,5,172,0,0,1489,1491,5,174,0,0,1490,1489,1,0,0,0,1490,1491,1,0,0,
  	0,1491,1492,1,0,0,0,1492,1494,5,2,0,0,1493,1461,1,0,0,0,1493,1473,1,0,
  	0,0,1493,1480,1,0,0,0,1493,1487,1,0,0,0,1494,157,1,0,0,0,1495,1496,5,
  	1,0,0,1496,1497,5,11,0,0,1497,1498,3,36,18,0,1498,1499,5,2,0,0,1499,159,
  	1,0,0,0,1500,1501,5,1,0,0,1501,1502,5,12,0,0,1502,1506,5,10,0,0,1503,
  	1505,3,36,18,0,1504,1503,1,0,0,0,1505,1508,1,0,0,0,1506,1504,1,0,0,0,
  	1506,1507,1,0,0,0,1507,1509,1,0,0,0,1508,1506,1,0,0,0,1509,1510,5,2,0,
  	0,1510,161,1,0,0,0,1511,1512,5,1,0,0,1512,1513,5,40,0,0,1513,1514,3,6,
  	3,0,1514,1515,5,2,0,0,1515,1525,1,0,0,0,1516,1517,5,1,0,0,1517,1518,5,
  	44,0,0,1518,1519,5,3,0,0,1519,1525,5,2,0,0,1520,1521,5,1,0,0,1521,1522,
  	5,45,0,0,1522,1523,5,3,0,0,1523,1525,5,2,0,0,1524,1511,1,0,0,0,1524,1516,
  	1,0,0,0,1524,1520,1,0,0,0,1525,163,1,0,0,0,1526,1530,3,158,79,0,1527,
  	1530,3,160,80,0,1528,1530,3,162,81,0,1529,1526,1,0,0,0,1529,1527,1,0,
  	0,0,1529,1528,1,0,0,0,1530,165,1,0,0,0,1531,1533,3,164,82,0,1532,1531,
  	1,0,0,0,1533,1536,1,0,0,0,1534,1532,1,0,0,0,1534,1535,1,0,0,0,1535,167,
  	1,0,0,0,1536,1534,1,0,0,0,1537,1540,3,36,18,0,1538,1540,5,173,0,0,1539,
  	1537,1,0,0,0,1539,1538,1,0,0,0,1540,169,1,0,0,0,1541,1570,3,158,79,0,
  	1542,1570,3,162,81,0,1543,1544,5,1,0,0,1544,1545,5,11,0,0,1545,1546,5,
  	173,0,0,1546,1570,5,2,0,0,1547,1548,5,1,0,0,1548,1549,7,6,0,0,1549,1570,
  	5,2,0,0,1550,1551,5,1,0,0,1551,1552,5,12,0,0,1552,1556,5,10,0,0,1553,
  	1555,3,168,84,0,1554,1553,1,0,0,0,1555,1558,1,0,0,0,1556,1554,1,0,0,0,
  	1556,1557,1,0,0,0,1557,1559,1,0,0,0,1558,1556,1,0,0,0,1559,1570,5,2,0,
  	0,1560,1561,5,1,0,0,1561,1565,5,158,0,0,1562,1564,3,170,85,0,1563,1562,
  	1,0,0,0,1564,1567,1,0,0,0,1565,1563,1,0,0,0,1565,1566,1,0,0,0,1566,1568,
  	1,0,0,0,1567,1565,1,0,0,0,1568,1570,5,2,0,0,1569,1541,1,0,0,0,1569,1542,
  	1,0,0,0,1569,1543,1,0,0,0,1569,1547,1,0,0,0,1569,1550,1,0,0,0,1569,1560,
  	1,0,0,0,1570,171,1,0,0,0,1571,1573,3,152,76,0,1572,1571,1,0,0,0,1573,
  	1576,1,0,0,0,1574,1572,1,0,0,0,1574,1575,1,0,0,0,1575,1577,1,0,0,0,1576,
  	1574,1,0,0,0,1577,1586,5,0,0,1,1578,1580,3,140,70,0,1579,1578,1,0,0,0,
  	1580,1581,1,0,0,0,1581,1579,1,0,0,0,1581,1582,1,0,0,0,1582,1583,1,0,0,
  	0,1583,1584,5,0,0,1,1584,1586,1,0,0,0,1585,1574,1,0,0,0,1585,1579,1,0,
  	0,0,1586,173,1,0,0,0,1587,1588,3,142,71,0,1588,1589,5,0,0,1,1589,1598,
  	1,0,0,0,1590,1592,3,140,70,0,1591,1590,1,0,0,0,1592,1595,1,0,0,0,1593,
  	1591,1,0,0,0,1593,1594,1,0,0,0,1594,1596,1,0,0,0,1595,1593,1,0,0,0,1596,
  	1598,5,0,0,1,1597,1587,1,0,0,0,1597,1593,1,0,0,0,1598,175,1,0,0,0,198,
  	181,194,212,217,225,229,237,244,250,255,265,272,279,284,294,302,307,313,
  	317,323,326,344,348,351,353,358,372,402,406,410,414,418,424,429,435,438,
  	442,445,449,452,456,459,463,466,471,474,552,565,575,578,582,585,590,593,
  	597,600,604,607,611,614,616,624,630,637,642,645,648,655,661,669,675,682,
  	687,691,696,699,703,705,708,717,723,731,737,750,757,762,767,772,777,780,
  	787,793,799,803,812,818,828,834,840,844,851,857,867,873,879,891,898,904,
  	909,916,923,933,935,945,951,959,969,971,981,987,1000,1003,1008,1029,1039,
  	1045,1052,1055,1060,1066,1069,1077,1083,1088,1093,1102,1116,1122,1125,
  	1129,1134,1141,1149,1152,1157,1161,1166,1183,1187,1192,1206,1211,1215,
  	1222,1230,1238,1243,1277,1288,1292,1311,1313,1318,1323,1329,1335,1341,
  	1345,1350,1359,1364,1396,1413,1422,1429,1437,1441,1452,1458,1464,1469,
  	1476,1483,1490,1493,1506,1524,1529,1534,1539,1556,1565,1569,1574,1581,
  	1585,1593,1597
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  watparserParserStaticData = staticData.release();
}

}

WatParser::WatParser(TokenStream *input) : WatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WatParser::WatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  WatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *watparserParserStaticData->atn, watparserParserStaticData->decisionToDFA, watparserParserStaticData->sharedContextCache, options);
}

WatParser::~WatParser() {
  delete _interpreter;
}

const atn::ATN& WatParser::getATN() const {
  return *watparserParserStaticData->atn;
}

std::string WatParser::getGrammarFileName() const {
  return "WatParser.g4";
}

const std::vector<std::string>& WatParser::getRuleNames() const {
  return watparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& WatParser::getVocabulary() const {
  return watparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView WatParser::getSerializedATN() const {
  return watparserParserStaticData->serializedATN;
}


//----------------- ValueContext ------------------------------------------------------------------

WatParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ValueContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::ValueContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::ValueContext::getRuleIndex() const {
  return WatParser::RuleValue;
}

void WatParser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void WatParser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}


std::any WatParser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ValueContext* WatParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 0, WatParser::RuleValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(176);
    _la = _input->LA(1);
    if (!(_la == WatParser::INT

    || _la == WatParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

WatParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NameContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}


size_t WatParser::NameContext::getRuleIndex() const {
  return WatParser::RuleName;
}

void WatParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void WatParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


std::any WatParser::NameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitName(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NameContext* WatParser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 2, WatParser::RuleName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(178);
    match(WatParser::STRING_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_optContext ------------------------------------------------------------------

WatParser::Null_optContext::Null_optContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Null_optContext::NULL_() {
  return getToken(WatParser::NULL_, 0);
}


size_t WatParser::Null_optContext::getRuleIndex() const {
  return WatParser::RuleNull_opt;
}

void WatParser::Null_optContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_opt(this);
}

void WatParser::Null_optContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_opt(this);
}


std::any WatParser::Null_optContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNull_opt(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Null_optContext* WatParser::null_opt() {
  Null_optContext *_localctx = _tracker.createInstance<Null_optContext>(_ctx, getState());
  enterRule(_localctx, 4, WatParser::RuleNull_opt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(181);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NULL_) {
      setState(180);
      match(WatParser::NULL_);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Heap_typeContext ------------------------------------------------------------------

WatParser::Heap_typeContext::Heap_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Heap_typeContext::ANY() {
  return getToken(WatParser::ANY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NONE() {
  return getToken(WatParser::NONE, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EQ() {
  return getToken(WatParser::EQ, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::I31() {
  return getToken(WatParser::I31, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOFUNC() {
  return getToken(WatParser::NOFUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EXTERN() {
  return getToken(WatParser::EXTERN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOEXTERN() {
  return getToken(WatParser::NOEXTERN, 0);
}

WatParser::Var_Context* WatParser::Heap_typeContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}


size_t WatParser::Heap_typeContext::getRuleIndex() const {
  return WatParser::RuleHeap_type;
}

void WatParser::Heap_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeap_type(this);
}

void WatParser::Heap_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeap_type(this);
}


std::any WatParser::Heap_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHeap_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Heap_typeContext* WatParser::heap_type() {
  Heap_typeContext *_localctx = _tracker.createInstance<Heap_typeContext>(_ctx, getState());
  enterRule(_localctx, 6, WatParser::RuleHeap_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(194);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::ANY: {
        enterOuterAlt(_localctx, 1);
        setState(183);
        match(WatParser::ANY);
        break;
      }

      case WatParser::NONE: {
        enterOuterAlt(_localctx, 2);
        setState(184);
        match(WatParser::NONE);
        break;
      }

      case WatParser::EQ: {
        enterOuterAlt(_localctx, 3);
        setState(185);
        match(WatParser::EQ);
        break;
      }

      case WatParser::I31: {
        enterOuterAlt(_localctx, 4);
        setState(186);
        match(WatParser::I31);
        break;
      }

      case WatParser::STRUCT: {
        enterOuterAlt(_localctx, 5);
        setState(187);
        match(WatParser::STRUCT);
        break;
      }

      case WatParser::ARRAY: {
        enterOuterAlt(_localctx, 6);
        setState(188);
        match(WatParser::ARRAY);
        break;
      }

      case WatParser::FUNC: {
        enterOuterAlt(_localctx, 7);
        setState(189);
        match(WatParser::FUNC);
        break;
      }

      case WatParser::NOFUNC: {
        enterOuterAlt(_localctx, 8);
        setState(190);
        match(WatParser::NOFUNC);
        break;
      }

      case WatParser::EXTERN: {
        enterOuterAlt(_localctx, 9);
        setState(191);
        match(WatParser::EXTERN);
        break;
      }

      case WatParser::NOEXTERN: {
        enterOuterAlt(_localctx, 10);
        setState(192);
        match(WatParser::NOEXTERN);
        break;
      }

      case WatParser::NAT:
      case WatParser::VAR: {
        enterOuterAlt(_localctx, 11);
        setState(193);
        var_();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ref_typeContext ------------------------------------------------------------------

WatParser::Ref_typeContext::Ref_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Ref_typeContext::FUNCREF() {
  return getToken(WatParser::FUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EXTERNREF() {
  return getToken(WatParser::EXTERNREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::REF() {
  return getToken(WatParser::REF, 0);
}

WatParser::Null_optContext* WatParser::Ref_typeContext::null_opt() {
  return getRuleContext<WatParser::Null_optContext>(0);
}

WatParser::Heap_typeContext* WatParser::Ref_typeContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Ref_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ANYREF() {
  return getToken(WatParser::ANYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLREF() {
  return getToken(WatParser::NULLREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EQREF() {
  return getToken(WatParser::EQREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::I31REF() {
  return getToken(WatParser::I31REF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::STRUCTREF() {
  return getToken(WatParser::STRUCTREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ARRAYREF() {
  return getToken(WatParser::ARRAYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLFUNCREF() {
  return getToken(WatParser::NULLFUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLEXTERNREF() {
  return getToken(WatParser::NULLEXTERNREF, 0);
}


size_t WatParser::Ref_typeContext::getRuleIndex() const {
  return WatParser::RuleRef_type;
}

void WatParser::Ref_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRef_type(this);
}

void WatParser::Ref_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRef_type(this);
}


std::any WatParser::Ref_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRef_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Ref_typeContext* WatParser::ref_type() {
  Ref_typeContext *_localctx = _tracker.createInstance<Ref_typeContext>(_ctx, getState());
  enterRule(_localctx, 8, WatParser::RuleRef_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(212);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::FUNCREF: {
        enterOuterAlt(_localctx, 1);
        setState(196);
        match(WatParser::FUNCREF);
        break;
      }

      case WatParser::EXTERNREF: {
        enterOuterAlt(_localctx, 2);
        setState(197);
        match(WatParser::EXTERNREF);
        break;
      }

      case WatParser::LPAR: {
        enterOuterAlt(_localctx, 3);
        setState(198);
        match(WatParser::LPAR);
        setState(199);
        match(WatParser::REF);
        setState(200);
        null_opt();
        setState(201);
        heap_type();
        setState(202);
        match(WatParser::RPAR);
        break;
      }

      case WatParser::ANYREF: {
        enterOuterAlt(_localctx, 4);
        setState(204);
        match(WatParser::ANYREF);
        break;
      }

      case WatParser::NULLREF: {
        enterOuterAlt(_localctx, 5);
        setState(205);
        match(WatParser::NULLREF);
        break;
      }

      case WatParser::EQREF: {
        enterOuterAlt(_localctx, 6);
        setState(206);
        match(WatParser::EQREF);
        break;
      }

      case WatParser::I31REF: {
        enterOuterAlt(_localctx, 7);
        setState(207);
        match(WatParser::I31REF);
        break;
      }

      case WatParser::STRUCTREF: {
        enterOuterAlt(_localctx, 8);
        setState(208);
        match(WatParser::STRUCTREF);
        break;
      }

      case WatParser::ARRAYREF: {
        enterOuterAlt(_localctx, 9);
        setState(209);
        match(WatParser::ARRAYREF);
        break;
      }

      case WatParser::NULLFUNCREF: {
        enterOuterAlt(_localctx, 10);
        setState(210);
        match(WatParser::NULLFUNCREF);
        break;
      }

      case WatParser::NULLEXTERNREF: {
        enterOuterAlt(_localctx, 11);
        setState(211);
        match(WatParser::NULLEXTERNREF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Val_typeContext ------------------------------------------------------------------

WatParser::Val_typeContext::Val_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Val_typeContext::NUM_TYPE() {
  return getToken(WatParser::NUM_TYPE, 0);
}

tree::TerminalNode* WatParser::Val_typeContext::VEC_TYPE() {
  return getToken(WatParser::VEC_TYPE, 0);
}

WatParser::Ref_typeContext* WatParser::Val_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}


size_t WatParser::Val_typeContext::getRuleIndex() const {
  return WatParser::RuleVal_type;
}

void WatParser::Val_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVal_type(this);
}

void WatParser::Val_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVal_type(this);
}


std::any WatParser::Val_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Val_typeContext* WatParser::val_type() {
  Val_typeContext *_localctx = _tracker.createInstance<Val_typeContext>(_ctx, getState());
  enterRule(_localctx, 10, WatParser::RuleVal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(217);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NUM_TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(214);
        match(WatParser::NUM_TYPE);
        break;
      }

      case WatParser::VEC_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(215);
        match(WatParser::VEC_TYPE);
        break;
      }

      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF: {
        enterOuterAlt(_localctx, 3);
        setState(216);
        ref_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_typeContext ------------------------------------------------------------------

WatParser::Global_typeContext::Global_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Global_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Global_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Global_typeContext::getRuleIndex() const {
  return WatParser::RuleGlobal_type;
}

void WatParser::Global_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_type(this);
}

void WatParser::Global_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_type(this);
}


std::any WatParser::Global_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_typeContext* WatParser::global_type() {
  Global_typeContext *_localctx = _tracker.createInstance<Global_typeContext>(_ctx, getState());
  enterRule(_localctx, 12, WatParser::RuleGlobal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(225);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(219);
      val_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(220);
      match(WatParser::LPAR);
      setState(221);
      match(WatParser::MUT);
      setState(222);
      val_type();
      setState(223);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Storage_typeContext ------------------------------------------------------------------

WatParser::Storage_typeContext::Storage_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Storage_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Storage_typeContext::PACK_TYPE() {
  return getToken(WatParser::PACK_TYPE, 0);
}


size_t WatParser::Storage_typeContext::getRuleIndex() const {
  return WatParser::RuleStorage_type;
}

void WatParser::Storage_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorage_type(this);
}

void WatParser::Storage_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorage_type(this);
}


std::any WatParser::Storage_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStorage_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Storage_typeContext* WatParser::storage_type() {
  Storage_typeContext *_localctx = _tracker.createInstance<Storage_typeContext>(_ctx, getState());
  enterRule(_localctx, 14, WatParser::RuleStorage_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(229);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::LPAR:
      case WatParser::NUM_TYPE:
      case WatParser::VEC_TYPE:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF: {
        enterOuterAlt(_localctx, 1);
        setState(227);
        val_type();
        break;
      }

      case WatParser::PACK_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(228);
        match(WatParser::PACK_TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_typeContext ------------------------------------------------------------------

WatParser::Field_typeContext::Field_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Storage_typeContext* WatParser::Field_typeContext::storage_type() {
  return getRuleContext<WatParser::Storage_typeContext>(0);
}

tree::TerminalNode* WatParser::Field_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Field_typeContext::getRuleIndex() const {
  return WatParser::RuleField_type;
}

void WatParser::Field_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_type(this);
}

void WatParser::Field_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_type(this);
}


std::any WatParser::Field_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitField_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Field_typeContext* WatParser::field_type() {
  Field_typeContext *_localctx = _tracker.createInstance<Field_typeContext>(_ctx, getState());
  enterRule(_localctx, 16, WatParser::RuleField_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(231);
      storage_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(232);
      match(WatParser::LPAR);
      setState(233);
      match(WatParser::MUT);
      setState(234);
      storage_type();
      setState(235);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_typeContext ------------------------------------------------------------------

WatParser::Struct_typeContext::Struct_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::FIELD() {
  return getTokens(WatParser::FIELD);
}

tree::TerminalNode* WatParser::Struct_typeContext::FIELD(size_t i) {
  return getToken(WatParser::FIELD, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Struct_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Struct_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Field_typeContext *> WatParser::Struct_typeContext::field_type() {
  return getRuleContexts<WatParser::Field_typeContext>();
}

WatParser::Field_typeContext* WatParser::Struct_typeContext::field_type(size_t i) {
  return getRuleContext<WatParser::Field_typeContext>(i);
}


size_t WatParser::Struct_typeContext::getRuleIndex() const {
  return WatParser::RuleStruct_type;
}

void WatParser::Struct_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_type(this);
}

void WatParser::Struct_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_type(this);
}


std::any WatParser::Struct_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStruct_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Struct_typeContext* WatParser::struct_type() {
  Struct_typeContext *_localctx = _tracker.createInstance<Struct_typeContext>(_ctx, getState());
  enterRule(_localctx, 18, WatParser::RuleStruct_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(255);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(239);
      match(WatParser::LPAR);
      setState(240);
      match(WatParser::FIELD);
      setState(250);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case WatParser::LPAR:
        case WatParser::RPAR:
        case WatParser::NUM_TYPE:
        case WatParser::PACK_TYPE:
        case WatParser::VEC_TYPE:
        case WatParser::ANYREF:
        case WatParser::NULLREF:
        case WatParser::EQREF:
        case WatParser::I31REF:
        case WatParser::STRUCTREF:
        case WatParser::ARRAYREF:
        case WatParser::FUNCREF:
        case WatParser::NULLFUNCREF:
        case WatParser::EXTERNREF:
        case WatParser::NULLEXTERNREF: {
          setState(244);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 3379905410) != 0)) {
            setState(241);
            field_type();
            setState(246);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case WatParser::VAR: {
          setState(247);
          bind_var();
          setState(248);
          field_type();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(252);
      match(WatParser::RPAR);
      setState(257);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

WatParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Field_typeContext* WatParser::Array_typeContext::field_type() {
  return getRuleContext<WatParser::Field_typeContext>(0);
}


size_t WatParser::Array_typeContext::getRuleIndex() const {
  return WatParser::RuleArray_type;
}

void WatParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void WatParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}


std::any WatParser::Array_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitArray_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Array_typeContext* WatParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 20, WatParser::RuleArray_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(258);
    field_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

WatParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_typeContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_typeContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_typeContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_typeContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_typeContext::getRuleIndex() const {
  return WatParser::RuleFunc_type;
}

void WatParser::Func_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_type(this);
}

void WatParser::Func_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_type(this);
}


std::any WatParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_typeContext* WatParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 22, WatParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(284);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(260);
      match(WatParser::LPAR);
      setState(279);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
      case 1: {
        setState(261);
        match(WatParser::RESULT);
        setState(265);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(262);
          val_type();
          setState(267);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(268);
        match(WatParser::PARAM);
        setState(272);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(269);
          val_type();
          setState(274);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 3: {
        setState(275);
        match(WatParser::PARAM);
        setState(276);
        bind_var();
        setState(277);
        val_type();
        break;
      }

      default:
        break;
      }
      setState(281);
      match(WatParser::RPAR);
      setState(286);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Str_typeContext ------------------------------------------------------------------

WatParser::Str_typeContext::Str_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Str_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

WatParser::Struct_typeContext* WatParser::Str_typeContext::struct_type() {
  return getRuleContext<WatParser::Struct_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

WatParser::Array_typeContext* WatParser::Str_typeContext::array_type() {
  return getRuleContext<WatParser::Array_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_typeContext* WatParser::Str_typeContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}


size_t WatParser::Str_typeContext::getRuleIndex() const {
  return WatParser::RuleStr_type;
}

void WatParser::Str_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStr_type(this);
}

void WatParser::Str_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStr_type(this);
}


std::any WatParser::Str_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Str_typeContext* WatParser::str_type() {
  Str_typeContext *_localctx = _tracker.createInstance<Str_typeContext>(_ctx, getState());
  enterRule(_localctx, 24, WatParser::RuleStr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(287);
    match(WatParser::LPAR);
    setState(294);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::STRUCT: {
        setState(288);
        match(WatParser::STRUCT);
        setState(289);
        struct_type();
        break;
      }

      case WatParser::ARRAY: {
        setState(290);
        match(WatParser::ARRAY);
        setState(291);
        array_type();
        break;
      }

      case WatParser::FUNC: {
        setState(292);
        match(WatParser::FUNC);
        setState(293);
        func_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(296);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sub_typeContext ------------------------------------------------------------------

WatParser::Sub_typeContext::Sub_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Str_typeContext* WatParser::Sub_typeContext::str_type() {
  return getRuleContext<WatParser::Str_typeContext>(0);
}

tree::TerminalNode* WatParser::Sub_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::SUB() {
  return getToken(WatParser::SUB, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::FINAL() {
  return getToken(WatParser::FINAL, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Sub_typeContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Sub_typeContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::Sub_typeContext::getRuleIndex() const {
  return WatParser::RuleSub_type;
}

void WatParser::Sub_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSub_type(this);
}

void WatParser::Sub_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSub_type(this);
}


std::any WatParser::Sub_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSub_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Sub_typeContext* WatParser::sub_type() {
  Sub_typeContext *_localctx = _tracker.createInstance<Sub_typeContext>(_ctx, getState());
  enterRule(_localctx, 26, WatParser::RuleSub_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(313);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(298);
      str_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(299);
      match(WatParser::LPAR);
      setState(300);
      match(WatParser::SUB);
      setState(302);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::FINAL) {
        setState(301);
        match(WatParser::FINAL);
      }
      setState(307);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(304);
        var_();
        setState(309);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(310);
      str_type();
      setState(311);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_typeContext ------------------------------------------------------------------

WatParser::Table_typeContext::Table_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Table_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Table_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

WatParser::Ref_typeContext* WatParser::Table_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}


size_t WatParser::Table_typeContext::getRuleIndex() const {
  return WatParser::RuleTable_type;
}

void WatParser::Table_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_type(this);
}

void WatParser::Table_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_type(this);
}


std::any WatParser::Table_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_typeContext* WatParser::table_type() {
  Table_typeContext *_localctx = _tracker.createInstance<Table_typeContext>(_ctx, getState());
  enterRule(_localctx, 28, WatParser::RuleTable_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(315);
    match(WatParser::NAT);
    setState(317);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(316);
      match(WatParser::NAT);
    }
    setState(319);
    ref_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_typeContext ------------------------------------------------------------------

WatParser::Memory_typeContext::Memory_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Memory_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Memory_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

tree::TerminalNode* WatParser::Memory_typeContext::SHARED() {
  return getToken(WatParser::SHARED, 0);
}


size_t WatParser::Memory_typeContext::getRuleIndex() const {
  return WatParser::RuleMemory_type;
}

void WatParser::Memory_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_type(this);
}

void WatParser::Memory_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_type(this);
}


std::any WatParser::Memory_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_typeContext* WatParser::memory_type() {
  Memory_typeContext *_localctx = _tracker.createInstance<Memory_typeContext>(_ctx, getState());
  enterRule(_localctx, 30, WatParser::RuleMemory_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(321);
    match(WatParser::NAT);
    setState(323);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(322);
      match(WatParser::NAT);
    }
    setState(326);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::SHARED) {
      setState(325);
      match(WatParser::SHARED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_useContext ------------------------------------------------------------------

WatParser::Type_useContext::Type_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_useContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Var_Context* WatParser::Type_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Type_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Type_useContext::getRuleIndex() const {
  return WatParser::RuleType_use;
}

void WatParser::Type_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_use(this);
}

void WatParser::Type_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_use(this);
}


std::any WatParser::Type_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_useContext* WatParser::type_use() {
  Type_useContext *_localctx = _tracker.createInstance<Type_useContext>(_ctx, getState());
  enterRule(_localctx, 32, WatParser::RuleType_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(328);
    match(WatParser::LPAR);
    setState(329);
    match(WatParser::TYPE);
    setState(330);
    var_();
    setState(331);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nat32Context ------------------------------------------------------------------

WatParser::Nat32Context::Nat32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Nat32Context::NAT() {
  return getToken(WatParser::NAT, 0);
}


size_t WatParser::Nat32Context::getRuleIndex() const {
  return WatParser::RuleNat32;
}

void WatParser::Nat32Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNat32(this);
}

void WatParser::Nat32Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNat32(this);
}


std::any WatParser::Nat32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNat32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Nat32Context* WatParser::nat32() {
  Nat32Context *_localctx = _tracker.createInstance<Nat32Context>(_ctx, getState());
  enterRule(_localctx, 34, WatParser::RuleNat32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(333);
    match(WatParser::NAT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumContext ------------------------------------------------------------------

WatParser::NumContext::NumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NumContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::NumContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::NumContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::NumContext::getRuleIndex() const {
  return WatParser::RuleNum;
}

void WatParser::NumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNum(this);
}

void WatParser::NumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNum(this);
}


std::any WatParser::NumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNum(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumContext* WatParser::num() {
  NumContext *_localctx = _tracker.createInstance<NumContext>(_ctx, getState());
  enterRule(_localctx, 36, WatParser::RuleNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(335);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_Context ------------------------------------------------------------------

WatParser::Var_Context::Var_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Var_Context::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Var_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Var_Context::getRuleIndex() const {
  return WatParser::RuleVar_;
}

void WatParser::Var_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVar_(this);
}

void WatParser::Var_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVar_(this);
}


std::any WatParser::Var_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVar_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Var_Context* WatParser::var_() {
  Var_Context *_localctx = _tracker.createInstance<Var_Context>(_ctx, getState());
  enterRule(_localctx, 38, WatParser::RuleVar_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(337);
    _la = _input->LA(1);
    if (!(_la == WatParser::NAT || _la == WatParser::VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bind_varContext ------------------------------------------------------------------

WatParser::Bind_varContext::Bind_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Bind_varContext::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Bind_varContext::getRuleIndex() const {
  return WatParser::RuleBind_var;
}

void WatParser::Bind_varContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBind_var(this);
}

void WatParser::Bind_varContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBind_var(this);
}


std::any WatParser::Bind_varContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBind_var(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Bind_varContext* WatParser::bind_var() {
  Bind_varContext *_localctx = _tracker.createInstance<Bind_varContext>(_ctx, getState());
  enterRule(_localctx, 40, WatParser::RuleBind_var);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    match(WatParser::VAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instr_listContext ------------------------------------------------------------------

WatParser::Instr_listContext::Instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::InstrContext *> WatParser::Instr_listContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::Instr_listContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

WatParser::Call_instr_instr_listContext* WatParser::Instr_listContext::call_instr_instr_list() {
  return getRuleContext<WatParser::Call_instr_instr_listContext>(0);
}

WatParser::Select_instr_instr_listContext* WatParser::Instr_listContext::select_instr_instr_list() {
  return getRuleContext<WatParser::Select_instr_instr_listContext>(0);
}


size_t WatParser::Instr_listContext::getRuleIndex() const {
  return WatParser::RuleInstr_list;
}

void WatParser::Instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr_list(this);
}

void WatParser::Instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr_list(this);
}


std::any WatParser::Instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Instr_listContext* WatParser::instr_list() {
  Instr_listContext *_localctx = _tracker.createInstance<Instr_listContext>(_ctx, getState());
  enterRule(_localctx, 42, WatParser::RuleInstr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(344);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(341);
        instr(); 
      }
      setState(346);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
    setState(353);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(348);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::CALL_INDIRECT

      || _la == WatParser::RETURN_CALL_INDIRECT) {
        setState(347);
        call_instr_instr_list();
      }
      break;
    }

    case 2: {
      setState(351);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::SELECT) {
        setState(350);
        select_instr_instr_list();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstrContext ------------------------------------------------------------------

WatParser::InstrContext::InstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Plain_instrContext* WatParser::InstrContext::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

WatParser::Block_instrContext* WatParser::InstrContext::block_instr() {
  return getRuleContext<WatParser::Block_instrContext>(0);
}

WatParser::ExprContext* WatParser::InstrContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::InstrContext::getRuleIndex() const {
  return WatParser::RuleInstr;
}

void WatParser::InstrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr(this);
}

void WatParser::InstrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr(this);
}


std::any WatParser::InstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::InstrContext* WatParser::instr() {
  InstrContext *_localctx = _tracker.createInstance<InstrContext>(_ctx, getState());
  enterRule(_localctx, 44, WatParser::RuleInstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(358);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CONST:
      case WatParser::VEC_CONST:
      case WatParser::REF_NULL:
      case WatParser::REF_FUNC:
      case WatParser::REF_IS_NULL:
      case WatParser::REF_AS_NON_NULL:
      case WatParser::REF_TEST:
      case WatParser::REF_CAST:
      case WatParser::REF_EQ:
      case WatParser::REF_I31:
      case WatParser::I31_GET:
      case WatParser::STRUCT_NEW:
      case WatParser::STRUCT_GET:
      case WatParser::STRUCT_SET:
      case WatParser::ARRAY_NEW:
      case WatParser::ARRAY_NEW_FIXED:
      case WatParser::ARRAY_NEW_ELEM:
      case WatParser::ARRAY_NEW_DATA:
      case WatParser::ARRAY_GET:
      case WatParser::ARRAY_SET:
      case WatParser::ARRAY_LEN:
      case WatParser::ARRAY_COPY:
      case WatParser::ARRAY_FILL:
      case WatParser::ARRAY_INIT_DATA:
      case WatParser::ARRAY_INIT_ELEM:
      case WatParser::EXTERN_CONVERT:
      case WatParser::MEMORY_ATOMIC_NOTIFY:
      case WatParser::MEMORY_ATOMIC_WAIT:
      case WatParser::ATOMIC_FENCE:
      case WatParser::ATOMIC_LOAD:
      case WatParser::ATOMIC_STORE:
      case WatParser::ATOMIC_RMW:
      case WatParser::ATOMIC_RMW_CMPXCHG:
      case WatParser::NOP:
      case WatParser::UNREACHABLE:
      case WatParser::DROP:
      case WatParser::BR:
      case WatParser::BR_IF:
      case WatParser::BR_TABLE:
      case WatParser::RETURN:
      case WatParser::SELECT:
      case WatParser::CALL:
      case WatParser::CALL_REF:
      case WatParser::RETURN_CALL:
      case WatParser::RETURN_CALL_REF:
      case WatParser::BR_ON_NULL:
      case WatParser::BR_ON_CAST:
      case WatParser::LOCAL_GET:
      case WatParser::LOCAL_SET:
      case WatParser::LOCAL_TEE:
      case WatParser::GLOBAL_GET:
      case WatParser::GLOBAL_SET:
      case WatParser::TABLE_GET:
      case WatParser::TABLE_SET:
      case WatParser::TABLE_SIZE:
      case WatParser::TABLE_GROW:
      case WatParser::TABLE_FILL:
      case WatParser::TABLE_COPY:
      case WatParser::TABLE_INIT:
      case WatParser::DATA_DROP:
      case WatParser::ELEM_DROP:
      case WatParser::LOAD:
      case WatParser::STORE:
      case WatParser::UNARY:
      case WatParser::BINARY:
      case WatParser::TEST:
      case WatParser::COMPARE:
      case WatParser::CONVERT:
      case WatParser::VEC_LOAD:
      case WatParser::VEC_STORE:
      case WatParser::VEC_LOAD_LANE:
      case WatParser::VEC_STORE_LANE:
      case WatParser::VEC_UNARY:
      case WatParser::VEC_BINARY:
      case WatParser::VEC_TERNARY:
      case WatParser::VEC_TEST:
      case WatParser::VEC_BITMASK:
      case WatParser::VEC_SHIFT:
      case WatParser::VEC_SHUFFLE:
      case WatParser::VEC_SPLAT:
      case WatParser::VEC_EXTRACT:
      case WatParser::VEC_REPLACE:
      case WatParser::MEMORY_SIZE:
      case WatParser::MEMORY_GROW:
      case WatParser::MEMORY_FILL:
      case WatParser::MEMORY_COPY:
      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 1);
        setState(355);
        plain_instr();
        break;
      }

      case WatParser::BLOCK:
      case WatParser::LOOP:
      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(356);
        block_instr();
        break;
      }

      case WatParser::LPAR: {
        enterOuterAlt(_localctx, 3);
        setState(357);
        expr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plain_instrContext ------------------------------------------------------------------

WatParser::Plain_instrContext::Plain_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Plain_instrContext::UNREACHABLE() {
  return getToken(WatParser::UNREACHABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NOP() {
  return getToken(WatParser::NOP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DROP() {
  return getToken(WatParser::DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR() {
  return getToken(WatParser::BR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Plain_instrContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Plain_instrContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_IF() {
  return getToken(WatParser::BR_IF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_TABLE() {
  return getToken(WatParser::BR_TABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_NULL() {
  return getToken(WatParser::BR_ON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_CAST() {
  return getToken(WatParser::BR_ON_CAST, 0);
}

std::vector<WatParser::Ref_typeContext *> WatParser::Plain_instrContext::ref_type() {
  return getRuleContexts<WatParser::Ref_typeContext>();
}

WatParser::Ref_typeContext* WatParser::Plain_instrContext::ref_type(size_t i) {
  return getRuleContext<WatParser::Ref_typeContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN() {
  return getToken(WatParser::RETURN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL() {
  return getToken(WatParser::CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL_REF() {
  return getToken(WatParser::CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL() {
  return getToken(WatParser::RETURN_CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL_REF() {
  return getToken(WatParser::RETURN_CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_GET() {
  return getToken(WatParser::LOCAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_SET() {
  return getToken(WatParser::LOCAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_TEE() {
  return getToken(WatParser::LOCAL_TEE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_GET() {
  return getToken(WatParser::GLOBAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_SET() {
  return getToken(WatParser::GLOBAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GET() {
  return getToken(WatParser::TABLE_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SET() {
  return getToken(WatParser::TABLE_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SIZE() {
  return getToken(WatParser::TABLE_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GROW() {
  return getToken(WatParser::TABLE_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_FILL() {
  return getToken(WatParser::TABLE_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_COPY() {
  return getToken(WatParser::TABLE_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_INIT() {
  return getToken(WatParser::TABLE_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ELEM_DROP() {
  return getToken(WatParser::ELEM_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOAD() {
  return getToken(WatParser::LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::OFFSET_EQ_NAT() {
  return getToken(WatParser::OFFSET_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ALIGN_EQ_NAT() {
  return getToken(WatParser::ALIGN_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STORE() {
  return getToken(WatParser::STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD() {
  return getToken(WatParser::VEC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE() {
  return getToken(WatParser::VEC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD_LANE() {
  return getToken(WatParser::VEC_LOAD_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE_LANE() {
  return getToken(WatParser::VEC_STORE_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_SIZE() {
  return getToken(WatParser::MEMORY_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_GROW() {
  return getToken(WatParser::MEMORY_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

std::vector<WatParser::NumContext *> WatParser::Plain_instrContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Plain_instrContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_FILL() {
  return getToken(WatParser::MEMORY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_COPY() {
  return getToken(WatParser::MEMORY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_INIT() {
  return getToken(WatParser::MEMORY_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DATA_DROP() {
  return getToken(WatParser::DATA_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Plain_instrContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_IS_NULL() {
  return getToken(WatParser::REF_IS_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_AS_NON_NULL() {
  return getToken(WatParser::REF_AS_NON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_TEST() {
  return getToken(WatParser::REF_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_CAST() {
  return getToken(WatParser::REF_CAST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::I31_GET() {
  return getToken(WatParser::I31_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_NEW() {
  return getToken(WatParser::STRUCT_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_GET() {
  return getToken(WatParser::STRUCT_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_SET() {
  return getToken(WatParser::STRUCT_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW() {
  return getToken(WatParser::ARRAY_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_FIXED() {
  return getToken(WatParser::ARRAY_NEW_FIXED, 0);
}

WatParser::Nat32Context* WatParser::Plain_instrContext::nat32() {
  return getRuleContext<WatParser::Nat32Context>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_ELEM() {
  return getToken(WatParser::ARRAY_NEW_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_DATA() {
  return getToken(WatParser::ARRAY_NEW_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_GET() {
  return getToken(WatParser::ARRAY_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_SET() {
  return getToken(WatParser::ARRAY_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_LEN() {
  return getToken(WatParser::ARRAY_LEN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_COPY() {
  return getToken(WatParser::ARRAY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_FILL() {
  return getToken(WatParser::ARRAY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_DATA() {
  return getToken(WatParser::ARRAY_INIT_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_ELEM() {
  return getToken(WatParser::ARRAY_INIT_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::EXTERN_CONVERT() {
  return getToken(WatParser::EXTERN_CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TEST() {
  return getToken(WatParser::TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::COMPARE() {
  return getToken(WatParser::COMPARE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::UNARY() {
  return getToken(WatParser::UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BINARY() {
  return getToken(WatParser::BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONVERT() {
  return getToken(WatParser::CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_UNARY() {
  return getToken(WatParser::VEC_UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BINARY() {
  return getToken(WatParser::VEC_BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TERNARY() {
  return getToken(WatParser::VEC_TERNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TEST() {
  return getToken(WatParser::VEC_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHIFT() {
  return getToken(WatParser::VEC_SHIFT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BITMASK() {
  return getToken(WatParser::VEC_BITMASK, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHUFFLE() {
  return getToken(WatParser::VEC_SHUFFLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SPLAT() {
  return getToken(WatParser::VEC_SPLAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_EXTRACT() {
  return getToken(WatParser::VEC_EXTRACT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_REPLACE() {
  return getToken(WatParser::VEC_REPLACE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_WAIT() {
  return getToken(WatParser::MEMORY_ATOMIC_WAIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_NOTIFY() {
  return getToken(WatParser::MEMORY_ATOMIC_NOTIFY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_FENCE() {
  return getToken(WatParser::ATOMIC_FENCE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_LOAD() {
  return getToken(WatParser::ATOMIC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_STORE() {
  return getToken(WatParser::ATOMIC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW() {
  return getToken(WatParser::ATOMIC_RMW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW_CMPXCHG() {
  return getToken(WatParser::ATOMIC_RMW_CMPXCHG, 0);
}


size_t WatParser::Plain_instrContext::getRuleIndex() const {
  return WatParser::RulePlain_instr;
}

void WatParser::Plain_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlain_instr(this);
}

void WatParser::Plain_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlain_instr(this);
}


std::any WatParser::Plain_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitPlain_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Plain_instrContext* WatParser::plain_instr() {
  Plain_instrContext *_localctx = _tracker.createInstance<Plain_instrContext>(_ctx, getState());
  enterRule(_localctx, 46, WatParser::RulePlain_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(616);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::UNREACHABLE: {
        enterOuterAlt(_localctx, 1);
        setState(360);
        match(WatParser::UNREACHABLE);
        break;
      }

      case WatParser::NOP: {
        enterOuterAlt(_localctx, 2);
        setState(361);
        match(WatParser::NOP);
        break;
      }

      case WatParser::DROP: {
        enterOuterAlt(_localctx, 3);
        setState(362);
        match(WatParser::DROP);
        break;
      }

      case WatParser::SELECT: {
        enterOuterAlt(_localctx, 4);
        setState(363);
        match(WatParser::SELECT);
        break;
      }

      case WatParser::BR: {
        enterOuterAlt(_localctx, 5);
        setState(364);
        match(WatParser::BR);
        setState(365);
        var_();
        break;
      }

      case WatParser::BR_IF: {
        enterOuterAlt(_localctx, 6);
        setState(366);
        match(WatParser::BR_IF);
        setState(367);
        var_();
        break;
      }

      case WatParser::BR_TABLE: {
        enterOuterAlt(_localctx, 7);
        setState(368);
        match(WatParser::BR_TABLE);
        setState(370); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(369);
          var_();
          setState(372); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == WatParser::NAT || _la == WatParser::VAR);
        break;
      }

      case WatParser::BR_ON_NULL: {
        enterOuterAlt(_localctx, 8);
        setState(374);
        match(WatParser::BR_ON_NULL);
        setState(375);
        var_();
        break;
      }

      case WatParser::BR_ON_CAST: {
        enterOuterAlt(_localctx, 9);
        setState(376);
        match(WatParser::BR_ON_CAST);
        setState(377);
        var_();
        setState(378);
        ref_type();
        setState(379);
        ref_type();
        break;
      }

      case WatParser::RETURN: {
        enterOuterAlt(_localctx, 10);
        setState(381);
        match(WatParser::RETURN);
        break;
      }

      case WatParser::CALL: {
        enterOuterAlt(_localctx, 11);
        setState(382);
        match(WatParser::CALL);
        setState(383);
        var_();
        break;
      }

      case WatParser::CALL_REF: {
        enterOuterAlt(_localctx, 12);
        setState(384);
        match(WatParser::CALL_REF);
        setState(385);
        var_();
        break;
      }

      case WatParser::RETURN_CALL: {
        enterOuterAlt(_localctx, 13);
        setState(386);
        match(WatParser::RETURN_CALL);
        setState(387);
        var_();
        break;
      }

      case WatParser::RETURN_CALL_REF: {
        enterOuterAlt(_localctx, 14);
        setState(388);
        match(WatParser::RETURN_CALL_REF);
        setState(389);
        var_();
        break;
      }

      case WatParser::LOCAL_GET: {
        enterOuterAlt(_localctx, 15);
        setState(390);
        match(WatParser::LOCAL_GET);
        setState(391);
        var_();
        break;
      }

      case WatParser::LOCAL_SET: {
        enterOuterAlt(_localctx, 16);
        setState(392);
        match(WatParser::LOCAL_SET);
        setState(393);
        var_();
        break;
      }

      case WatParser::LOCAL_TEE: {
        enterOuterAlt(_localctx, 17);
        setState(394);
        match(WatParser::LOCAL_TEE);
        setState(395);
        var_();
        break;
      }

      case WatParser::GLOBAL_GET: {
        enterOuterAlt(_localctx, 18);
        setState(396);
        match(WatParser::GLOBAL_GET);
        setState(397);
        var_();
        break;
      }

      case WatParser::GLOBAL_SET: {
        enterOuterAlt(_localctx, 19);
        setState(398);
        match(WatParser::GLOBAL_SET);
        setState(399);
        var_();
        break;
      }

      case WatParser::TABLE_GET: {
        enterOuterAlt(_localctx, 20);
        setState(400);
        match(WatParser::TABLE_GET);
        setState(402);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(401);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SET: {
        enterOuterAlt(_localctx, 21);
        setState(404);
        match(WatParser::TABLE_SET);
        setState(406);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(405);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SIZE: {
        enterOuterAlt(_localctx, 22);
        setState(408);
        match(WatParser::TABLE_SIZE);
        setState(410);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(409);
          var_();
        }
        break;
      }

      case WatParser::TABLE_GROW: {
        enterOuterAlt(_localctx, 23);
        setState(412);
        match(WatParser::TABLE_GROW);
        setState(414);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(413);
          var_();
        }
        break;
      }

      case WatParser::TABLE_FILL: {
        enterOuterAlt(_localctx, 24);
        setState(416);
        match(WatParser::TABLE_FILL);
        setState(418);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(417);
          var_();
        }
        break;
      }

      case WatParser::TABLE_COPY: {
        enterOuterAlt(_localctx, 25);
        setState(420);
        match(WatParser::TABLE_COPY);
        setState(424);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(421);
          var_();
          setState(422);
          var_();
        }
        break;
      }

      case WatParser::TABLE_INIT: {
        enterOuterAlt(_localctx, 26);
        setState(426);
        match(WatParser::TABLE_INIT);
        setState(427);
        var_();
        setState(429);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(428);
          var_();
        }
        break;
      }

      case WatParser::ELEM_DROP: {
        enterOuterAlt(_localctx, 27);
        setState(431);
        match(WatParser::ELEM_DROP);
        setState(432);
        var_();
        break;
      }

      case WatParser::LOAD: {
        enterOuterAlt(_localctx, 28);
        setState(433);
        match(WatParser::LOAD);
        setState(435);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(434);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(437);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::STORE: {
        enterOuterAlt(_localctx, 29);
        setState(440);
        match(WatParser::STORE);
        setState(442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(441);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(445);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(444);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD: {
        enterOuterAlt(_localctx, 30);
        setState(447);
        match(WatParser::VEC_LOAD);
        setState(449);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(448);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(452);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(451);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_STORE: {
        enterOuterAlt(_localctx, 31);
        setState(454);
        match(WatParser::VEC_STORE);
        setState(456);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(455);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(459);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(458);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD_LANE: {
        enterOuterAlt(_localctx, 32);
        setState(461);
        match(WatParser::VEC_LOAD_LANE);
        setState(463);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(462);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(466);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(465);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(468);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_STORE_LANE: {
        enterOuterAlt(_localctx, 33);
        setState(469);
        match(WatParser::VEC_STORE_LANE);
        setState(471);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(470);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(474);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(473);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(476);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_SIZE: {
        enterOuterAlt(_localctx, 34);
        setState(477);
        match(WatParser::MEMORY_SIZE);
        break;
      }

      case WatParser::MEMORY_GROW: {
        enterOuterAlt(_localctx, 35);
        setState(478);
        match(WatParser::MEMORY_GROW);
        break;
      }

      case WatParser::CONST: {
        enterOuterAlt(_localctx, 36);
        setState(479);
        match(WatParser::CONST);
        setState(480);
        num();
        break;
      }

      case WatParser::MEMORY_FILL: {
        enterOuterAlt(_localctx, 37);
        setState(481);
        match(WatParser::MEMORY_FILL);
        break;
      }

      case WatParser::MEMORY_COPY: {
        enterOuterAlt(_localctx, 38);
        setState(482);
        match(WatParser::MEMORY_COPY);
        break;
      }

      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 39);
        setState(483);
        match(WatParser::MEMORY_INIT);
        setState(484);
        var_();
        break;
      }

      case WatParser::DATA_DROP: {
        enterOuterAlt(_localctx, 40);
        setState(485);
        match(WatParser::DATA_DROP);
        setState(486);
        var_();
        break;
      }

      case WatParser::REF_NULL: {
        enterOuterAlt(_localctx, 41);
        setState(487);
        match(WatParser::REF_NULL);
        setState(488);
        heap_type();
        break;
      }

      case WatParser::REF_IS_NULL: {
        enterOuterAlt(_localctx, 42);
        setState(489);
        match(WatParser::REF_IS_NULL);
        break;
      }

      case WatParser::REF_FUNC: {
        enterOuterAlt(_localctx, 43);
        setState(490);
        match(WatParser::REF_FUNC);
        setState(491);
        var_();
        break;
      }

      case WatParser::REF_AS_NON_NULL: {
        enterOuterAlt(_localctx, 44);
        setState(492);
        match(WatParser::REF_AS_NON_NULL);
        break;
      }

      case WatParser::REF_TEST: {
        enterOuterAlt(_localctx, 45);
        setState(493);
        match(WatParser::REF_TEST);
        break;
      }

      case WatParser::REF_CAST: {
        enterOuterAlt(_localctx, 46);
        setState(494);
        match(WatParser::REF_CAST);
        break;
      }

      case WatParser::REF_EQ: {
        enterOuterAlt(_localctx, 47);
        setState(495);
        match(WatParser::REF_EQ);
        break;
      }

      case WatParser::REF_I31: {
        enterOuterAlt(_localctx, 48);
        setState(496);
        match(WatParser::REF_I31);
        break;
      }

      case WatParser::I31_GET: {
        enterOuterAlt(_localctx, 49);
        setState(497);
        match(WatParser::I31_GET);
        break;
      }

      case WatParser::STRUCT_NEW: {
        enterOuterAlt(_localctx, 50);
        setState(498);
        match(WatParser::STRUCT_NEW);
        setState(499);
        var_();
        break;
      }

      case WatParser::STRUCT_GET: {
        enterOuterAlt(_localctx, 51);
        setState(500);
        match(WatParser::STRUCT_GET);
        setState(501);
        var_();
        setState(502);
        var_();
        break;
      }

      case WatParser::STRUCT_SET: {
        enterOuterAlt(_localctx, 52);
        setState(504);
        match(WatParser::STRUCT_SET);
        setState(505);
        var_();
        setState(506);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW: {
        enterOuterAlt(_localctx, 53);
        setState(508);
        match(WatParser::ARRAY_NEW);
        setState(509);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_FIXED: {
        enterOuterAlt(_localctx, 54);
        setState(510);
        match(WatParser::ARRAY_NEW_FIXED);
        setState(511);
        var_();
        setState(512);
        nat32();
        break;
      }

      case WatParser::ARRAY_NEW_ELEM: {
        enterOuterAlt(_localctx, 55);
        setState(514);
        match(WatParser::ARRAY_NEW_ELEM);
        setState(515);
        var_();
        setState(516);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_DATA: {
        enterOuterAlt(_localctx, 56);
        setState(518);
        match(WatParser::ARRAY_NEW_DATA);
        setState(519);
        var_();
        setState(520);
        var_();
        break;
      }

      case WatParser::ARRAY_GET: {
        enterOuterAlt(_localctx, 57);
        setState(522);
        match(WatParser::ARRAY_GET);
        setState(523);
        var_();
        break;
      }

      case WatParser::ARRAY_SET: {
        enterOuterAlt(_localctx, 58);
        setState(524);
        match(WatParser::ARRAY_SET);
        setState(525);
        var_();
        break;
      }

      case WatParser::ARRAY_LEN: {
        enterOuterAlt(_localctx, 59);
        setState(526);
        match(WatParser::ARRAY_LEN);
        break;
      }

      case WatParser::ARRAY_COPY: {
        enterOuterAlt(_localctx, 60);
        setState(527);
        match(WatParser::ARRAY_COPY);
        setState(528);
        var_();
        setState(529);
        var_();
        break;
      }

      case WatParser::ARRAY_FILL: {
        enterOuterAlt(_localctx, 61);
        setState(531);
        match(WatParser::ARRAY_FILL);
        setState(532);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_DATA: {
        enterOuterAlt(_localctx, 62);
        setState(533);
        match(WatParser::ARRAY_INIT_DATA);
        setState(534);
        var_();
        setState(535);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_ELEM: {
        enterOuterAlt(_localctx, 63);
        setState(537);
        match(WatParser::ARRAY_INIT_ELEM);
        setState(538);
        var_();
        setState(539);
        var_();
        break;
      }

      case WatParser::EXTERN_CONVERT: {
        enterOuterAlt(_localctx, 64);
        setState(541);
        match(WatParser::EXTERN_CONVERT);
        break;
      }

      case WatParser::TEST: {
        enterOuterAlt(_localctx, 65);
        setState(542);
        match(WatParser::TEST);
        break;
      }

      case WatParser::COMPARE: {
        enterOuterAlt(_localctx, 66);
        setState(543);
        match(WatParser::COMPARE);
        break;
      }

      case WatParser::UNARY: {
        enterOuterAlt(_localctx, 67);
        setState(544);
        match(WatParser::UNARY);
        break;
      }

      case WatParser::BINARY: {
        enterOuterAlt(_localctx, 68);
        setState(545);
        match(WatParser::BINARY);
        break;
      }

      case WatParser::CONVERT: {
        enterOuterAlt(_localctx, 69);
        setState(546);
        match(WatParser::CONVERT);
        break;
      }

      case WatParser::VEC_CONST: {
        enterOuterAlt(_localctx, 70);
        setState(547);
        match(WatParser::VEC_CONST);
        setState(548);
        match(WatParser::VEC_SHAPE);
        setState(552);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(549);
          num();
          setState(554);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_UNARY: {
        enterOuterAlt(_localctx, 71);
        setState(555);
        match(WatParser::VEC_UNARY);
        break;
      }

      case WatParser::VEC_BINARY: {
        enterOuterAlt(_localctx, 72);
        setState(556);
        match(WatParser::VEC_BINARY);
        break;
      }

      case WatParser::VEC_TERNARY: {
        enterOuterAlt(_localctx, 73);
        setState(557);
        match(WatParser::VEC_TERNARY);
        break;
      }

      case WatParser::VEC_TEST: {
        enterOuterAlt(_localctx, 74);
        setState(558);
        match(WatParser::VEC_TEST);
        break;
      }

      case WatParser::VEC_SHIFT: {
        enterOuterAlt(_localctx, 75);
        setState(559);
        match(WatParser::VEC_SHIFT);
        break;
      }

      case WatParser::VEC_BITMASK: {
        enterOuterAlt(_localctx, 76);
        setState(560);
        match(WatParser::VEC_BITMASK);
        break;
      }

      case WatParser::VEC_SHUFFLE: {
        enterOuterAlt(_localctx, 77);
        setState(561);
        match(WatParser::VEC_SHUFFLE);
        setState(565);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(562);
          num();
          setState(567);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_SPLAT: {
        enterOuterAlt(_localctx, 78);
        setState(568);
        match(WatParser::VEC_SPLAT);
        break;
      }

      case WatParser::VEC_EXTRACT: {
        enterOuterAlt(_localctx, 79);
        setState(569);
        match(WatParser::VEC_EXTRACT);
        setState(570);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_REPLACE: {
        enterOuterAlt(_localctx, 80);
        setState(571);
        match(WatParser::VEC_REPLACE);
        setState(572);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_ATOMIC_WAIT: {
        enterOuterAlt(_localctx, 81);
        setState(573);
        match(WatParser::MEMORY_ATOMIC_WAIT);
        setState(575);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(574);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(578);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(577);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::MEMORY_ATOMIC_NOTIFY: {
        enterOuterAlt(_localctx, 82);
        setState(580);
        match(WatParser::MEMORY_ATOMIC_NOTIFY);
        setState(582);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(581);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(585);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(584);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_FENCE: {
        enterOuterAlt(_localctx, 83);
        setState(587);
        match(WatParser::ATOMIC_FENCE);
        break;
      }

      case WatParser::ATOMIC_LOAD: {
        enterOuterAlt(_localctx, 84);
        setState(588);
        match(WatParser::ATOMIC_LOAD);
        setState(590);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(589);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(593);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(592);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_STORE: {
        enterOuterAlt(_localctx, 85);
        setState(595);
        match(WatParser::ATOMIC_STORE);
        setState(597);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(596);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(600);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(599);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW: {
        enterOuterAlt(_localctx, 86);
        setState(602);
        match(WatParser::ATOMIC_RMW);
        setState(604);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(603);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(607);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(606);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW_CMPXCHG: {
        enterOuterAlt(_localctx, 87);
        setState(609);
        match(WatParser::ATOMIC_RMW_CMPXCHG);
        setState(611);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(610);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(614);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(613);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_instr_instr_listContext ------------------------------------------------------------------

WatParser::Select_instr_instr_listContext::Select_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Instr_listContext* WatParser::Select_instr_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_instr_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_instr_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleSelect_instr_instr_list;
}

void WatParser::Select_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_instr_instr_list(this);
}

void WatParser::Select_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_instr_instr_list(this);
}


std::any WatParser::Select_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_instr_instr_listContext* WatParser::select_instr_instr_list() {
  Select_instr_instr_listContext *_localctx = _tracker.createInstance<Select_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 48, WatParser::RuleSelect_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(618);
    match(WatParser::SELECT);
    setState(630);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(619);
        match(WatParser::LPAR);
        setState(620);
        match(WatParser::RESULT);
        setState(624);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(621);
          val_type();
          setState(626);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(627);
        match(WatParser::RPAR); 
      }
      setState(632);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
    setState(633);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_instr_listContext::Call_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_instr_type_instr_listContext* WatParser::Call_instr_instr_listContext::call_instr_type_instr_list() {
  return getRuleContext<WatParser::Call_instr_type_instr_listContext>(0);
}

WatParser::Var_Context* WatParser::Call_instr_instr_listContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}


size_t WatParser::Call_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_instr_list;
}

void WatParser::Call_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_instr_list(this);
}

void WatParser::Call_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_instr_list(this);
}


std::any WatParser::Call_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_instr_listContext* WatParser::call_instr_instr_list() {
  Call_instr_instr_listContext *_localctx = _tracker.createInstance<Call_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 50, WatParser::RuleCall_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(645);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CALL_INDIRECT: {
        enterOuterAlt(_localctx, 1);
        setState(635);
        match(WatParser::CALL_INDIRECT);
        setState(637);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(636);
          var_();
        }
        setState(639);
        call_instr_type_instr_list();
        break;
      }

      case WatParser::RETURN_CALL_INDIRECT: {
        enterOuterAlt(_localctx, 2);
        setState(640);
        match(WatParser::RETURN_CALL_INDIRECT);
        setState(642);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(641);
          var_();
        }
        setState(644);
        call_instr_type_instr_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_type_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_type_instr_listContext::Call_instr_type_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Call_instr_type_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Type_useContext* WatParser::Call_instr_type_instr_listContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_instr_type_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_instr_type_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_instr_type_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_type_instr_list;
}

void WatParser::Call_instr_type_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_type_instr_list(this);
}

void WatParser::Call_instr_type_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_type_instr_list(this);
}


std::any WatParser::Call_instr_type_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_type_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_type_instr_listContext* WatParser::call_instr_type_instr_list() {
  Call_instr_type_instr_listContext *_localctx = _tracker.createInstance<Call_instr_type_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 52, WatParser::RuleCall_instr_type_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(648);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(647);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(661);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(650);
        match(WatParser::LPAR);
        setState(651);
        match(WatParser::PARAM);
        setState(655);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(652);
          val_type();
          setState(657);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(658);
        match(WatParser::RPAR); 
      }
      setState(663);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
    setState(675);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(664);
        match(WatParser::LPAR);
        setState(665);
        match(WatParser::RESULT);
        setState(669);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(666);
          val_type();
          setState(671);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(672);
        match(WatParser::RPAR); 
      }
      setState(677);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
    setState(678);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_instrContext ------------------------------------------------------------------

WatParser::Block_instrContext::Block_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::BlockContext* WatParser::Block_instrContext::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

tree::TerminalNode* WatParser::Block_instrContext::END() {
  return getToken(WatParser::END, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

std::vector<WatParser::Bind_varContext *> WatParser::Block_instrContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Block_instrContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

tree::TerminalNode* WatParser::Block_instrContext::IF() {
  return getToken(WatParser::IF, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

WatParser::Instr_listContext* WatParser::Block_instrContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}


size_t WatParser::Block_instrContext::getRuleIndex() const {
  return WatParser::RuleBlock_instr;
}

void WatParser::Block_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_instr(this);
}

void WatParser::Block_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_instr(this);
}


std::any WatParser::Block_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_instrContext* WatParser::block_instr() {
  Block_instrContext *_localctx = _tracker.createInstance<Block_instrContext>(_ctx, getState());
  enterRule(_localctx, 54, WatParser::RuleBlock_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(705);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::BLOCK:
      case WatParser::LOOP: {
        enterOuterAlt(_localctx, 1);
        setState(680);
        _la = _input->LA(1);
        if (!(_la == WatParser::BLOCK

        || _la == WatParser::LOOP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(682);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(681);
          bind_var();
        }
        setState(684);
        block();
        setState(685);
        match(WatParser::END);
        setState(687);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(686);
          bind_var();
        }
        break;
      }

      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(689);
        match(WatParser::IF);
        setState(691);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(690);
          bind_var();
        }
        setState(693);
        block();
        setState(699);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ELSE) {
          setState(694);
          match(WatParser::ELSE);
          setState(696);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::VAR) {
            setState(695);
            bind_var();
          }
          setState(698);
          instr_list();
        }
        setState(701);
        match(WatParser::END);
        setState(703);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(702);
          bind_var();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

WatParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Block_param_bodyContext* WatParser::BlockContext::block_param_body() {
  return getRuleContext<WatParser::Block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::BlockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::BlockContext::getRuleIndex() const {
  return WatParser::RuleBlock;
}

void WatParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void WatParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


std::any WatParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlockContext* WatParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 56, WatParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(708);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 78, _ctx)) {
    case 1: {
      setState(707);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(710);
    block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_param_bodyContext ------------------------------------------------------------------

WatParser::Block_param_bodyContext::Block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Block_param_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleBlock_param_body;
}

void WatParser::Block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_param_body(this);
}

void WatParser::Block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_param_body(this);
}


std::any WatParser::Block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_param_bodyContext* WatParser::block_param_body() {
  Block_param_bodyContext *_localctx = _tracker.createInstance<Block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 58, WatParser::RuleBlock_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(723);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(712);
        match(WatParser::LPAR);
        setState(713);
        match(WatParser::PARAM);
        setState(717);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(714);
          val_type();
          setState(719);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(720);
        match(WatParser::RPAR); 
      }
      setState(725);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx);
    }
    setState(737);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(726);
        match(WatParser::LPAR);
        setState(727);
        match(WatParser::RESULT);
        setState(731);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(728);
          val_type();
          setState(733);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(734);
        match(WatParser::RPAR); 
      }
      setState(739);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
    setState(740);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WatParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

WatParser::Expr1Context* WatParser::ExprContext::expr1() {
  return getRuleContext<WatParser::Expr1Context>(0);
}

tree::TerminalNode* WatParser::ExprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::ExprContext::getRuleIndex() const {
  return WatParser::RuleExpr;
}

void WatParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void WatParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


std::any WatParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExprContext* WatParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 60, WatParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(742);
    match(WatParser::LPAR);
    setState(743);
    expr1();
    setState(744);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr1Context ------------------------------------------------------------------

WatParser::Expr1Context::Expr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Plain_instrContext* WatParser::Expr1Context::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

std::vector<WatParser::ExprContext *> WatParser::Expr1Context::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Expr1Context::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

tree::TerminalNode* WatParser::Expr1Context::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Select_expr_resultsContext* WatParser::Expr1Context::select_expr_results() {
  return getRuleContext<WatParser::Select_expr_resultsContext>(0);
}

tree::TerminalNode* WatParser::Expr1Context::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_expr_typeContext* WatParser::Expr1Context::call_expr_type() {
  return getRuleContext<WatParser::Call_expr_typeContext>(0);
}

WatParser::Var_Context* WatParser::Expr1Context::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Expr1Context::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}

tree::TerminalNode* WatParser::Expr1Context::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

WatParser::BlockContext* WatParser::Expr1Context::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

WatParser::Bind_varContext* WatParser::Expr1Context::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

tree::TerminalNode* WatParser::Expr1Context::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

tree::TerminalNode* WatParser::Expr1Context::IF() {
  return getToken(WatParser::IF, 0);
}

WatParser::If_blockContext* WatParser::Expr1Context::if_block() {
  return getRuleContext<WatParser::If_blockContext>(0);
}


size_t WatParser::Expr1Context::getRuleIndex() const {
  return WatParser::RuleExpr1;
}

void WatParser::Expr1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr1(this);
}

void WatParser::Expr1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr1(this);
}


std::any WatParser::Expr1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExpr1(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Expr1Context* WatParser::expr1() {
  Expr1Context *_localctx = _tracker.createInstance<Expr1Context>(_ctx, getState());
  enterRule(_localctx, 62, WatParser::RuleExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(780);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(746);
      plain_instr();
      setState(750);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(747);
        expr();
        setState(752);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(753);
      match(WatParser::SELECT);
      setState(754);
      select_expr_results();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(755);
      match(WatParser::CALL_INDIRECT);
      setState(757);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(756);
        var_();
      }
      setState(759);
      call_expr_type();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(760);
      match(WatParser::RETURN_CALL_INDIRECT);
      setState(762);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(761);
        var_();
      }
      setState(764);
      call_expr_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(765);
      match(WatParser::BLOCK);
      setState(767);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(766);
        bind_var();
      }
      setState(769);
      block();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(770);
      match(WatParser::LOOP);
      setState(772);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(771);
        bind_var();
      }
      setState(774);
      block();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(775);
      match(WatParser::IF);
      setState(777);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(776);
        bind_var();
      }
      setState(779);
      if_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expr_resultsContext ------------------------------------------------------------------

WatParser::Select_expr_resultsContext::Select_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Select_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Select_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleSelect_expr_results;
}

void WatParser::Select_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expr_results(this);
}

void WatParser::Select_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expr_results(this);
}


std::any WatParser::Select_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_expr_resultsContext* WatParser::select_expr_results() {
  Select_expr_resultsContext *_localctx = _tracker.createInstance<Select_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 64, WatParser::RuleSelect_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(793);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(782);
        match(WatParser::LPAR);
        setState(783);
        match(WatParser::RESULT);
        setState(787);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(784);
          val_type();
          setState(789);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(790);
        match(WatParser::RPAR); 
      }
      setState(795);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
    setState(799);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(796);
      expr();
      setState(801);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_typeContext ------------------------------------------------------------------

WatParser::Call_expr_typeContext::Call_expr_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_paramsContext* WatParser::Call_expr_typeContext::call_expr_params() {
  return getRuleContext<WatParser::Call_expr_paramsContext>(0);
}

WatParser::Type_useContext* WatParser::Call_expr_typeContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Call_expr_typeContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_type;
}

void WatParser::Call_expr_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_type(this);
}

void WatParser::Call_expr_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_type(this);
}


std::any WatParser::Call_expr_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_typeContext* WatParser::call_expr_type() {
  Call_expr_typeContext *_localctx = _tracker.createInstance<Call_expr_typeContext>(_ctx, getState());
  enterRule(_localctx, 66, WatParser::RuleCall_expr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(803);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 93, _ctx)) {
    case 1: {
      setState(802);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(805);
    call_expr_params();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_paramsContext ------------------------------------------------------------------

WatParser::Call_expr_paramsContext::Call_expr_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_resultsContext* WatParser::Call_expr_paramsContext::call_expr_results() {
  return getRuleContext<WatParser::Call_expr_resultsContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_paramsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_paramsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_paramsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_params;
}

void WatParser::Call_expr_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_params(this);
}

void WatParser::Call_expr_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_params(this);
}


std::any WatParser::Call_expr_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_params(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_paramsContext* WatParser::call_expr_params() {
  Call_expr_paramsContext *_localctx = _tracker.createInstance<Call_expr_paramsContext>(_ctx, getState());
  enterRule(_localctx, 68, WatParser::RuleCall_expr_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(818);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(807);
        match(WatParser::LPAR);
        setState(808);
        match(WatParser::PARAM);
        setState(812);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(809);
          val_type();
          setState(814);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(815);
        match(WatParser::RPAR); 
      }
      setState(820);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 95, _ctx);
    }
    setState(821);
    call_expr_results();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_resultsContext ------------------------------------------------------------------

WatParser::Call_expr_resultsContext::Call_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Call_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Call_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_results;
}

void WatParser::Call_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_results(this);
}

void WatParser::Call_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_results(this);
}


std::any WatParser::Call_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_resultsContext* WatParser::call_expr_results() {
  Call_expr_resultsContext *_localctx = _tracker.createInstance<Call_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 70, WatParser::RuleCall_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(834);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(823);
        match(WatParser::LPAR);
        setState(824);
        match(WatParser::RESULT);
        setState(828);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(825);
          val_type();
          setState(830);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(831);
        match(WatParser::RPAR); 
      }
      setState(836);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 97, _ctx);
    }
    setState(840);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(837);
      expr();
      setState(842);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_blockContext ------------------------------------------------------------------

WatParser::If_blockContext::If_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::If_block_result_bodyContext* WatParser::If_blockContext::if_block_result_body() {
  return getRuleContext<WatParser::If_block_result_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::If_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_blockContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::If_blockContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_blockContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_blockContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_blockContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_blockContext::getRuleIndex() const {
  return WatParser::RuleIf_block;
}

void WatParser::If_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block(this);
}

void WatParser::If_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block(this);
}


std::any WatParser::If_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_blockContext* WatParser::if_block() {
  If_blockContext *_localctx = _tracker.createInstance<If_blockContext>(_ctx, getState());
  enterRule(_localctx, 72, WatParser::RuleIf_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(844);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      setState(843);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(857);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(846);
        match(WatParser::LPAR);
        setState(847);
        match(WatParser::PARAM);
        setState(851);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(848);
          val_type();
          setState(853);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(854);
        match(WatParser::RPAR); 
      }
      setState(859);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
    setState(860);
    if_block_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_block_result_bodyContext ------------------------------------------------------------------

WatParser::If_block_result_bodyContext::If_block_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::THEN() {
  return getToken(WatParser::THEN, 0);
}

std::vector<WatParser::Instr_listContext *> WatParser::If_block_result_bodyContext::instr_list() {
  return getRuleContexts<WatParser::Instr_listContext>();
}

WatParser::Instr_listContext* WatParser::If_block_result_bodyContext::instr_list(size_t i) {
  return getRuleContext<WatParser::Instr_listContext>(i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::ExprContext *> WatParser::If_block_result_bodyContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::If_block_result_bodyContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_block_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_block_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_block_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleIf_block_result_body;
}

void WatParser::If_block_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block_result_body(this);
}

void WatParser::If_block_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block_result_body(this);
}


std::any WatParser::If_block_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_block_result_bodyContext* WatParser::if_block_result_body() {
  If_block_result_bodyContext *_localctx = _tracker.createInstance<If_block_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 74, WatParser::RuleIf_block_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(873);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(862);
        match(WatParser::LPAR);
        setState(863);
        match(WatParser::RESULT);
        setState(867);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(864);
          val_type();
          setState(869);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(870);
        match(WatParser::RPAR); 
      }
      setState(875);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx);
    }
    setState(879);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(876);
        expr(); 
      }
      setState(881);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 104, _ctx);
    }
    setState(882);
    match(WatParser::LPAR);
    setState(883);
    match(WatParser::THEN);
    setState(884);
    instr_list();
    setState(885);
    match(WatParser::RPAR);
    setState(891);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(886);
      match(WatParser::LPAR);
      setState(887);
      match(WatParser::ELSE);
      setState(888);
      instr_list();
      setState(889);
      match(WatParser::RPAR);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Const_exprContext ------------------------------------------------------------------

WatParser::Const_exprContext::Const_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Const_exprContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}


size_t WatParser::Const_exprContext::getRuleIndex() const {
  return WatParser::RuleConst_expr;
}

void WatParser::Const_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConst_expr(this);
}

void WatParser::Const_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConst_expr(this);
}


std::any WatParser::Const_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitConst_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Const_exprContext* WatParser::const_expr() {
  Const_exprContext *_localctx = _tracker.createInstance<Const_exprContext>(_ctx, getState());
  enterRule(_localctx, 76, WatParser::RuleConst_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(893);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_Context ------------------------------------------------------------------

WatParser::Func_Context::Func_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Func_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Func_Context::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_fieldsContext* WatParser::Func_Context::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Func_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Func_Context::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Func_Context::getRuleIndex() const {
  return WatParser::RuleFunc_;
}

void WatParser::Func_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_(this);
}

void WatParser::Func_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_(this);
}


std::any WatParser::Func_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_Context* WatParser::func_() {
  Func_Context *_localctx = _tracker.createInstance<Func_Context>(_ctx, getState());
  enterRule(_localctx, 78, WatParser::RuleFunc_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(895);
    match(WatParser::LPAR);
    setState(896);
    match(WatParser::FUNC);
    setState(898);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(897);
      bind_var();
    }
    setState(900);
    func_fields();
    setState(901);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fieldsContext ------------------------------------------------------------------

WatParser::Func_fieldsContext::Func_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_bodyContext* WatParser::Func_fieldsContext::func_fields_body() {
  return getRuleContext<WatParser::Func_fields_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Func_fieldsContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Inline_importContext* WatParser::Func_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Func_fields_importContext* WatParser::Func_fieldsContext::func_fields_import() {
  return getRuleContext<WatParser::Func_fields_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Func_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Func_fieldsContext* WatParser::Func_fieldsContext::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}


size_t WatParser::Func_fieldsContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields;
}

void WatParser::Func_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields(this);
}

void WatParser::Func_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields(this);
}


std::any WatParser::Func_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fieldsContext* WatParser::func_fields() {
  Func_fieldsContext *_localctx = _tracker.createInstance<Func_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 80, WatParser::RuleFunc_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(916);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(904);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx)) {
      case 1: {
        setState(903);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(906);
      func_fields_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(907);
      inline_import();
      setState(909);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 108, _ctx)) {
      case 1: {
        setState(908);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(911);
      func_fields_import();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(913);
      inline_export();
      setState(914);
      func_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_importContext ------------------------------------------------------------------

WatParser::Func_fields_importContext::Func_fields_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_import_resultContext* WatParser::Func_fields_importContext::func_fields_import_result() {
  return getRuleContext<WatParser::Func_fields_import_resultContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_importContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_importContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_importContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_importContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_importContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_importContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import;
}

void WatParser::Func_fields_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import(this);
}

void WatParser::Func_fields_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import(this);
}


std::any WatParser::Func_fields_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_importContext* WatParser::func_fields_import() {
  Func_fields_importContext *_localctx = _tracker.createInstance<Func_fields_importContext>(_ctx, getState());
  enterRule(_localctx, 82, WatParser::RuleFunc_fields_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(935);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(933);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx)) {
        case 1: {
          setState(918);
          match(WatParser::LPAR);
          setState(919);
          match(WatParser::PARAM);
          setState(923);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 3379905154) != 0)) {
            setState(920);
            val_type();
            setState(925);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(926);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(927);
          match(WatParser::LPAR);
          setState(928);
          match(WatParser::PARAM);
          setState(929);
          bind_var();
          setState(930);
          val_type();
          setState(931);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(937);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 112, _ctx);
    }
    setState(938);
    func_fields_import_result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_import_resultContext ------------------------------------------------------------------

WatParser::Func_fields_import_resultContext::Func_fields_import_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_import_resultContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_import_resultContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_import_resultContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import_result;
}

void WatParser::Func_fields_import_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import_result(this);
}

void WatParser::Func_fields_import_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import_result(this);
}


std::any WatParser::Func_fields_import_resultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import_result(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_import_resultContext* WatParser::func_fields_import_result() {
  Func_fields_import_resultContext *_localctx = _tracker.createInstance<Func_fields_import_resultContext>(_ctx, getState());
  enterRule(_localctx, 84, WatParser::RuleFunc_fields_import_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(951);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(940);
      match(WatParser::LPAR);
      setState(941);
      match(WatParser::RESULT);
      setState(945);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3379905154) != 0)) {
        setState(942);
        val_type();
        setState(947);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(948);
      match(WatParser::RPAR);
      setState(953);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_bodyContext ------------------------------------------------------------------

WatParser::Func_fields_bodyContext::Func_fields_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_result_bodyContext* WatParser::Func_fields_bodyContext::func_result_body() {
  return getRuleContext<WatParser::Func_result_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_body;
}

void WatParser::Func_fields_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_body(this);
}

void WatParser::Func_fields_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_body(this);
}


std::any WatParser::Func_fields_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_bodyContext* WatParser::func_fields_body() {
  Func_fields_bodyContext *_localctx = _tracker.createInstance<Func_fields_bodyContext>(_ctx, getState());
  enterRule(_localctx, 86, WatParser::RuleFunc_fields_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(971);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(969);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
        case 1: {
          setState(954);
          match(WatParser::LPAR);
          setState(955);
          match(WatParser::PARAM);
          setState(959);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 3379905154) != 0)) {
            setState(956);
            val_type();
            setState(961);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(962);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(963);
          match(WatParser::LPAR);
          setState(964);
          match(WatParser::PARAM);
          setState(965);
          bind_var();
          setState(966);
          val_type();
          setState(967);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(973);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 117, _ctx);
    }
    setState(974);
    func_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_result_bodyContext ------------------------------------------------------------------

WatParser::Func_result_bodyContext::Func_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_bodyContext* WatParser::Func_result_bodyContext::func_body() {
  return getRuleContext<WatParser::Func_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_result_body;
}

void WatParser::Func_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_result_body(this);
}

void WatParser::Func_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_result_body(this);
}


std::any WatParser::Func_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_result_bodyContext* WatParser::func_result_body() {
  Func_result_bodyContext *_localctx = _tracker.createInstance<Func_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 88, WatParser::RuleFunc_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(987);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(976);
        match(WatParser::LPAR);
        setState(977);
        match(WatParser::RESULT);
        setState(981);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 3379905154) != 0)) {
          setState(978);
          val_type();
          setState(983);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(984);
        match(WatParser::RPAR); 
      }
      setState(989);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 119, _ctx);
    }
    setState(990);
    func_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_bodyContext ------------------------------------------------------------------

WatParser::Func_bodyContext::Func_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Func_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LOCAL() {
  return getTokens(WatParser::LOCAL);
}

tree::TerminalNode* WatParser::Func_bodyContext::LOCAL(size_t i) {
  return getToken(WatParser::LOCAL, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_body;
}

void WatParser::Func_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_body(this);
}

void WatParser::Func_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_body(this);
}


std::any WatParser::Func_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_bodyContext* WatParser::func_body() {
  Func_bodyContext *_localctx = _tracker.createInstance<Func_bodyContext>(_ctx, getState());
  enterRule(_localctx, 90, WatParser::RuleFunc_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1008);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(992);
        match(WatParser::LPAR);
        setState(993);
        match(WatParser::LOCAL);
        setState(1003);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::VAR: {
            setState(994);
            bind_var();
            setState(995);
            val_type();
            break;
          }

          case WatParser::LPAR:
          case WatParser::RPAR:
          case WatParser::NUM_TYPE:
          case WatParser::VEC_TYPE:
          case WatParser::ANYREF:
          case WatParser::NULLREF:
          case WatParser::EQREF:
          case WatParser::I31REF:
          case WatParser::STRUCTREF:
          case WatParser::ARRAYREF:
          case WatParser::FUNCREF:
          case WatParser::NULLFUNCREF:
          case WatParser::EXTERNREF:
          case WatParser::NULLEXTERNREF: {
            setState(1000);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 3379905154) != 0)) {
              setState(997);
              val_type();
              setState(1002);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1005);
        match(WatParser::RPAR); 
      }
      setState(1010);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
    setState(1011);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_useContext ------------------------------------------------------------------

WatParser::Table_useContext::Table_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Table_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_useContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Var_Context* WatParser::Table_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Table_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Table_useContext::getRuleIndex() const {
  return WatParser::RuleTable_use;
}

void WatParser::Table_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_use(this);
}

void WatParser::Table_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_use(this);
}


std::any WatParser::Table_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_useContext* WatParser::table_use() {
  Table_useContext *_localctx = _tracker.createInstance<Table_useContext>(_ctx, getState());
  enterRule(_localctx, 92, WatParser::RuleTable_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1013);
    match(WatParser::LPAR);
    setState(1014);
    match(WatParser::TABLE);
    setState(1015);
    var_();
    setState(1016);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_useContext ------------------------------------------------------------------

WatParser::Memory_useContext::Memory_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Memory_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_useContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Var_Context* WatParser::Memory_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Memory_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Memory_useContext::getRuleIndex() const {
  return WatParser::RuleMemory_use;
}

void WatParser::Memory_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_use(this);
}

void WatParser::Memory_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_use(this);
}


std::any WatParser::Memory_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_useContext* WatParser::memory_use() {
  Memory_useContext *_localctx = _tracker.createInstance<Memory_useContext>(_ctx, getState());
  enterRule(_localctx, 94, WatParser::RuleMemory_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1018);
    match(WatParser::LPAR);
    setState(1019);
    match(WatParser::MEMORY);
    setState(1020);
    var_();
    setState(1021);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetContext ------------------------------------------------------------------

WatParser::OffsetContext::OffsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::OffsetContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::OffsetContext::OFFSET() {
  return getToken(WatParser::OFFSET, 0);
}

WatParser::Const_exprContext* WatParser::OffsetContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::OffsetContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::OffsetContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::OffsetContext::getRuleIndex() const {
  return WatParser::RuleOffset;
}

void WatParser::OffsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOffset(this);
}

void WatParser::OffsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOffset(this);
}


std::any WatParser::OffsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitOffset(this);
  else
    return visitor->visitChildren(this);
}

WatParser::OffsetContext* WatParser::offset() {
  OffsetContext *_localctx = _tracker.createInstance<OffsetContext>(_ctx, getState());
  enterRule(_localctx, 96, WatParser::RuleOffset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1029);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 123, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1023);
      match(WatParser::LPAR);
      setState(1024);
      match(WatParser::OFFSET);
      setState(1025);
      const_expr();
      setState(1026);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1028);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_kindContext ------------------------------------------------------------------

WatParser::Elem_kindContext::Elem_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_kindContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}


size_t WatParser::Elem_kindContext::getRuleIndex() const {
  return WatParser::RuleElem_kind;
}

void WatParser::Elem_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_kind(this);
}

void WatParser::Elem_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_kind(this);
}


std::any WatParser::Elem_kindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_kind(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_kindContext* WatParser::elem_kind() {
  Elem_kindContext *_localctx = _tracker.createInstance<Elem_kindContext>(_ctx, getState());
  enterRule(_localctx, 98, WatParser::RuleElem_kind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1031);
    match(WatParser::FUNC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_exprContext ------------------------------------------------------------------

WatParser::Elem_exprContext::Elem_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_exprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Elem_exprContext::ITEM() {
  return getToken(WatParser::ITEM, 0);
}

WatParser::Const_exprContext* WatParser::Elem_exprContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::Elem_exprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::Elem_exprContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::Elem_exprContext::getRuleIndex() const {
  return WatParser::RuleElem_expr;
}

void WatParser::Elem_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_expr(this);
}

void WatParser::Elem_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_expr(this);
}


std::any WatParser::Elem_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_exprContext* WatParser::elem_expr() {
  Elem_exprContext *_localctx = _tracker.createInstance<Elem_exprContext>(_ctx, getState());
  enterRule(_localctx, 100, WatParser::RuleElem_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1039);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1033);
      match(WatParser::LPAR);
      setState(1034);
      match(WatParser::ITEM);
      setState(1035);
      const_expr();
      setState(1036);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1038);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_listContext ------------------------------------------------------------------

WatParser::Elem_listContext::Elem_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Elem_kindContext* WatParser::Elem_listContext::elem_kind() {
  return getRuleContext<WatParser::Elem_kindContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::Elem_listContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Elem_listContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

WatParser::Ref_typeContext* WatParser::Elem_listContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Elem_listContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Elem_listContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Elem_listContext::getRuleIndex() const {
  return WatParser::RuleElem_list;
}

void WatParser::Elem_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_list(this);
}

void WatParser::Elem_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_list(this);
}


std::any WatParser::Elem_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_listContext* WatParser::elem_list() {
  Elem_listContext *_localctx = _tracker.createInstance<Elem_listContext>(_ctx, getState());
  enterRule(_localctx, 102, WatParser::RuleElem_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1055);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::FUNC: {
        enterOuterAlt(_localctx, 1);
        setState(1041);
        elem_kind();
        setState(1045);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1042);
          var_();
          setState(1047);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF: {
        enterOuterAlt(_localctx, 2);
        setState(1048);
        ref_type();
        setState(1052);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1049);
          elem_expr();
          setState(1054);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemContext ------------------------------------------------------------------

WatParser::ElemContext::ElemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ElemContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ElemContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

WatParser::Elem_listContext* WatParser::ElemContext::elem_list() {
  return getRuleContext<WatParser::Elem_listContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Table_useContext* WatParser::ElemContext::table_use() {
  return getRuleContext<WatParser::Table_useContext>(0);
}

WatParser::OffsetContext* WatParser::ElemContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::DECLARE() {
  return getToken(WatParser::DECLARE, 0);
}

WatParser::Bind_varContext* WatParser::ElemContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::ElemContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::ElemContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::ElemContext::getRuleIndex() const {
  return WatParser::RuleElem;
}

void WatParser::ElemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem(this);
}

void WatParser::ElemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem(this);
}


std::any WatParser::ElemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemContext* WatParser::elem() {
  ElemContext *_localctx = _tracker.createInstance<ElemContext>(_ctx, getState());
  enterRule(_localctx, 104, WatParser::RuleElem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1088);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1057);
      match(WatParser::LPAR);
      setState(1058);
      match(WatParser::ELEM);
      setState(1060);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1059);
        bind_var();
      }
      setState(1069);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 130, _ctx)) {
      case 1: {
        setState(1062);
        table_use();
        setState(1063);
        offset();
        break;
      }

      case 2: {
        setState(1066);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx)) {
        case 1: {
          setState(1065);
          offset();
          break;
        }

        default:
          break;
        }
        break;
      }

      case 3: {
        setState(1068);
        match(WatParser::DECLARE);
        break;
      }

      default:
        break;
      }
      setState(1071);
      elem_list();
      setState(1072);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1074);
      match(WatParser::LPAR);
      setState(1075);
      match(WatParser::ELEM);
      setState(1077);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1076);
        bind_var();
      }
      setState(1079);
      offset();
      setState(1083);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(1080);
        var_();
        setState(1085);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1086);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableContext ------------------------------------------------------------------

WatParser::TableContext::TableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::TableContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::TableContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_fieldsContext* WatParser::TableContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

tree::TerminalNode* WatParser::TableContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::TableContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::TableContext::getRuleIndex() const {
  return WatParser::RuleTable;
}

void WatParser::TableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable(this);
}

void WatParser::TableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable(this);
}


std::any WatParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableContext* WatParser::table() {
  TableContext *_localctx = _tracker.createInstance<TableContext>(_ctx, getState());
  enterRule(_localctx, 106, WatParser::RuleTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1090);
    match(WatParser::LPAR);
    setState(1091);
    match(WatParser::TABLE);
    setState(1093);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1092);
      bind_var();
    }
    setState(1095);
    table_fields();
    setState(1096);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_fieldsContext ------------------------------------------------------------------

WatParser::Table_fieldsContext::Table_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Table_typeContext* WatParser::Table_fieldsContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

WatParser::InstrContext* WatParser::Table_fieldsContext::instr() {
  return getRuleContext<WatParser::InstrContext>(0);
}

WatParser::Instr_listContext* WatParser::Table_fieldsContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Inline_importContext* WatParser::Table_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Table_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Table_fieldsContext* WatParser::Table_fieldsContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

WatParser::Ref_typeContext* WatParser::Table_fieldsContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Table_fieldsContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Table_fieldsContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Table_fieldsContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Table_fieldsContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Table_fieldsContext::getRuleIndex() const {
  return WatParser::RuleTable_fields;
}

void WatParser::Table_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_fields(this);
}

void WatParser::Table_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_fields(this);
}


std::any WatParser::Table_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_fieldsContext* WatParser::table_fields() {
  Table_fieldsContext *_localctx = _tracker.createInstance<Table_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 108, WatParser::RuleTable_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1129);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1098);
      table_type();
      setState(1102);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -67070209288190) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1688851013763073) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 2047) != 0)) {
        setState(1099);
        instr();
        setState(1100);
        instr_list();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1104);
      inline_import();
      setState(1105);
      table_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1107);
      inline_export();
      setState(1108);
      table_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1110);
      ref_type();
      setState(1111);
      match(WatParser::LPAR);
      setState(1112);
      match(WatParser::ELEM);
      setState(1125);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 138, _ctx)) {
      case 1: {
        setState(1116);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1113);
          var_();
          setState(1118);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(1122);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1119);
          elem_expr();
          setState(1124);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(1127);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataContext ------------------------------------------------------------------

WatParser::DataContext::DataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::DataContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::DataContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

WatParser::Memory_useContext* WatParser::DataContext::memory_use() {
  return getRuleContext<WatParser::Memory_useContext>(0);
}

WatParser::OffsetContext* WatParser::DataContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::DataContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::DataContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::DataContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::DataContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::DataContext::getRuleIndex() const {
  return WatParser::RuleData;
}

void WatParser::DataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData(this);
}

void WatParser::DataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData(this);
}


std::any WatParser::DataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitData(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DataContext* WatParser::data() {
  DataContext *_localctx = _tracker.createInstance<DataContext>(_ctx, getState());
  enterRule(_localctx, 110, WatParser::RuleData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1161);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 145, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1131);
      match(WatParser::LPAR);
      setState(1132);
      match(WatParser::DATA);
      setState(1134);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1133);
        bind_var();
      }
      setState(1136);
      memory_use();
      setState(1137);
      offset();
      setState(1141);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1138);
        match(WatParser::STRING_);
        setState(1143);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1144);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1146);
      match(WatParser::LPAR);
      setState(1147);
      match(WatParser::DATA);
      setState(1149);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1148);
        bind_var();
      }
      setState(1152);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::LPAR) {
        setState(1151);
        offset();
      }
      setState(1157);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1154);
        match(WatParser::STRING_);
        setState(1159);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1160);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemoryContext ------------------------------------------------------------------

WatParser::MemoryContext::MemoryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MemoryContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MemoryContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_fieldsContext* WatParser::MemoryContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::MemoryContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::MemoryContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::MemoryContext::getRuleIndex() const {
  return WatParser::RuleMemory;
}

void WatParser::MemoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory(this);
}

void WatParser::MemoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory(this);
}


std::any WatParser::MemoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemoryContext* WatParser::memory() {
  MemoryContext *_localctx = _tracker.createInstance<MemoryContext>(_ctx, getState());
  enterRule(_localctx, 112, WatParser::RuleMemory);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1163);
    match(WatParser::LPAR);
    setState(1164);
    match(WatParser::MEMORY);
    setState(1166);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1165);
      bind_var();
    }
    setState(1168);
    memory_fields();
    setState(1169);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_fieldsContext ------------------------------------------------------------------

WatParser::Memory_fieldsContext::Memory_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Memory_typeContext* WatParser::Memory_fieldsContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

WatParser::Inline_importContext* WatParser::Memory_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Memory_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Memory_fieldsContext* WatParser::Memory_fieldsContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Memory_fieldsContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Memory_fieldsContext::getRuleIndex() const {
  return WatParser::RuleMemory_fields;
}

void WatParser::Memory_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_fields(this);
}

void WatParser::Memory_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_fields(this);
}


std::any WatParser::Memory_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_fieldsContext* WatParser::memory_fields() {
  Memory_fieldsContext *_localctx = _tracker.createInstance<Memory_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 114, WatParser::RuleMemory_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1187);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 148, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1171);
      memory_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1172);
      inline_import();
      setState(1173);
      memory_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1175);
      inline_export();
      setState(1176);
      memory_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1178);
      match(WatParser::LPAR);
      setState(1179);
      match(WatParser::DATA);
      setState(1183);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1180);
        match(WatParser::STRING_);
        setState(1185);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1186);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SglobalContext ------------------------------------------------------------------

WatParser::SglobalContext::SglobalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SglobalContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SglobalContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_fieldsContext* WatParser::SglobalContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}

tree::TerminalNode* WatParser::SglobalContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::SglobalContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::SglobalContext::getRuleIndex() const {
  return WatParser::RuleSglobal;
}

void WatParser::SglobalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSglobal(this);
}

void WatParser::SglobalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSglobal(this);
}


std::any WatParser::SglobalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSglobal(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SglobalContext* WatParser::sglobal() {
  SglobalContext *_localctx = _tracker.createInstance<SglobalContext>(_ctx, getState());
  enterRule(_localctx, 116, WatParser::RuleSglobal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1189);
    match(WatParser::LPAR);
    setState(1190);
    match(WatParser::GLOBAL);
    setState(1192);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1191);
      bind_var();
    }
    setState(1194);
    global_fields();
    setState(1195);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_fieldsContext ------------------------------------------------------------------

WatParser::Global_fieldsContext::Global_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Global_typeContext* WatParser::Global_fieldsContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}

WatParser::Const_exprContext* WatParser::Global_fieldsContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

WatParser::Inline_importContext* WatParser::Global_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Global_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Global_fieldsContext* WatParser::Global_fieldsContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}


size_t WatParser::Global_fieldsContext::getRuleIndex() const {
  return WatParser::RuleGlobal_fields;
}

void WatParser::Global_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_fields(this);
}

void WatParser::Global_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_fields(this);
}


std::any WatParser::Global_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_fieldsContext* WatParser::global_fields() {
  Global_fieldsContext *_localctx = _tracker.createInstance<Global_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 118, WatParser::RuleGlobal_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1206);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1197);
      global_type();
      setState(1198);
      const_expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1200);
      inline_import();
      setState(1201);
      global_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1203);
      inline_export();
      setState(1204);
      global_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_descContext ------------------------------------------------------------------

WatParser::Import_descContext::Import_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Import_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Import_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Import_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Type_useContext* WatParser::Import_descContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Func_typeContext* WatParser::Import_descContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}

WatParser::Bind_varContext* WatParser::Import_descContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_typeContext* WatParser::Import_descContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_typeContext* WatParser::Import_descContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_typeContext* WatParser::Import_descContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}


size_t WatParser::Import_descContext::getRuleIndex() const {
  return WatParser::RuleImport_desc;
}

void WatParser::Import_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_desc(this);
}

void WatParser::Import_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_desc(this);
}


std::any WatParser::Import_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitImport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Import_descContext* WatParser::import_desc() {
  Import_descContext *_localctx = _tracker.createInstance<Import_descContext>(_ctx, getState());
  enterRule(_localctx, 120, WatParser::RuleImport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1243);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1208);
      match(WatParser::LPAR);
      setState(1209);
      match(WatParser::FUNC);
      setState(1211);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1210);
        bind_var();
      }
      setState(1215);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 152, _ctx)) {
      case 1: {
        setState(1213);
        type_use();
        break;
      }

      case 2: {
        setState(1214);
        func_type();
        break;
      }

      default:
        break;
      }
      setState(1217);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1219);
      match(WatParser::LPAR);
      setState(1220);
      match(WatParser::TABLE);
      setState(1222);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1221);
        bind_var();
      }
      setState(1224);
      table_type();
      setState(1225);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1227);
      match(WatParser::LPAR);
      setState(1228);
      match(WatParser::MEMORY);
      setState(1230);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1229);
        bind_var();
      }
      setState(1232);
      memory_type();
      setState(1233);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1235);
      match(WatParser::LPAR);
      setState(1236);
      match(WatParser::GLOBAL);
      setState(1238);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1237);
        bind_var();
      }
      setState(1240);
      global_type();
      setState(1241);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimportContext ------------------------------------------------------------------

WatParser::SimportContext::SimportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SimportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SimportContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::SimportContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::SimportContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

WatParser::Import_descContext* WatParser::SimportContext::import_desc() {
  return getRuleContext<WatParser::Import_descContext>(0);
}

tree::TerminalNode* WatParser::SimportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::SimportContext::getRuleIndex() const {
  return WatParser::RuleSimport;
}

void WatParser::SimportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimport(this);
}

void WatParser::SimportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimport(this);
}


std::any WatParser::SimportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSimport(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SimportContext* WatParser::simport() {
  SimportContext *_localctx = _tracker.createInstance<SimportContext>(_ctx, getState());
  enterRule(_localctx, 122, WatParser::RuleSimport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1245);
    match(WatParser::LPAR);
    setState(1246);
    match(WatParser::IMPORT);
    setState(1247);
    name();
    setState(1248);
    name();
    setState(1249);
    import_desc();
    setState(1250);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_importContext ------------------------------------------------------------------

WatParser::Inline_importContext::Inline_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_importContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_importContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::Inline_importContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::Inline_importContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

tree::TerminalNode* WatParser::Inline_importContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_importContext::getRuleIndex() const {
  return WatParser::RuleInline_import;
}

void WatParser::Inline_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_import(this);
}

void WatParser::Inline_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_import(this);
}


std::any WatParser::Inline_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_importContext* WatParser::inline_import() {
  Inline_importContext *_localctx = _tracker.createInstance<Inline_importContext>(_ctx, getState());
  enterRule(_localctx, 124, WatParser::RuleInline_import);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1252);
    match(WatParser::LPAR);
    setState(1253);
    match(WatParser::IMPORT);
    setState(1254);
    name();
    setState(1255);
    name();
    setState(1256);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_descContext ------------------------------------------------------------------

WatParser::Export_descContext::Export_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

WatParser::Var_Context* WatParser::Export_descContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Export_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Export_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Export_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

tree::TerminalNode* WatParser::Export_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

tree::TerminalNode* WatParser::Export_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}


size_t WatParser::Export_descContext::getRuleIndex() const {
  return WatParser::RuleExport_desc;
}

void WatParser::Export_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_desc(this);
}

void WatParser::Export_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_desc(this);
}


std::any WatParser::Export_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_descContext* WatParser::export_desc() {
  Export_descContext *_localctx = _tracker.createInstance<Export_descContext>(_ctx, getState());
  enterRule(_localctx, 126, WatParser::RuleExport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1258);
    match(WatParser::LPAR);
    setState(1259);
    _la = _input->LA(1);
    if (!(((((_la - 140) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 140)) & 225) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1260);
    var_();
    setState(1261);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_Context ------------------------------------------------------------------

WatParser::Export_Context::Export_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Export_Context::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Export_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Export_descContext* WatParser::Export_Context::export_desc() {
  return getRuleContext<WatParser::Export_descContext>(0);
}

tree::TerminalNode* WatParser::Export_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Export_Context::getRuleIndex() const {
  return WatParser::RuleExport_;
}

void WatParser::Export_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_(this);
}

void WatParser::Export_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_(this);
}


std::any WatParser::Export_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_Context* WatParser::export_() {
  Export_Context *_localctx = _tracker.createInstance<Export_Context>(_ctx, getState());
  enterRule(_localctx, 128, WatParser::RuleExport_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1263);
    match(WatParser::LPAR);
    setState(1264);
    match(WatParser::EXPORT);
    setState(1265);
    name();
    setState(1266);
    export_desc();
    setState(1267);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_exportContext ------------------------------------------------------------------

WatParser::Inline_exportContext::Inline_exportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_exportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_exportContext::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Inline_exportContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::Inline_exportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_exportContext::getRuleIndex() const {
  return WatParser::RuleInline_export;
}

void WatParser::Inline_exportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_export(this);
}

void WatParser::Inline_exportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_export(this);
}


std::any WatParser::Inline_exportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_export(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_exportContext* WatParser::inline_export() {
  Inline_exportContext *_localctx = _tracker.createInstance<Inline_exportContext>(_ctx, getState());
  enterRule(_localctx, 130, WatParser::RuleInline_export);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1269);
    match(WatParser::LPAR);
    setState(1270);
    match(WatParser::EXPORT);
    setState(1271);
    name();
    setState(1272);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_defContext ------------------------------------------------------------------

WatParser::Type_defContext::Type_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_defContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_defContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Sub_typeContext* WatParser::Type_defContext::sub_type() {
  return getRuleContext<WatParser::Sub_typeContext>(0);
}

tree::TerminalNode* WatParser::Type_defContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Type_defContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Type_defContext::getRuleIndex() const {
  return WatParser::RuleType_def;
}

void WatParser::Type_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_def(this);
}

void WatParser::Type_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_def(this);
}


std::any WatParser::Type_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_def(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_defContext* WatParser::type_def() {
  Type_defContext *_localctx = _tracker.createInstance<Type_defContext>(_ctx, getState());
  enterRule(_localctx, 132, WatParser::RuleType_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1274);
    match(WatParser::LPAR);
    setState(1275);
    match(WatParser::TYPE);
    setState(1277);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1276);
      bind_var();
    }
    setState(1279);
    sub_type();
    setState(1280);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rec_typeContext ------------------------------------------------------------------

WatParser::Rec_typeContext::Rec_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_defContext *> WatParser::Rec_typeContext::type_def() {
  return getRuleContexts<WatParser::Type_defContext>();
}

WatParser::Type_defContext* WatParser::Rec_typeContext::type_def(size_t i) {
  return getRuleContext<WatParser::Type_defContext>(i);
}

tree::TerminalNode* WatParser::Rec_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::REC() {
  return getToken(WatParser::REC, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Rec_typeContext::getRuleIndex() const {
  return WatParser::RuleRec_type;
}

void WatParser::Rec_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRec_type(this);
}

void WatParser::Rec_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRec_type(this);
}


std::any WatParser::Rec_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRec_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Rec_typeContext* WatParser::rec_type() {
  Rec_typeContext *_localctx = _tracker.createInstance<Rec_typeContext>(_ctx, getState());
  enterRule(_localctx, 134, WatParser::RuleRec_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1292);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 159, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1282);
      type_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1283);
      match(WatParser::LPAR);
      setState(1284);
      match(WatParser::REC);
      setState(1288);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1285);
        type_def();
        setState(1290);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1291);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

WatParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Rec_typeContext* WatParser::Type_Context::rec_type() {
  return getRuleContext<WatParser::Rec_typeContext>(0);
}


size_t WatParser::Type_Context::getRuleIndex() const {
  return WatParser::RuleType_;
}

void WatParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void WatParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}


std::any WatParser::Type_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_Context* WatParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 136, WatParser::RuleType_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1294);
    rec_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_Context ------------------------------------------------------------------

WatParser::Start_Context::Start_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Start_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Start_Context::START_() {
  return getToken(WatParser::START_, 0);
}

WatParser::Var_Context* WatParser::Start_Context::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Start_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Start_Context::getRuleIndex() const {
  return WatParser::RuleStart_;
}

void WatParser::Start_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_(this);
}

void WatParser::Start_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_(this);
}


std::any WatParser::Start_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStart_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Start_Context* WatParser::start_() {
  Start_Context *_localctx = _tracker.createInstance<Start_Context>(_ctx, getState());
  enterRule(_localctx, 138, WatParser::RuleStart_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1296);
    match(WatParser::LPAR);
    setState(1297);
    match(WatParser::START_);
    setState(1298);
    var_();
    setState(1299);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_fieldContext ------------------------------------------------------------------

WatParser::Module_fieldContext::Module_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_Context *> WatParser::Module_fieldContext::type_() {
  return getRuleContexts<WatParser::Type_Context>();
}

WatParser::Type_Context* WatParser::Module_fieldContext::type_(size_t i) {
  return getRuleContext<WatParser::Type_Context>(i);
}

std::vector<WatParser::SglobalContext *> WatParser::Module_fieldContext::sglobal() {
  return getRuleContexts<WatParser::SglobalContext>();
}

WatParser::SglobalContext* WatParser::Module_fieldContext::sglobal(size_t i) {
  return getRuleContext<WatParser::SglobalContext>(i);
}

std::vector<WatParser::TableContext *> WatParser::Module_fieldContext::table() {
  return getRuleContexts<WatParser::TableContext>();
}

WatParser::TableContext* WatParser::Module_fieldContext::table(size_t i) {
  return getRuleContext<WatParser::TableContext>(i);
}

std::vector<WatParser::MemoryContext *> WatParser::Module_fieldContext::memory() {
  return getRuleContexts<WatParser::MemoryContext>();
}

WatParser::MemoryContext* WatParser::Module_fieldContext::memory(size_t i) {
  return getRuleContext<WatParser::MemoryContext>(i);
}

std::vector<WatParser::Func_Context *> WatParser::Module_fieldContext::func_() {
  return getRuleContexts<WatParser::Func_Context>();
}

WatParser::Func_Context* WatParser::Module_fieldContext::func_(size_t i) {
  return getRuleContext<WatParser::Func_Context>(i);
}

std::vector<WatParser::ElemContext *> WatParser::Module_fieldContext::elem() {
  return getRuleContexts<WatParser::ElemContext>();
}

WatParser::ElemContext* WatParser::Module_fieldContext::elem(size_t i) {
  return getRuleContext<WatParser::ElemContext>(i);
}

std::vector<WatParser::DataContext *> WatParser::Module_fieldContext::data() {
  return getRuleContexts<WatParser::DataContext>();
}

WatParser::DataContext* WatParser::Module_fieldContext::data(size_t i) {
  return getRuleContext<WatParser::DataContext>(i);
}

std::vector<WatParser::Start_Context *> WatParser::Module_fieldContext::start_() {
  return getRuleContexts<WatParser::Start_Context>();
}

WatParser::Start_Context* WatParser::Module_fieldContext::start_(size_t i) {
  return getRuleContext<WatParser::Start_Context>(i);
}

std::vector<WatParser::SimportContext *> WatParser::Module_fieldContext::simport() {
  return getRuleContexts<WatParser::SimportContext>();
}

WatParser::SimportContext* WatParser::Module_fieldContext::simport(size_t i) {
  return getRuleContext<WatParser::SimportContext>(i);
}

std::vector<WatParser::Export_Context *> WatParser::Module_fieldContext::export_() {
  return getRuleContexts<WatParser::Export_Context>();
}

WatParser::Export_Context* WatParser::Module_fieldContext::export_(size_t i) {
  return getRuleContext<WatParser::Export_Context>(i);
}


size_t WatParser::Module_fieldContext::getRuleIndex() const {
  return WatParser::RuleModule_field;
}

void WatParser::Module_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_field(this);
}

void WatParser::Module_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_field(this);
}


std::any WatParser::Module_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_field(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_fieldContext* WatParser::module_field() {
  Module_fieldContext *_localctx = _tracker.createInstance<Module_fieldContext>(_ctx, getState());
  enterRule(_localctx, 140, WatParser::RuleModule_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1311); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1311);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 160, _ctx)) {
              case 1: {
                setState(1301);
                type_();
                break;
              }

              case 2: {
                setState(1302);
                sglobal();
                break;
              }

              case 3: {
                setState(1303);
                table();
                break;
              }

              case 4: {
                setState(1304);
                memory();
                break;
              }

              case 5: {
                setState(1305);
                func_();
                break;
              }

              case 6: {
                setState(1306);
                elem();
                break;
              }

              case 7: {
                setState(1307);
                data();
                break;
              }

              case 8: {
                setState(1308);
                start_();
                break;
              }

              case 9: {
                setState(1309);
                simport();
                break;
              }

              case 10: {
                setState(1310);
                export_();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1313); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 161, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_Context ------------------------------------------------------------------

WatParser::Module_Context::Module_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Module_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Module_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::Module_Context::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::Module_Context::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::Module_Context::getRuleIndex() const {
  return WatParser::RuleModule_;
}

void WatParser::Module_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_(this);
}

void WatParser::Module_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_(this);
}


std::any WatParser::Module_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_Context* WatParser::module_() {
  Module_Context *_localctx = _tracker.createInstance<Module_Context>(_ctx, getState());
  enterRule(_localctx, 142, WatParser::RuleModule_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1315);
    match(WatParser::LPAR);
    setState(1316);
    match(WatParser::MODULE);
    setState(1318);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1317);
      match(WatParser::VAR);
    }
    setState(1323);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1320);
      module_field();
      setState(1325);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1326);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_moduleContext ------------------------------------------------------------------

WatParser::Inline_moduleContext::Inline_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_fieldContext* WatParser::Inline_moduleContext::module_field() {
  return getRuleContext<WatParser::Module_fieldContext>(0);
}


size_t WatParser::Inline_moduleContext::getRuleIndex() const {
  return WatParser::RuleInline_module;
}

void WatParser::Inline_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_module(this);
}

void WatParser::Inline_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_module(this);
}


std::any WatParser::Inline_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_moduleContext* WatParser::inline_module() {
  Inline_moduleContext *_localctx = _tracker.createInstance<Inline_moduleContext>(_ctx, getState());
  enterRule(_localctx, 144, WatParser::RuleInline_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1329);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(1328);
      module_field();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Script_moduleContext ------------------------------------------------------------------

WatParser::Script_moduleContext::Script_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::Script_moduleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::Script_moduleContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::BIN() {
  return getToken(WatParser::BIN, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::QUOTE() {
  return getToken(WatParser::QUOTE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Script_moduleContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Script_moduleContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Script_moduleContext::getRuleIndex() const {
  return WatParser::RuleScript_module;
}

void WatParser::Script_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript_module(this);
}

void WatParser::Script_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript_module(this);
}


std::any WatParser::Script_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Script_moduleContext* WatParser::script_module() {
  Script_moduleContext *_localctx = _tracker.createInstance<Script_moduleContext>(_ctx, getState());
  enterRule(_localctx, 146, WatParser::RuleScript_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1345);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1331);
      module_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1332);
      match(WatParser::LPAR);
      setState(1333);
      match(WatParser::MODULE);
      setState(1335);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1334);
        match(WatParser::VAR);
      }
      setState(1337);
      _la = _input->LA(1);
      if (!(_la == WatParser::BIN

      || _la == WatParser::QUOTE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1341);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1338);
        match(WatParser::STRING_);
        setState(1343);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1344);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_Context ------------------------------------------------------------------

WatParser::Action_Context::Action_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Action_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::INVOKE() {
  return getToken(WatParser::INVOKE, 0);
}

WatParser::NameContext* WatParser::Action_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Literal_listContext* WatParser::Action_Context::literal_list() {
  return getRuleContext<WatParser::Literal_listContext>(0);
}

tree::TerminalNode* WatParser::Action_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::GET() {
  return getToken(WatParser::GET, 0);
}


size_t WatParser::Action_Context::getRuleIndex() const {
  return WatParser::RuleAction_;
}

void WatParser::Action_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_(this);
}

void WatParser::Action_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_(this);
}


std::any WatParser::Action_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAction_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Action_Context* WatParser::action_() {
  Action_Context *_localctx = _tracker.createInstance<Action_Context>(_ctx, getState());
  enterRule(_localctx, 148, WatParser::RuleAction_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1364);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1347);
      match(WatParser::LPAR);
      setState(1348);
      match(WatParser::INVOKE);
      setState(1350);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1349);
        match(WatParser::VAR);
      }
      setState(1352);
      name();
      setState(1353);
      literal_list();
      setState(1354);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1356);
      match(WatParser::LPAR);
      setState(1357);
      match(WatParser::GET);
      setState(1359);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1358);
        match(WatParser::VAR);
      }
      setState(1361);
      name();
      setState(1362);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertionContext ------------------------------------------------------------------

WatParser::AssertionContext::AssertionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::AssertionContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_MALFORMED() {
  return getToken(WatParser::ASSERT_MALFORMED, 0);
}

WatParser::Script_moduleContext* WatParser::AssertionContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::AssertionContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::AssertionContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_INVALID() {
  return getToken(WatParser::ASSERT_INVALID, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_UNLINKABLE() {
  return getToken(WatParser::ASSERT_UNLINKABLE, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_TRAP() {
  return getToken(WatParser::ASSERT_TRAP, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_RETURN() {
  return getToken(WatParser::ASSERT_RETURN, 0);
}

WatParser::Action_Context* WatParser::AssertionContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

std::vector<WatParser::ResultContext *> WatParser::AssertionContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::AssertionContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_EXHAUSTION() {
  return getToken(WatParser::ASSERT_EXHAUSTION, 0);
}


size_t WatParser::AssertionContext::getRuleIndex() const {
  return WatParser::RuleAssertion;
}

void WatParser::AssertionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion(this);
}

void WatParser::AssertionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion(this);
}


std::any WatParser::AssertionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAssertion(this);
  else
    return visitor->visitChildren(this);
}

WatParser::AssertionContext* WatParser::assertion() {
  AssertionContext *_localctx = _tracker.createInstance<AssertionContext>(_ctx, getState());
  enterRule(_localctx, 150, WatParser::RuleAssertion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1413);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 172, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1366);
      match(WatParser::LPAR);
      setState(1367);
      match(WatParser::ASSERT_MALFORMED);
      setState(1368);
      script_module();
      setState(1369);
      match(WatParser::STRING_);
      setState(1370);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1372);
      match(WatParser::LPAR);
      setState(1373);
      match(WatParser::ASSERT_INVALID);
      setState(1374);
      script_module();
      setState(1375);
      match(WatParser::STRING_);
      setState(1376);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1378);
      match(WatParser::LPAR);
      setState(1379);
      match(WatParser::ASSERT_UNLINKABLE);
      setState(1380);
      script_module();
      setState(1381);
      match(WatParser::STRING_);
      setState(1382);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1384);
      match(WatParser::LPAR);
      setState(1385);
      match(WatParser::ASSERT_TRAP);
      setState(1386);
      script_module();
      setState(1387);
      match(WatParser::STRING_);
      setState(1388);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1390);
      match(WatParser::LPAR);
      setState(1391);
      match(WatParser::ASSERT_RETURN);
      setState(1392);
      action_();
      setState(1396);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1393);
        result();
        setState(1398);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1399);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1401);
      match(WatParser::LPAR);
      setState(1402);
      match(WatParser::ASSERT_TRAP);
      setState(1403);
      action_();
      setState(1404);
      match(WatParser::STRING_);
      setState(1405);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1407);
      match(WatParser::LPAR);
      setState(1408);
      match(WatParser::ASSERT_EXHAUSTION);
      setState(1409);
      action_();
      setState(1410);
      match(WatParser::STRING_);
      setState(1411);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CmdContext ------------------------------------------------------------------

WatParser::CmdContext::CmdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Action_Context* WatParser::CmdContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

WatParser::AssertionContext* WatParser::CmdContext::assertion() {
  return getRuleContext<WatParser::AssertionContext>(0);
}

WatParser::Script_moduleContext* WatParser::CmdContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::REGISTER() {
  return getToken(WatParser::REGISTER, 0);
}

WatParser::NameContext* WatParser::CmdContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::THREAD() {
  return getToken(WatParser::THREAD, 0);
}

WatParser::Shared_cmd_listContext* WatParser::CmdContext::shared_cmd_list() {
  return getRuleContext<WatParser::Shared_cmd_listContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::WAIT() {
  return getToken(WatParser::WAIT, 0);
}

WatParser::MetaContext* WatParser::CmdContext::meta() {
  return getRuleContext<WatParser::MetaContext>(0);
}


size_t WatParser::CmdContext::getRuleIndex() const {
  return WatParser::RuleCmd;
}

void WatParser::CmdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCmd(this);
}

void WatParser::CmdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCmd(this);
}


std::any WatParser::CmdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCmd(this);
  else
    return visitor->visitChildren(this);
}

WatParser::CmdContext* WatParser::cmd() {
  CmdContext *_localctx = _tracker.createInstance<CmdContext>(_ctx, getState());
  enterRule(_localctx, 152, WatParser::RuleCmd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1441);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 176, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1415);
      action_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1416);
      assertion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1417);
      script_module();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1418);
      match(WatParser::LPAR);
      setState(1419);
      match(WatParser::REGISTER);
      setState(1420);
      name();
      setState(1422);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1421);
        match(WatParser::VAR);
      }
      setState(1424);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1426);
      match(WatParser::LPAR);
      setState(1427);
      match(WatParser::THREAD);
      setState(1429);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1428);
        match(WatParser::VAR);
      }
      setState(1431);
      shared_cmd_list();
      setState(1432);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1434);
      match(WatParser::LPAR);
      setState(1435);
      match(WatParser::WAIT);
      setState(1437);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1436);
        match(WatParser::VAR);
      }
      setState(1439);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1440);
      meta();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shared_cmd_listContext ------------------------------------------------------------------

WatParser::Shared_cmd_listContext::Shared_cmd_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::SHARED() {
  return getTokens(WatParser::SHARED);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::SHARED(size_t i) {
  return getToken(WatParser::SHARED, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::MODULE() {
  return getTokens(WatParser::MODULE);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::MODULE(size_t i) {
  return getToken(WatParser::MODULE, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::VAR() {
  return getTokens(WatParser::VAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::VAR(size_t i) {
  return getToken(WatParser::VAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::CmdContext *> WatParser::Shared_cmd_listContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::Shared_cmd_listContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}


size_t WatParser::Shared_cmd_listContext::getRuleIndex() const {
  return WatParser::RuleShared_cmd_list;
}

void WatParser::Shared_cmd_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShared_cmd_list(this);
}

void WatParser::Shared_cmd_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShared_cmd_list(this);
}


std::any WatParser::Shared_cmd_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitShared_cmd_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Shared_cmd_listContext* WatParser::shared_cmd_list() {
  Shared_cmd_listContext *_localctx = _tracker.createInstance<Shared_cmd_listContext>(_ctx, getState());
  enterRule(_localctx, 154, WatParser::RuleShared_cmd_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1452);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1443);
        match(WatParser::LPAR);
        setState(1444);
        match(WatParser::SHARED);
        setState(1445);
        match(WatParser::LPAR);
        setState(1446);
        match(WatParser::MODULE);
        setState(1447);
        match(WatParser::VAR);
        setState(1448);
        match(WatParser::RPAR);
        setState(1449);
        match(WatParser::RPAR); 
      }
      setState(1454);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 177, _ctx);
    }
    setState(1458);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1455);
      cmd();
      setState(1460);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaContext ------------------------------------------------------------------

WatParser::MetaContext::MetaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MetaContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::SCRIPT() {
  return getToken(WatParser::SCRIPT, 0);
}

tree::TerminalNode* WatParser::MetaContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::CmdContext *> WatParser::MetaContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::MetaContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

tree::TerminalNode* WatParser::MetaContext::INPUT() {
  return getToken(WatParser::INPUT, 0);
}

tree::TerminalNode* WatParser::MetaContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::MetaContext::OUTPUT() {
  return getToken(WatParser::OUTPUT, 0);
}


size_t WatParser::MetaContext::getRuleIndex() const {
  return WatParser::RuleMeta;
}

void WatParser::MetaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta(this);
}

void WatParser::MetaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta(this);
}


std::any WatParser::MetaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMeta(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MetaContext* WatParser::meta() {
  MetaContext *_localctx = _tracker.createInstance<MetaContext>(_ctx, getState());
  enterRule(_localctx, 156, WatParser::RuleMeta);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1493);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 184, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1461);
      match(WatParser::LPAR);
      setState(1462);
      match(WatParser::SCRIPT);
      setState(1464);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1463);
        match(WatParser::VAR);
      }
      setState(1469);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1466);
        cmd();
        setState(1471);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1472);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1473);
      match(WatParser::LPAR);
      setState(1474);
      match(WatParser::INPUT);
      setState(1476);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1475);
        match(WatParser::VAR);
      }
      setState(1478);
      match(WatParser::STRING_);
      setState(1479);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1480);
      match(WatParser::LPAR);
      setState(1481);
      match(WatParser::OUTPUT);
      setState(1483);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1482);
        match(WatParser::VAR);
      }
      setState(1485);
      match(WatParser::STRING_);
      setState(1486);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1487);
      match(WatParser::LPAR);
      setState(1488);
      match(WatParser::OUTPUT);
      setState(1490);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1489);
        match(WatParser::VAR);
      }
      setState(1492);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_numContext ------------------------------------------------------------------

WatParser::Literal_numContext::Literal_numContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_numContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_numContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

WatParser::NumContext* WatParser::Literal_numContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::Literal_numContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Literal_numContext::getRuleIndex() const {
  return WatParser::RuleLiteral_num;
}

void WatParser::Literal_numContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_num(this);
}

void WatParser::Literal_numContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_num(this);
}


std::any WatParser::Literal_numContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_num(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_numContext* WatParser::literal_num() {
  Literal_numContext *_localctx = _tracker.createInstance<Literal_numContext>(_ctx, getState());
  enterRule(_localctx, 158, WatParser::RuleLiteral_num);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1495);
    match(WatParser::LPAR);
    setState(1496);
    match(WatParser::CONST);
    setState(1497);
    num();
    setState(1498);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_vecContext ------------------------------------------------------------------

WatParser::Literal_vecContext::Literal_vecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_vecContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::NumContext *> WatParser::Literal_vecContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Literal_vecContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}


size_t WatParser::Literal_vecContext::getRuleIndex() const {
  return WatParser::RuleLiteral_vec;
}

void WatParser::Literal_vecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_vec(this);
}

void WatParser::Literal_vecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_vec(this);
}


std::any WatParser::Literal_vecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_vec(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_vecContext* WatParser::literal_vec() {
  Literal_vecContext *_localctx = _tracker.createInstance<Literal_vecContext>(_ctx, getState());
  enterRule(_localctx, 160, WatParser::RuleLiteral_vec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1500);
    match(WatParser::LPAR);
    setState(1501);
    match(WatParser::VEC_CONST);
    setState(1502);
    match(WatParser::VEC_SHAPE);
    setState(1506);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0)) {
      setState(1503);
      num();
      setState(1508);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1509);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_refContext ------------------------------------------------------------------

WatParser::Literal_refContext::Literal_refContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_refContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Literal_refContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Literal_refContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_HOST() {
  return getToken(WatParser::REF_HOST, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}


size_t WatParser::Literal_refContext::getRuleIndex() const {
  return WatParser::RuleLiteral_ref;
}

void WatParser::Literal_refContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_ref(this);
}

void WatParser::Literal_refContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_ref(this);
}


std::any WatParser::Literal_refContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_ref(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_refContext* WatParser::literal_ref() {
  Literal_refContext *_localctx = _tracker.createInstance<Literal_refContext>(_ctx, getState());
  enterRule(_localctx, 162, WatParser::RuleLiteral_ref);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1524);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1511);
      match(WatParser::LPAR);
      setState(1512);
      match(WatParser::REF_NULL);
      setState(1513);
      heap_type();
      setState(1514);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1516);
      match(WatParser::LPAR);
      setState(1517);
      match(WatParser::REF_HOST);
      setState(1518);
      match(WatParser::NAT);
      setState(1519);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1520);
      match(WatParser::LPAR);
      setState(1521);
      match(WatParser::REF_EXTERN);
      setState(1522);
      match(WatParser::NAT);
      setState(1523);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

WatParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::LiteralContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_vecContext* WatParser::LiteralContext::literal_vec() {
  return getRuleContext<WatParser::Literal_vecContext>(0);
}

WatParser::Literal_refContext* WatParser::LiteralContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}


size_t WatParser::LiteralContext::getRuleIndex() const {
  return WatParser::RuleLiteral;
}

void WatParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void WatParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}


std::any WatParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LiteralContext* WatParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 164, WatParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1529);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 187, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1526);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1527);
      literal_vec();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1528);
      literal_ref();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_listContext ------------------------------------------------------------------

WatParser::Literal_listContext::Literal_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::LiteralContext *> WatParser::Literal_listContext::literal() {
  return getRuleContexts<WatParser::LiteralContext>();
}

WatParser::LiteralContext* WatParser::Literal_listContext::literal(size_t i) {
  return getRuleContext<WatParser::LiteralContext>(i);
}


size_t WatParser::Literal_listContext::getRuleIndex() const {
  return WatParser::RuleLiteral_list;
}

void WatParser::Literal_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_list(this);
}

void WatParser::Literal_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_list(this);
}


std::any WatParser::Literal_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_listContext* WatParser::literal_list() {
  Literal_listContext *_localctx = _tracker.createInstance<Literal_listContext>(_ctx, getState());
  enterRule(_localctx, 166, WatParser::RuleLiteral_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1534);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1531);
      literal();
      setState(1536);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumpatContext ------------------------------------------------------------------

WatParser::NumpatContext::NumpatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::NumContext* WatParser::NumpatContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::NumpatContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}


size_t WatParser::NumpatContext::getRuleIndex() const {
  return WatParser::RuleNumpat;
}

void WatParser::NumpatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumpat(this);
}

void WatParser::NumpatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumpat(this);
}


std::any WatParser::NumpatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNumpat(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumpatContext* WatParser::numpat() {
  NumpatContext *_localctx = _tracker.createInstance<NumpatContext>(_ctx, getState());
  enterRule(_localctx, 168, WatParser::RuleNumpat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1539);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NAT:
      case WatParser::INT:
      case WatParser::FLOAT: {
        enterOuterAlt(_localctx, 1);
        setState(1537);
        num();
        break;
      }

      case WatParser::NAN_: {
        enterOuterAlt(_localctx, 2);
        setState(1538);
        match(WatParser::NAN_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

WatParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::ResultContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_refContext* WatParser::ResultContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}

tree::TerminalNode* WatParser::ResultContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}

tree::TerminalNode* WatParser::ResultContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF() {
  return getToken(WatParser::REF, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_STRUCT() {
  return getToken(WatParser::REF_STRUCT, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_ARRAY() {
  return getToken(WatParser::REF_ARRAY, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

std::vector<WatParser::NumpatContext *> WatParser::ResultContext::numpat() {
  return getRuleContexts<WatParser::NumpatContext>();
}

WatParser::NumpatContext* WatParser::ResultContext::numpat(size_t i) {
  return getRuleContext<WatParser::NumpatContext>(i);
}

tree::TerminalNode* WatParser::ResultContext::EITHER() {
  return getToken(WatParser::EITHER, 0);
}

std::vector<WatParser::ResultContext *> WatParser::ResultContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::ResultContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::ResultContext::getRuleIndex() const {
  return WatParser::RuleResult;
}

void WatParser::ResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult(this);
}

void WatParser::ResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult(this);
}


std::any WatParser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ResultContext* WatParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 170, WatParser::RuleResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1569);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 192, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1541);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1542);
      literal_ref();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1543);
      match(WatParser::LPAR);
      setState(1544);
      match(WatParser::CONST);
      setState(1545);
      match(WatParser::NAN_);
      setState(1546);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1547);
      match(WatParser::LPAR);
      setState(1548);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 3429381062000640) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1549);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1550);
      match(WatParser::LPAR);
      setState(1551);
      match(WatParser::VEC_CONST);
      setState(1552);
      match(WatParser::VEC_SHAPE);
      setState(1556);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 56) != 0) || _la == WatParser::NAN_) {
        setState(1553);
        numpat();
        setState(1558);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1559);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1560);
      match(WatParser::LPAR);
      setState(1561);
      match(WatParser::EITHER);
      setState(1565);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1562);
        result();
        setState(1567);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1568);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScriptContext ------------------------------------------------------------------

WatParser::ScriptContext::ScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ScriptContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::CmdContext *> WatParser::ScriptContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::ScriptContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ScriptContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ScriptContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ScriptContext::getRuleIndex() const {
  return WatParser::RuleScript;
}

void WatParser::ScriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript(this);
}

void WatParser::ScriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript(this);
}


std::any WatParser::ScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ScriptContext* WatParser::script() {
  ScriptContext *_localctx = _tracker.createInstance<ScriptContext>(_ctx, getState());
  enterRule(_localctx, 172, WatParser::RuleScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1585);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 195, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1574);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1571);
        cmd();
        setState(1576);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1577);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1579); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1578);
        module_field();
        setState(1581); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == WatParser::LPAR);
      setState(1583);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

WatParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::ModuleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::ModuleContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ModuleContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ModuleContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ModuleContext::getRuleIndex() const {
  return WatParser::RuleModule;
}

void WatParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void WatParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any WatParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModuleContext* WatParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 174, WatParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1597);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1587);
      module_();
      setState(1588);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1593);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1590);
        module_field();
        setState(1595);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1596);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void WatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  watparserParserInitialize();
#else
  ::antlr4::internal::call_once(watparserParserOnceFlag, watparserParserInitialize);
#endif
}
