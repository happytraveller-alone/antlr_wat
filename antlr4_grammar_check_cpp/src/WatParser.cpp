
// Generated from WatParser.g4 by ANTLR 4.13.1


#include "WatParserListener.h"
#include "WatParserVisitor.h"

#include "WatParser.h"


using namespace antlrcpp;

using namespace antlr4;

namespace {

struct WatParserStaticData final {
  WatParserStaticData(std::vector<std::string> ruleNames,
                        std::vector<std::string> literalNames,
                        std::vector<std::string> symbolicNames)
      : ruleNames(std::move(ruleNames)), literalNames(std::move(literalNames)),
        symbolicNames(std::move(symbolicNames)),
        vocabulary(this->literalNames, this->symbolicNames) {}

  WatParserStaticData(const WatParserStaticData&) = delete;
  WatParserStaticData(WatParserStaticData&&) = delete;
  WatParserStaticData& operator=(const WatParserStaticData&) = delete;
  WatParserStaticData& operator=(WatParserStaticData&&) = delete;

  std::vector<antlr4::dfa::DFA> decisionToDFA;
  antlr4::atn::PredictionContextCache sharedContextCache;
  const std::vector<std::string> ruleNames;
  const std::vector<std::string> literalNames;
  const std::vector<std::string> symbolicNames;
  const antlr4::dfa::Vocabulary vocabulary;
  antlr4::atn::SerializedATNView serializedATN;
  std::unique_ptr<antlr4::atn::ATN> atn;
};

::antlr4::internal::OnceFlag watparserParserOnceFlag;
#if ANTLR4_USE_THREAD_LOCAL_CACHE
static thread_local
#endif
WatParserStaticData *watparserParserStaticData = nullptr;

void watparserParserInitialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  if (watparserParserStaticData != nullptr) {
    return;
  }
#else
  assert(watparserParserStaticData == nullptr);
#endif
  auto staticData = std::make_unique<WatParserStaticData>(
    std::vector<std::string>{
      "value", "name", "null_opt", "heap_type", "ref_type", "val_type", 
      "global_type", "storage_type", "field_type", "struct_type", "array_type", 
      "func_type", "str_type", "sub_type", "table_type", "memory_type", 
      "type_use", "nat32", "num", "var_", "bind_var", "instr_list", "instr", 
      "plain_instr", "select_instr_instr_list", "call_instr_instr_list", 
      "call_instr_type_instr_list", "block_instr", "block", "block_param_body", 
      "handler_block", "handler_block_param_body", "handler_block_body", 
      "expr", "expr1", "select_expr_results", "call_expr_type", "call_expr_params", 
      "call_expr_results", "if_block", "if_block_result_body", "try_block", 
      "try_block_param_body", "try_block_handler_body", "const_expr", "func_", 
      "func_fields", "func_fields_import", "func_fields_import_result", 
      "func_fields_body", "func_result_body", "func_body", "table_use", 
      "memory_use", "offset", "elem_kind", "elem_expr", "elem_list", "elem", 
      "table", "table_fields", "data", "memory", "memory_fields", "tag", 
      "tag_fields", "tag_fields_import", "tag_fields_import_result", "sglobal", 
      "global_fields", "import_desc", "simport", "inline_import", "export_desc", 
      "export_", "inline_export", "type_def", "rec_type", "type_", "start_", 
      "module_field", "module_", "inline_module", "script_module", "action_", 
      "assertion", "cmd", "shared_cmd_list", "meta", "literal_num", "literal_vec", 
      "literal_ref", "literal", "literal_list", "numpat", "result", "script", 
      "module"
    },
    std::vector<std::string>{
      "", "'('", "')'", "", "", "", "", "", "", "", "", "", "", "'any'", 
      "'anyref'", "'none'", "'nullref'", "'eq'", "'eqref'", "'i31'", "'i31ref'", 
      "'structref'", "'arrayref'", "'nofunc'", "'funcref'", "'mut'", "'shared'", 
      "'nullfuncref'", "'extern'", "'noextern'", "'externref'", "'nullexternref'", 
      "'ref'", "'null'", "'exn'", "'exnref'", "'array'", "'struct'", "'field'", 
      "'sub'", "'final'", "'rec'", "'ref.null'", "'ref.func'", "'ref.struct'", 
      "'ref.array'", "'ref.host'", "'ref.extern'", "'ref.is_null'", "'ref.as_non_null'", 
      "'ref.test'", "'ref.cast'", "'ref.eq'", "'ref.i31'", "'ref.exn'", 
      "'try_table'", "'catch'", "'catch_ref'", "'catch_all'", "'catch_all_ref'", 
      "'throw'", "'throw_ref'", "", "", "", "'struct.set'", "", "'array.new_fixed'", 
      "'array.new_elem'", "'array.new_data'", "", "'array.set'", "'array.len'", 
      "'array.copy'", "'array.fill'", "'array.init_data'", "'array.init_elem'", 
      "", "'memory.atomic_notify'", "", "'atomic.fence'", "", "", "", "", 
      "'nop'", "'unreachable'", "'drop'", "'block'", "'loop'", "'end'", 
      "'br'", "'br_if'", "'br_table'", "'return'", "'if'", "'then'", "'else'", 
      "'select'", "'call'", "'call_indirect'", "'call_ref'", "'return_call'", 
      "'return_call_ref'", "'return_call_indirect'", "", "", "'local.get'", 
      "'local.set'", "'local.tee'", "'global.get'", "'global.set'", "'table_get'", 
      "'table_set'", "'table_size'", "'table_grow'", "'table_fill'", "'table_copy'", 
      "'table_init'", "'data.drop'", "'elem.drop'", "", "", "", "", "", 
      "", "", "", "", "", "'v128.store'", "", "", "", "", "", "", "", "", 
      "'i8x16.shuffle'", "", "", "", "'memory.size'", "'memory.grow'", "'memory.fill'", 
      "'memory.copy'", "'memory.init'", "'type'", "'func'", "'start'", "'param'", 
      "'result'", "'local'", "'global'", "'table'", "'memory'", "'elem'", 
      "'data'", "'offset'", "'import'", "'export'", "'declare'", "'item'", 
      "'tag'", "'module'", "'binary'", "'quote'", "'either'", "'thread'", 
      "'wait'", "'script'", "'register'", "'invoke'", "'get'", "'assert_malformed'", 
      "'assert_invalid'", "'assert_unlinkable'", "'assert_return'", "'assert_exception'", 
      "'assert_trap'", "'assert_exhaustion'", "'input'", "'output'"
    },
    std::vector<std::string>{
      "", "LPAR", "RPAR", "NAT", "INT", "FLOAT", "STRING_", "NUM_TYPE", 
      "PACK_TYPE", "VEC_TYPE", "VEC_SHAPE", "CONST", "VEC_CONST", "ANY", 
      "ANYREF", "NONE", "NULLREF", "EQ", "EQREF", "I31", "I31REF", "STRUCTREF", 
      "ARRAYREF", "NOFUNC", "FUNCREF", "MUT", "SHARED", "NULLFUNCREF", "EXTERN", 
      "NOEXTERN", "EXTERNREF", "NULLEXTERNREF", "REF", "NULL", "EXN", "EXNREF", 
      "ARRAY", "STRUCT", "FIELD", "SUB", "FINAL", "REC", "REF_NULL", "REF_FUNC", 
      "REF_STRUCT", "REF_ARRAY", "REF_HOST", "REF_EXTERN", "REF_IS_NULL", 
      "REF_AS_NON_NULL", "REF_TEST", "REF_CAST", "REF_EQ", "REF_I31", "REF_EXN", 
      "TRY_TABLE", "CATCH", "CATCH_REF", "CATCH_ALL", "CATCH_ALL_REF", "THROW", 
      "THROW_REF", "I31_GET", "STRUCT_NEW", "STRUCT_GET", "STRUCT_SET", 
      "ARRAY_NEW", "ARRAY_NEW_FIXED", "ARRAY_NEW_ELEM", "ARRAY_NEW_DATA", 
      "ARRAY_GET", "ARRAY_SET", "ARRAY_LEN", "ARRAY_COPY", "ARRAY_FILL", 
      "ARRAY_INIT_DATA", "ARRAY_INIT_ELEM", "EXTERN_CONVERT", "MEMORY_ATOMIC_NOTIFY", 
      "MEMORY_ATOMIC_WAIT", "ATOMIC_FENCE", "ATOMIC_LOAD", "ATOMIC_STORE", 
      "ATOMIC_RMW", "ATOMIC_RMW_CMPXCHG", "NOP", "UNREACHABLE", "DROP", 
      "BLOCK", "LOOP", "END", "BR", "BR_IF", "BR_TABLE", "RETURN", "IF", 
      "THEN", "ELSE", "SELECT", "CALL", "CALL_INDIRECT", "CALL_REF", "RETURN_CALL", 
      "RETURN_CALL_REF", "RETURN_CALL_INDIRECT", "BR_ON_NULL", "BR_ON_CAST", 
      "LOCAL_GET", "LOCAL_SET", "LOCAL_TEE", "GLOBAL_GET", "GLOBAL_SET", 
      "TABLE_GET", "TABLE_SET", "TABLE_SIZE", "TABLE_GROW", "TABLE_FILL", 
      "TABLE_COPY", "TABLE_INIT", "DATA_DROP", "ELEM_DROP", "LOAD", "STORE", 
      "OFFSET_EQ_NAT", "ALIGN_EQ_NAT", "UNARY", "BINARY", "TEST", "COMPARE", 
      "CONVERT", "VEC_LOAD", "VEC_STORE", "VEC_LOAD_LANE", "VEC_STORE_LANE", 
      "VEC_UNARY", "VEC_BINARY", "VEC_TERNARY", "VEC_TEST", "VEC_BITMASK", 
      "VEC_SHIFT", "VEC_SHUFFLE", "VEC_SPLAT", "VEC_EXTRACT", "VEC_REPLACE", 
      "MEMORY_SIZE", "MEMORY_GROW", "MEMORY_FILL", "MEMORY_COPY", "MEMORY_INIT", 
      "TYPE", "FUNC", "START_", "PARAM", "RESULT", "LOCAL", "GLOBAL", "TABLE", 
      "MEMORY", "ELEM", "DATA", "OFFSET", "IMPORT", "EXPORT", "DECLARE", 
      "ITEM", "TAG", "MODULE", "BIN", "QUOTE", "EITHER", "THREAD", "WAIT", 
      "SCRIPT", "REGISTER", "INVOKE", "GET", "ASSERT_MALFORMED", "ASSERT_INVALID", 
      "ASSERT_UNLINKABLE", "ASSERT_RETURN", "ASSERT_EXCEPTION", "ASSERT_TRAP", 
      "ASSERT_EXHAUSTION", "INPUT", "OUTPUT", "NAN_", "VAR", "SPACE", "COMMENT"
    }
  );
  static const int32_t serializedATNSegment[] = {
  	4,1,188,1833,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,
  	2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,
  	7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,
  	7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,
  	7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,
  	7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,
  	7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,
  	7,49,2,50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,
  	7,56,2,57,7,57,2,58,7,58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,
  	7,63,2,64,7,64,2,65,7,65,2,66,7,66,2,67,7,67,2,68,7,68,2,69,7,69,2,70,
  	7,70,2,71,7,71,2,72,7,72,2,73,7,73,2,74,7,74,2,75,7,75,2,76,7,76,2,77,
  	7,77,2,78,7,78,2,79,7,79,2,80,7,80,2,81,7,81,2,82,7,82,2,83,7,83,2,84,
  	7,84,2,85,7,85,2,86,7,86,2,87,7,87,2,88,7,88,2,89,7,89,2,90,7,90,2,91,
  	7,91,2,92,7,92,2,93,7,93,2,94,7,94,2,95,7,95,2,96,7,96,2,97,7,97,1,0,
  	1,0,1,1,1,1,1,2,3,2,202,8,2,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,3,1,
  	3,1,3,1,3,3,3,217,8,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,
  	1,4,1,4,1,4,1,4,1,4,1,4,3,4,237,8,4,1,5,1,5,1,5,3,5,242,8,5,1,6,1,6,1,
  	6,1,6,1,6,1,6,3,6,250,8,6,1,7,1,7,3,7,254,8,7,1,8,1,8,1,8,1,8,1,8,1,8,
  	3,8,262,8,8,1,9,1,9,1,9,5,9,267,8,9,10,9,12,9,270,9,9,1,9,1,9,1,9,3,9,
  	275,8,9,1,9,5,9,278,8,9,10,9,12,9,281,9,9,1,10,1,10,1,11,1,11,1,11,5,
  	11,288,8,11,10,11,12,11,291,9,11,1,11,1,11,5,11,295,8,11,10,11,12,11,
  	298,9,11,1,11,1,11,1,11,1,11,3,11,304,8,11,1,11,5,11,307,8,11,10,11,12,
  	11,310,9,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,3,12,319,8,12,1,12,1,12,
  	1,13,1,13,1,13,1,13,3,13,327,8,13,1,13,5,13,330,8,13,10,13,12,13,333,
  	9,13,1,13,1,13,1,13,3,13,338,8,13,1,14,1,14,3,14,342,8,14,1,14,1,14,1,
  	15,1,15,3,15,348,8,15,1,15,3,15,351,8,15,1,16,1,16,1,16,1,16,1,16,1,17,
  	1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,5,21,367,8,21,10,21,12,21,370,
  	9,21,1,21,3,21,373,8,21,1,21,3,21,376,8,21,3,21,378,8,21,1,22,1,22,1,
  	22,3,22,383,8,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,4,
  	23,395,8,23,11,23,12,23,396,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,3,23,427,8,23,1,23,1,23,3,23,431,8,23,1,23,
  	1,23,3,23,435,8,23,1,23,1,23,3,23,439,8,23,1,23,1,23,3,23,443,8,23,1,
  	23,1,23,1,23,1,23,3,23,449,8,23,1,23,1,23,1,23,3,23,454,8,23,1,23,1,23,
  	1,23,1,23,3,23,460,8,23,1,23,3,23,463,8,23,1,23,1,23,3,23,467,8,23,1,
  	23,3,23,470,8,23,1,23,1,23,3,23,474,8,23,1,23,3,23,477,8,23,1,23,1,23,
  	3,23,481,8,23,1,23,3,23,484,8,23,1,23,1,23,3,23,488,8,23,1,23,3,23,491,
  	8,23,1,23,1,23,1,23,3,23,496,8,23,1,23,3,23,499,8,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,5,23,575,8,23,10,23,12,23,578,9,23,1,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,5,23,588,8,23,10,23,12,23,591,9,23,1,23,1,23,1,23,1,23,1,23,1,
  	23,1,23,3,23,600,8,23,1,23,3,23,603,8,23,1,23,1,23,3,23,607,8,23,1,23,
  	3,23,610,8,23,1,23,1,23,1,23,3,23,615,8,23,1,23,3,23,618,8,23,1,23,1,
  	23,3,23,622,8,23,1,23,3,23,625,8,23,1,23,1,23,3,23,629,8,23,1,23,3,23,
  	632,8,23,1,23,1,23,3,23,636,8,23,1,23,3,23,639,8,23,1,23,1,23,1,23,3,
  	23,644,8,23,1,24,1,24,1,24,1,24,5,24,650,8,24,10,24,12,24,653,9,24,1,
  	24,5,24,656,8,24,10,24,12,24,659,9,24,1,24,1,24,1,25,1,25,3,25,665,8,
  	25,1,25,1,25,1,25,3,25,670,8,25,1,25,3,25,673,8,25,1,26,3,26,676,8,26,
  	1,26,1,26,1,26,5,26,681,8,26,10,26,12,26,684,9,26,1,26,5,26,687,8,26,
  	10,26,12,26,690,9,26,1,26,1,26,1,26,5,26,695,8,26,10,26,12,26,698,9,26,
  	1,26,5,26,701,8,26,10,26,12,26,704,9,26,1,26,1,26,1,27,1,27,3,27,710,
  	8,27,1,27,1,27,1,27,3,27,715,8,27,1,27,1,27,3,27,719,8,27,1,27,1,27,1,
  	27,3,27,724,8,27,1,27,3,27,727,8,27,1,27,1,27,3,27,731,8,27,1,27,1,27,
  	3,27,735,8,27,1,27,1,27,1,27,3,27,740,8,27,3,27,742,8,27,1,28,3,28,745,
  	8,28,1,28,1,28,1,29,1,29,1,29,5,29,752,8,29,10,29,12,29,755,9,29,1,29,
  	5,29,758,8,29,10,29,12,29,761,9,29,1,29,1,29,1,29,5,29,766,8,29,10,29,
  	12,29,769,9,29,1,29,5,29,772,8,29,10,29,12,29,775,9,29,1,29,1,29,1,30,
  	3,30,780,8,30,1,30,1,30,1,31,1,31,1,31,5,31,787,8,31,10,31,12,31,790,
  	9,31,1,31,5,31,793,8,31,10,31,12,31,796,9,31,1,31,1,31,1,31,5,31,801,
  	8,31,10,31,12,31,804,9,31,1,31,5,31,807,8,31,10,31,12,31,810,9,31,1,31,
  	1,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,821,8,32,1,32,1,32,1,32,
  	5,32,826,8,32,10,32,12,32,829,9,32,1,32,1,32,1,33,1,33,1,33,1,33,1,34,
  	1,34,5,34,839,8,34,10,34,12,34,842,9,34,1,34,1,34,1,34,1,34,3,34,848,
  	8,34,1,34,1,34,1,34,3,34,853,8,34,1,34,1,34,1,34,3,34,858,8,34,1,34,1,
  	34,1,34,3,34,863,8,34,1,34,1,34,1,34,3,34,868,8,34,1,34,1,34,1,34,3,34,
  	873,8,34,1,34,3,34,876,8,34,1,35,1,35,1,35,5,35,881,8,35,10,35,12,35,
  	884,9,35,1,35,5,35,887,8,35,10,35,12,35,890,9,35,1,35,5,35,893,8,35,10,
  	35,12,35,896,9,35,1,36,3,36,899,8,36,1,36,1,36,1,37,1,37,1,37,5,37,906,
  	8,37,10,37,12,37,909,9,37,1,37,5,37,912,8,37,10,37,12,37,915,9,37,1,37,
  	1,37,1,38,1,38,1,38,5,38,922,8,38,10,38,12,38,925,9,38,1,38,5,38,928,
  	8,38,10,38,12,38,931,9,38,1,38,5,38,934,8,38,10,38,12,38,937,9,38,1,39,
  	3,39,940,8,39,1,39,1,39,1,39,5,39,945,8,39,10,39,12,39,948,9,39,1,39,
  	5,39,951,8,39,10,39,12,39,954,9,39,1,39,1,39,1,40,1,40,1,40,5,40,961,
  	8,40,10,40,12,40,964,9,40,1,40,5,40,967,8,40,10,40,12,40,970,9,40,1,40,
  	5,40,973,8,40,10,40,12,40,976,9,40,1,40,1,40,1,40,1,40,1,40,1,40,1,40,
  	1,40,1,40,3,40,987,8,40,1,41,3,41,990,8,41,1,41,1,41,1,42,1,42,1,42,5,
  	42,997,8,42,10,42,12,42,1000,9,42,1,42,5,42,1003,8,42,10,42,12,42,1006,
  	9,42,1,42,1,42,1,42,5,42,1011,8,42,10,42,12,42,1014,9,42,1,42,5,42,1017,
  	8,42,10,42,12,42,1020,9,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,
  	43,3,43,1031,8,43,1,43,1,43,1,43,5,43,1036,8,43,10,43,12,43,1039,9,43,
  	1,43,1,43,1,44,1,44,1,45,1,45,1,45,3,45,1048,8,45,1,45,1,45,1,45,1,46,
  	3,46,1054,8,46,1,46,1,46,1,46,3,46,1059,8,46,1,46,1,46,1,46,1,46,1,46,
  	3,46,1066,8,46,1,47,1,47,1,47,5,47,1071,8,47,10,47,12,47,1074,9,47,1,
  	47,1,47,1,47,1,47,1,47,1,47,1,47,5,47,1083,8,47,10,47,12,47,1086,9,47,
  	1,47,1,47,1,48,1,48,1,48,5,48,1093,8,48,10,48,12,48,1096,9,48,1,48,5,
  	48,1099,8,48,10,48,12,48,1102,9,48,1,49,1,49,1,49,5,49,1107,8,49,10,49,
  	12,49,1110,9,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,5,49,1119,8,49,10,
  	49,12,49,1122,9,49,1,49,1,49,1,50,1,50,1,50,5,50,1129,8,50,10,50,12,50,
  	1132,9,50,1,50,5,50,1135,8,50,10,50,12,50,1138,9,50,1,50,1,50,1,51,1,
  	51,1,51,1,51,1,51,1,51,5,51,1148,8,51,10,51,12,51,1151,9,51,3,51,1153,
  	8,51,1,51,5,51,1156,8,51,10,51,12,51,1159,9,51,1,51,1,51,1,52,1,52,1,
  	52,1,52,1,52,1,53,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,54,1,54,3,
  	54,1179,8,54,1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,3,56,1189,8,56,1,
  	57,1,57,5,57,1193,8,57,10,57,12,57,1196,9,57,1,57,1,57,5,57,1200,8,57,
  	10,57,12,57,1203,9,57,3,57,1205,8,57,1,58,1,58,1,58,3,58,1210,8,58,1,
  	58,1,58,1,58,1,58,3,58,1216,8,58,1,58,3,58,1219,8,58,1,58,1,58,1,58,1,
  	58,1,58,1,58,3,58,1227,8,58,1,58,1,58,5,58,1231,8,58,10,58,12,58,1234,
  	9,58,1,58,1,58,3,58,1238,8,58,1,59,1,59,1,59,3,59,1243,8,59,1,59,1,59,
  	1,59,1,60,1,60,1,60,1,60,3,60,1252,8,60,1,60,1,60,1,60,1,60,1,60,1,60,
  	1,60,1,60,1,60,1,60,5,60,1264,8,60,10,60,12,60,1267,9,60,1,60,5,60,1270,
  	8,60,10,60,12,60,1273,9,60,3,60,1275,8,60,1,60,1,60,3,60,1279,8,60,1,
  	61,1,61,1,61,3,61,1284,8,61,1,61,1,61,1,61,5,61,1289,8,61,10,61,12,61,
  	1292,9,61,1,61,1,61,1,61,1,61,1,61,3,61,1299,8,61,1,61,3,61,1302,8,61,
  	1,61,5,61,1305,8,61,10,61,12,61,1308,9,61,1,61,3,61,1311,8,61,1,62,1,
  	62,1,62,3,62,1316,8,62,1,62,1,62,1,62,1,63,1,63,1,63,1,63,1,63,1,63,1,
  	63,1,63,1,63,1,63,5,63,1331,8,63,10,63,12,63,1334,9,63,1,63,3,63,1337,
  	8,63,1,64,1,64,1,64,3,64,1342,8,64,1,64,1,64,1,64,1,65,5,65,1348,8,65,
  	10,65,12,65,1351,9,65,1,65,3,65,1354,8,65,1,65,1,65,5,65,1358,8,65,10,
  	65,12,65,1361,9,65,1,65,1,65,3,65,1365,8,65,1,65,1,65,3,65,1369,8,65,
  	1,66,1,66,1,66,5,66,1374,8,66,10,66,12,66,1377,9,66,1,66,1,66,1,66,3,
  	66,1382,8,66,1,66,5,66,1385,8,66,10,66,12,66,1388,9,66,1,66,1,66,1,67,
  	1,67,1,67,5,67,1395,8,67,10,67,12,67,1398,9,67,1,67,5,67,1401,8,67,10,
  	67,12,67,1404,9,67,1,68,1,68,1,68,3,68,1409,8,68,1,68,1,68,1,68,1,69,
  	1,69,1,69,1,69,1,69,1,69,1,69,1,69,1,69,3,69,1423,8,69,1,70,1,70,1,70,
  	3,70,1428,8,70,1,70,1,70,3,70,1432,8,70,1,70,1,70,1,70,1,70,1,70,3,70,
  	1439,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1447,8,70,1,70,1,70,1,70,
  	1,70,1,70,1,70,3,70,1455,8,70,1,70,1,70,1,70,1,70,1,70,1,70,3,70,1463,
  	8,70,1,70,1,70,3,70,1467,8,70,1,70,1,70,3,70,1471,8,70,1,71,1,71,1,71,
  	1,71,1,71,1,71,1,71,1,72,1,72,1,72,1,72,1,72,1,72,1,73,1,73,1,73,1,73,
  	1,73,1,74,1,74,1,74,1,74,1,74,1,74,1,75,1,75,1,75,1,75,1,75,1,76,1,76,
  	1,76,3,76,1505,8,76,1,76,1,76,1,76,1,77,1,77,1,77,1,77,5,77,1514,8,77,
  	10,77,12,77,1517,9,77,1,77,3,77,1520,8,77,1,78,1,78,1,79,1,79,1,79,1,
  	79,1,79,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,1,80,4,80,1540,
  	8,80,11,80,12,80,1541,1,81,1,81,1,81,3,81,1547,8,81,1,81,5,81,1550,8,
  	81,10,81,12,81,1553,9,81,1,81,1,81,1,82,3,82,1558,8,82,1,83,1,83,1,83,
  	1,83,3,83,1564,8,83,1,83,1,83,5,83,1568,8,83,10,83,12,83,1571,9,83,1,
  	83,3,83,1574,8,83,1,84,1,84,1,84,3,84,1579,8,84,1,84,1,84,1,84,1,84,1,
  	84,1,84,1,84,3,84,1588,8,84,1,84,1,84,1,84,3,84,1593,8,84,1,85,1,85,1,
  	85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,
  	85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,5,85,1623,8,
  	85,10,85,12,85,1626,9,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,
  	1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,1,85,3,85,1647,8,85,1,86,
  	1,86,1,86,1,86,1,86,1,86,1,86,3,86,1656,8,86,1,86,1,86,1,86,1,86,1,86,
  	3,86,1663,8,86,1,86,1,86,1,86,1,86,1,86,1,86,3,86,1671,8,86,1,86,1,86,
  	3,86,1675,8,86,1,87,1,87,1,87,1,87,1,87,1,87,1,87,5,87,1684,8,87,10,87,
  	12,87,1687,9,87,1,87,5,87,1690,8,87,10,87,12,87,1693,9,87,1,88,1,88,1,
  	88,3,88,1698,8,88,1,88,5,88,1701,8,88,10,88,12,88,1704,9,88,1,88,1,88,
  	1,88,1,88,3,88,1710,8,88,1,88,1,88,1,88,1,88,1,88,3,88,1717,8,88,1,88,
  	1,88,1,88,1,88,1,88,3,88,1724,8,88,1,88,3,88,1727,8,88,1,89,1,89,1,89,
  	1,89,1,89,1,90,1,90,1,90,1,90,5,90,1738,8,90,10,90,12,90,1741,9,90,1,
  	90,1,90,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,91,1,
  	91,3,91,1758,8,91,1,92,1,92,1,92,3,92,1763,8,92,1,93,5,93,1766,8,93,10,
  	93,12,93,1769,9,93,1,94,1,94,3,94,1773,8,94,1,95,1,95,1,95,1,95,1,95,
  	1,95,1,95,1,95,1,95,1,95,1,95,1,95,1,95,5,95,1788,8,95,10,95,12,95,1791,
  	9,95,1,95,1,95,1,95,1,95,5,95,1797,8,95,10,95,12,95,1800,9,95,1,95,3,
  	95,1803,8,95,1,96,5,96,1806,8,96,10,96,12,96,1809,9,96,1,96,1,96,4,96,
  	1813,8,96,11,96,12,96,1814,1,96,1,96,3,96,1819,8,96,1,97,1,97,1,97,1,
  	97,5,97,1825,8,97,10,97,12,97,1828,9,97,1,97,3,97,1831,8,97,1,97,0,0,
  	98,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,
  	48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,
  	94,96,98,100,102,104,106,108,110,112,114,116,118,120,122,124,126,128,
  	130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,
  	166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,0,7,1,0,4,
  	5,1,0,3,5,2,0,3,3,186,186,1,0,88,89,3,0,150,150,155,157,165,165,1,0,167,
  	168,4,0,32,32,42,45,47,47,52,53,2124,0,196,1,0,0,0,2,198,1,0,0,0,4,201,
  	1,0,0,0,6,216,1,0,0,0,8,236,1,0,0,0,10,241,1,0,0,0,12,249,1,0,0,0,14,
  	253,1,0,0,0,16,261,1,0,0,0,18,279,1,0,0,0,20,282,1,0,0,0,22,308,1,0,0,
  	0,24,311,1,0,0,0,26,337,1,0,0,0,28,339,1,0,0,0,30,345,1,0,0,0,32,352,
  	1,0,0,0,34,357,1,0,0,0,36,359,1,0,0,0,38,361,1,0,0,0,40,363,1,0,0,0,42,
  	368,1,0,0,0,44,382,1,0,0,0,46,643,1,0,0,0,48,645,1,0,0,0,50,672,1,0,0,
  	0,52,675,1,0,0,0,54,741,1,0,0,0,56,744,1,0,0,0,58,759,1,0,0,0,60,779,
  	1,0,0,0,62,794,1,0,0,0,64,827,1,0,0,0,66,832,1,0,0,0,68,875,1,0,0,0,70,
  	888,1,0,0,0,72,898,1,0,0,0,74,913,1,0,0,0,76,929,1,0,0,0,78,939,1,0,0,
  	0,80,968,1,0,0,0,82,989,1,0,0,0,84,1004,1,0,0,0,86,1037,1,0,0,0,88,1042,
  	1,0,0,0,90,1044,1,0,0,0,92,1065,1,0,0,0,94,1084,1,0,0,0,96,1100,1,0,0,
  	0,98,1120,1,0,0,0,100,1136,1,0,0,0,102,1157,1,0,0,0,104,1162,1,0,0,0,
  	106,1167,1,0,0,0,108,1178,1,0,0,0,110,1180,1,0,0,0,112,1188,1,0,0,0,114,
  	1204,1,0,0,0,116,1237,1,0,0,0,118,1239,1,0,0,0,120,1278,1,0,0,0,122,1310,
  	1,0,0,0,124,1312,1,0,0,0,126,1336,1,0,0,0,128,1338,1,0,0,0,130,1368,1,
  	0,0,0,132,1386,1,0,0,0,134,1402,1,0,0,0,136,1405,1,0,0,0,138,1422,1,0,
  	0,0,140,1470,1,0,0,0,142,1472,1,0,0,0,144,1479,1,0,0,0,146,1485,1,0,0,
  	0,148,1490,1,0,0,0,150,1496,1,0,0,0,152,1501,1,0,0,0,154,1519,1,0,0,0,
  	156,1521,1,0,0,0,158,1523,1,0,0,0,160,1539,1,0,0,0,162,1543,1,0,0,0,164,
  	1557,1,0,0,0,166,1573,1,0,0,0,168,1592,1,0,0,0,170,1646,1,0,0,0,172,1674,
  	1,0,0,0,174,1685,1,0,0,0,176,1726,1,0,0,0,178,1728,1,0,0,0,180,1733,1,
  	0,0,0,182,1757,1,0,0,0,184,1762,1,0,0,0,186,1767,1,0,0,0,188,1772,1,0,
  	0,0,190,1802,1,0,0,0,192,1818,1,0,0,0,194,1830,1,0,0,0,196,197,7,0,0,
  	0,197,1,1,0,0,0,198,199,5,6,0,0,199,3,1,0,0,0,200,202,5,33,0,0,201,200,
  	1,0,0,0,201,202,1,0,0,0,202,5,1,0,0,0,203,217,5,13,0,0,204,217,5,15,0,
  	0,205,217,5,17,0,0,206,217,5,19,0,0,207,217,5,37,0,0,208,217,5,36,0,0,
  	209,217,5,150,0,0,210,217,5,23,0,0,211,217,5,28,0,0,212,217,5,29,0,0,
  	213,217,5,34,0,0,214,217,5,28,0,0,215,217,3,38,19,0,216,203,1,0,0,0,216,
  	204,1,0,0,0,216,205,1,0,0,0,216,206,1,0,0,0,216,207,1,0,0,0,216,208,1,
  	0,0,0,216,209,1,0,0,0,216,210,1,0,0,0,216,211,1,0,0,0,216,212,1,0,0,0,
  	216,213,1,0,0,0,216,214,1,0,0,0,216,215,1,0,0,0,217,7,1,0,0,0,218,237,
  	5,24,0,0,219,237,5,30,0,0,220,221,5,1,0,0,221,222,5,32,0,0,222,223,3,
  	4,2,0,223,224,3,6,3,0,224,225,5,2,0,0,225,237,1,0,0,0,226,237,5,14,0,
  	0,227,237,5,16,0,0,228,237,5,18,0,0,229,237,5,20,0,0,230,237,5,21,0,0,
  	231,237,5,22,0,0,232,237,5,27,0,0,233,237,5,31,0,0,234,237,5,35,0,0,235,
  	237,5,30,0,0,236,218,1,0,0,0,236,219,1,0,0,0,236,220,1,0,0,0,236,226,
  	1,0,0,0,236,227,1,0,0,0,236,228,1,0,0,0,236,229,1,0,0,0,236,230,1,0,0,
  	0,236,231,1,0,0,0,236,232,1,0,0,0,236,233,1,0,0,0,236,234,1,0,0,0,236,
  	235,1,0,0,0,237,9,1,0,0,0,238,242,5,7,0,0,239,242,5,9,0,0,240,242,3,8,
  	4,0,241,238,1,0,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,11,1,0,0,0,243,
  	250,3,10,5,0,244,245,5,1,0,0,245,246,5,25,0,0,246,247,3,10,5,0,247,248,
  	5,2,0,0,248,250,1,0,0,0,249,243,1,0,0,0,249,244,1,0,0,0,250,13,1,0,0,
  	0,251,254,3,10,5,0,252,254,5,8,0,0,253,251,1,0,0,0,253,252,1,0,0,0,254,
  	15,1,0,0,0,255,262,3,14,7,0,256,257,5,1,0,0,257,258,5,25,0,0,258,259,
  	3,14,7,0,259,260,5,2,0,0,260,262,1,0,0,0,261,255,1,0,0,0,261,256,1,0,
  	0,0,262,17,1,0,0,0,263,264,5,1,0,0,264,274,5,38,0,0,265,267,3,16,8,0,
  	266,265,1,0,0,0,267,270,1,0,0,0,268,266,1,0,0,0,268,269,1,0,0,0,269,275,
  	1,0,0,0,270,268,1,0,0,0,271,272,3,40,20,0,272,273,3,16,8,0,273,275,1,
  	0,0,0,274,268,1,0,0,0,274,271,1,0,0,0,275,276,1,0,0,0,276,278,5,2,0,0,
  	277,263,1,0,0,0,278,281,1,0,0,0,279,277,1,0,0,0,279,280,1,0,0,0,280,19,
  	1,0,0,0,281,279,1,0,0,0,282,283,3,16,8,0,283,21,1,0,0,0,284,303,5,1,0,
  	0,285,289,5,153,0,0,286,288,3,10,5,0,287,286,1,0,0,0,288,291,1,0,0,0,
  	289,287,1,0,0,0,289,290,1,0,0,0,290,304,1,0,0,0,291,289,1,0,0,0,292,296,
  	5,152,0,0,293,295,3,10,5,0,294,293,1,0,0,0,295,298,1,0,0,0,296,294,1,
  	0,0,0,296,297,1,0,0,0,297,304,1,0,0,0,298,296,1,0,0,0,299,300,5,152,0,
  	0,300,301,3,40,20,0,301,302,3,10,5,0,302,304,1,0,0,0,303,285,1,0,0,0,
  	303,292,1,0,0,0,303,299,1,0,0,0,304,305,1,0,0,0,305,307,5,2,0,0,306,284,
  	1,0,0,0,307,310,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,23,1,0,0,
  	0,310,308,1,0,0,0,311,318,5,1,0,0,312,313,5,37,0,0,313,319,3,18,9,0,314,
  	315,5,36,0,0,315,319,3,20,10,0,316,317,5,150,0,0,317,319,3,22,11,0,318,
  	312,1,0,0,0,318,314,1,0,0,0,318,316,1,0,0,0,319,320,1,0,0,0,320,321,5,
  	2,0,0,321,25,1,0,0,0,322,338,3,24,12,0,323,324,5,1,0,0,324,326,5,39,0,
  	0,325,327,5,40,0,0,326,325,1,0,0,0,326,327,1,0,0,0,327,331,1,0,0,0,328,
  	330,3,38,19,0,329,328,1,0,0,0,330,333,1,0,0,0,331,329,1,0,0,0,331,332,
  	1,0,0,0,332,334,1,0,0,0,333,331,1,0,0,0,334,335,3,24,12,0,335,336,5,2,
  	0,0,336,338,1,0,0,0,337,322,1,0,0,0,337,323,1,0,0,0,338,27,1,0,0,0,339,
  	341,5,3,0,0,340,342,5,3,0,0,341,340,1,0,0,0,341,342,1,0,0,0,342,343,1,
  	0,0,0,343,344,3,8,4,0,344,29,1,0,0,0,345,347,5,3,0,0,346,348,5,3,0,0,
  	347,346,1,0,0,0,347,348,1,0,0,0,348,350,1,0,0,0,349,351,5,26,0,0,350,
  	349,1,0,0,0,350,351,1,0,0,0,351,31,1,0,0,0,352,353,5,1,0,0,353,354,5,
  	149,0,0,354,355,3,38,19,0,355,356,5,2,0,0,356,33,1,0,0,0,357,358,5,3,
  	0,0,358,35,1,0,0,0,359,360,7,1,0,0,360,37,1,0,0,0,361,362,7,2,0,0,362,
  	39,1,0,0,0,363,364,5,186,0,0,364,41,1,0,0,0,365,367,3,44,22,0,366,365,
  	1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,369,1,0,0,0,369,377,1,0,0,
  	0,370,368,1,0,0,0,371,373,3,50,25,0,372,371,1,0,0,0,372,373,1,0,0,0,373,
  	378,1,0,0,0,374,376,3,48,24,0,375,374,1,0,0,0,375,376,1,0,0,0,376,378,
  	1,0,0,0,377,372,1,0,0,0,377,375,1,0,0,0,378,43,1,0,0,0,379,383,3,46,23,
  	0,380,383,3,54,27,0,381,383,3,66,33,0,382,379,1,0,0,0,382,380,1,0,0,0,
  	382,381,1,0,0,0,383,45,1,0,0,0,384,644,5,86,0,0,385,644,5,85,0,0,386,
  	644,5,87,0,0,387,644,5,98,0,0,388,389,5,91,0,0,389,644,3,38,19,0,390,
  	391,5,92,0,0,391,644,3,38,19,0,392,394,5,93,0,0,393,395,3,38,19,0,394,
  	393,1,0,0,0,395,396,1,0,0,0,396,394,1,0,0,0,396,397,1,0,0,0,397,644,1,
  	0,0,0,398,399,5,105,0,0,399,644,3,38,19,0,400,401,5,106,0,0,401,402,3,
  	38,19,0,402,403,3,8,4,0,403,404,3,8,4,0,404,644,1,0,0,0,405,644,5,94,
  	0,0,406,407,5,99,0,0,407,644,3,38,19,0,408,409,5,101,0,0,409,644,3,38,
  	19,0,410,411,5,102,0,0,411,644,3,38,19,0,412,413,5,103,0,0,413,644,3,
  	38,19,0,414,415,5,107,0,0,415,644,3,38,19,0,416,417,5,108,0,0,417,644,
  	3,38,19,0,418,419,5,109,0,0,419,644,3,38,19,0,420,421,5,110,0,0,421,644,
  	3,38,19,0,422,423,5,111,0,0,423,644,3,38,19,0,424,426,5,112,0,0,425,427,
  	3,38,19,0,426,425,1,0,0,0,426,427,1,0,0,0,427,644,1,0,0,0,428,430,5,113,
  	0,0,429,431,3,38,19,0,430,429,1,0,0,0,430,431,1,0,0,0,431,644,1,0,0,0,
  	432,434,5,114,0,0,433,435,3,38,19,0,434,433,1,0,0,0,434,435,1,0,0,0,435,
  	644,1,0,0,0,436,438,5,115,0,0,437,439,3,38,19,0,438,437,1,0,0,0,438,439,
  	1,0,0,0,439,644,1,0,0,0,440,442,5,116,0,0,441,443,3,38,19,0,442,441,1,
  	0,0,0,442,443,1,0,0,0,443,644,1,0,0,0,444,448,5,117,0,0,445,446,3,38,
  	19,0,446,447,3,38,19,0,447,449,1,0,0,0,448,445,1,0,0,0,448,449,1,0,0,
  	0,449,644,1,0,0,0,450,451,5,118,0,0,451,453,3,38,19,0,452,454,3,38,19,
  	0,453,452,1,0,0,0,453,454,1,0,0,0,454,644,1,0,0,0,455,456,5,120,0,0,456,
  	644,3,38,19,0,457,459,5,121,0,0,458,460,5,123,0,0,459,458,1,0,0,0,459,
  	460,1,0,0,0,460,462,1,0,0,0,461,463,5,124,0,0,462,461,1,0,0,0,462,463,
  	1,0,0,0,463,644,1,0,0,0,464,466,5,122,0,0,465,467,5,123,0,0,466,465,1,
  	0,0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,470,5,124,0,0,469,468,1,0,0,
  	0,469,470,1,0,0,0,470,644,1,0,0,0,471,473,5,130,0,0,472,474,5,123,0,0,
  	473,472,1,0,0,0,473,474,1,0,0,0,474,476,1,0,0,0,475,477,5,124,0,0,476,
  	475,1,0,0,0,476,477,1,0,0,0,477,644,1,0,0,0,478,480,5,131,0,0,479,481,
  	5,123,0,0,480,479,1,0,0,0,480,481,1,0,0,0,481,483,1,0,0,0,482,484,5,124,
  	0,0,483,482,1,0,0,0,483,484,1,0,0,0,484,644,1,0,0,0,485,487,5,132,0,0,
  	486,488,5,123,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,490,1,0,0,0,489,
  	491,5,124,0,0,490,489,1,0,0,0,490,491,1,0,0,0,491,492,1,0,0,0,492,644,
  	5,3,0,0,493,495,5,133,0,0,494,496,5,123,0,0,495,494,1,0,0,0,495,496,1,
  	0,0,0,496,498,1,0,0,0,497,499,5,124,0,0,498,497,1,0,0,0,498,499,1,0,0,
  	0,499,500,1,0,0,0,500,644,5,3,0,0,501,644,5,144,0,0,502,644,5,145,0,0,
  	503,504,5,11,0,0,504,644,3,36,18,0,505,644,5,146,0,0,506,644,5,147,0,
  	0,507,508,5,148,0,0,508,644,3,38,19,0,509,510,5,119,0,0,510,644,3,38,
  	19,0,511,512,5,42,0,0,512,644,3,6,3,0,513,644,5,48,0,0,514,515,5,43,0,
  	0,515,644,3,38,19,0,516,644,5,49,0,0,517,644,5,50,0,0,518,644,5,51,0,
  	0,519,644,5,52,0,0,520,644,5,53,0,0,521,644,5,62,0,0,522,523,5,63,0,0,
  	523,644,3,38,19,0,524,525,5,64,0,0,525,526,3,38,19,0,526,527,3,38,19,
  	0,527,644,1,0,0,0,528,529,5,65,0,0,529,530,3,38,19,0,530,531,3,38,19,
  	0,531,644,1,0,0,0,532,533,5,66,0,0,533,644,3,38,19,0,534,535,5,67,0,0,
  	535,536,3,38,19,0,536,537,3,34,17,0,537,644,1,0,0,0,538,539,5,68,0,0,
  	539,540,3,38,19,0,540,541,3,38,19,0,541,644,1,0,0,0,542,543,5,69,0,0,
  	543,544,3,38,19,0,544,545,3,38,19,0,545,644,1,0,0,0,546,547,5,70,0,0,
  	547,644,3,38,19,0,548,549,5,71,0,0,549,644,3,38,19,0,550,644,5,72,0,0,
  	551,552,5,73,0,0,552,553,3,38,19,0,553,554,3,38,19,0,554,644,1,0,0,0,
  	555,556,5,74,0,0,556,644,3,38,19,0,557,558,5,75,0,0,558,559,3,38,19,0,
  	559,560,3,38,19,0,560,644,1,0,0,0,561,562,5,76,0,0,562,563,3,38,19,0,
  	563,564,3,38,19,0,564,644,1,0,0,0,565,644,5,77,0,0,566,644,5,127,0,0,
  	567,644,5,128,0,0,568,644,5,125,0,0,569,644,5,126,0,0,570,644,5,129,0,
  	0,571,572,5,12,0,0,572,576,5,10,0,0,573,575,3,36,18,0,574,573,1,0,0,0,
  	575,578,1,0,0,0,576,574,1,0,0,0,576,577,1,0,0,0,577,644,1,0,0,0,578,576,
  	1,0,0,0,579,644,5,134,0,0,580,644,5,135,0,0,581,644,5,136,0,0,582,644,
  	5,137,0,0,583,644,5,139,0,0,584,644,5,138,0,0,585,589,5,140,0,0,586,588,
  	3,36,18,0,587,586,1,0,0,0,588,591,1,0,0,0,589,587,1,0,0,0,589,590,1,0,
  	0,0,590,644,1,0,0,0,591,589,1,0,0,0,592,644,5,141,0,0,593,594,5,142,0,
  	0,594,644,5,3,0,0,595,596,5,143,0,0,596,644,5,3,0,0,597,599,5,79,0,0,
  	598,600,5,123,0,0,599,598,1,0,0,0,599,600,1,0,0,0,600,602,1,0,0,0,601,
  	603,5,124,0,0,602,601,1,0,0,0,602,603,1,0,0,0,603,644,1,0,0,0,604,606,
  	5,78,0,0,605,607,5,123,0,0,606,605,1,0,0,0,606,607,1,0,0,0,607,609,1,
  	0,0,0,608,610,5,124,0,0,609,608,1,0,0,0,609,610,1,0,0,0,610,644,1,0,0,
  	0,611,644,5,80,0,0,612,614,5,81,0,0,613,615,5,123,0,0,614,613,1,0,0,0,
  	614,615,1,0,0,0,615,617,1,0,0,0,616,618,5,124,0,0,617,616,1,0,0,0,617,
  	618,1,0,0,0,618,644,1,0,0,0,619,621,5,82,0,0,620,622,5,123,0,0,621,620,
  	1,0,0,0,621,622,1,0,0,0,622,624,1,0,0,0,623,625,5,124,0,0,624,623,1,0,
  	0,0,624,625,1,0,0,0,625,644,1,0,0,0,626,628,5,83,0,0,627,629,5,123,0,
  	0,628,627,1,0,0,0,628,629,1,0,0,0,629,631,1,0,0,0,630,632,5,124,0,0,631,
  	630,1,0,0,0,631,632,1,0,0,0,632,644,1,0,0,0,633,635,5,84,0,0,634,636,
  	5,123,0,0,635,634,1,0,0,0,635,636,1,0,0,0,636,638,1,0,0,0,637,639,5,124,
  	0,0,638,637,1,0,0,0,638,639,1,0,0,0,639,644,1,0,0,0,640,641,5,60,0,0,
  	641,644,3,38,19,0,642,644,5,61,0,0,643,384,1,0,0,0,643,385,1,0,0,0,643,
  	386,1,0,0,0,643,387,1,0,0,0,643,388,1,0,0,0,643,390,1,0,0,0,643,392,1,
  	0,0,0,643,398,1,0,0,0,643,400,1,0,0,0,643,405,1,0,0,0,643,406,1,0,0,0,
  	643,408,1,0,0,0,643,410,1,0,0,0,643,412,1,0,0,0,643,414,1,0,0,0,643,416,
  	1,0,0,0,643,418,1,0,0,0,643,420,1,0,0,0,643,422,1,0,0,0,643,424,1,0,0,
  	0,643,428,1,0,0,0,643,432,1,0,0,0,643,436,1,0,0,0,643,440,1,0,0,0,643,
  	444,1,0,0,0,643,450,1,0,0,0,643,455,1,0,0,0,643,457,1,0,0,0,643,464,1,
  	0,0,0,643,471,1,0,0,0,643,478,1,0,0,0,643,485,1,0,0,0,643,493,1,0,0,0,
  	643,501,1,0,0,0,643,502,1,0,0,0,643,503,1,0,0,0,643,505,1,0,0,0,643,506,
  	1,0,0,0,643,507,1,0,0,0,643,509,1,0,0,0,643,511,1,0,0,0,643,513,1,0,0,
  	0,643,514,1,0,0,0,643,516,1,0,0,0,643,517,1,0,0,0,643,518,1,0,0,0,643,
  	519,1,0,0,0,643,520,1,0,0,0,643,521,1,0,0,0,643,522,1,0,0,0,643,524,1,
  	0,0,0,643,528,1,0,0,0,643,532,1,0,0,0,643,534,1,0,0,0,643,538,1,0,0,0,
  	643,542,1,0,0,0,643,546,1,0,0,0,643,548,1,0,0,0,643,550,1,0,0,0,643,551,
  	1,0,0,0,643,555,1,0,0,0,643,557,1,0,0,0,643,561,1,0,0,0,643,565,1,0,0,
  	0,643,566,1,0,0,0,643,567,1,0,0,0,643,568,1,0,0,0,643,569,1,0,0,0,643,
  	570,1,0,0,0,643,571,1,0,0,0,643,579,1,0,0,0,643,580,1,0,0,0,643,581,1,
  	0,0,0,643,582,1,0,0,0,643,583,1,0,0,0,643,584,1,0,0,0,643,585,1,0,0,0,
  	643,592,1,0,0,0,643,593,1,0,0,0,643,595,1,0,0,0,643,597,1,0,0,0,643,604,
  	1,0,0,0,643,611,1,0,0,0,643,612,1,0,0,0,643,619,1,0,0,0,643,626,1,0,0,
  	0,643,633,1,0,0,0,643,640,1,0,0,0,643,642,1,0,0,0,644,47,1,0,0,0,645,
  	657,5,98,0,0,646,647,5,1,0,0,647,651,5,153,0,0,648,650,3,10,5,0,649,648,
  	1,0,0,0,650,653,1,0,0,0,651,649,1,0,0,0,651,652,1,0,0,0,652,654,1,0,0,
  	0,653,651,1,0,0,0,654,656,5,2,0,0,655,646,1,0,0,0,656,659,1,0,0,0,657,
  	655,1,0,0,0,657,658,1,0,0,0,658,660,1,0,0,0,659,657,1,0,0,0,660,661,3,
  	42,21,0,661,49,1,0,0,0,662,664,5,100,0,0,663,665,3,38,19,0,664,663,1,
  	0,0,0,664,665,1,0,0,0,665,666,1,0,0,0,666,673,3,52,26,0,667,669,5,104,
  	0,0,668,670,3,38,19,0,669,668,1,0,0,0,669,670,1,0,0,0,670,671,1,0,0,0,
  	671,673,3,52,26,0,672,662,1,0,0,0,672,667,1,0,0,0,673,51,1,0,0,0,674,
  	676,3,32,16,0,675,674,1,0,0,0,675,676,1,0,0,0,676,688,1,0,0,0,677,678,
  	5,1,0,0,678,682,5,152,0,0,679,681,3,10,5,0,680,679,1,0,0,0,681,684,1,
  	0,0,0,682,680,1,0,0,0,682,683,1,0,0,0,683,685,1,0,0,0,684,682,1,0,0,0,
  	685,687,5,2,0,0,686,677,1,0,0,0,687,690,1,0,0,0,688,686,1,0,0,0,688,689,
  	1,0,0,0,689,702,1,0,0,0,690,688,1,0,0,0,691,692,5,1,0,0,692,696,5,153,
  	0,0,693,695,3,10,5,0,694,693,1,0,0,0,695,698,1,0,0,0,696,694,1,0,0,0,
  	696,697,1,0,0,0,697,699,1,0,0,0,698,696,1,0,0,0,699,701,5,2,0,0,700,691,
  	1,0,0,0,701,704,1,0,0,0,702,700,1,0,0,0,702,703,1,0,0,0,703,705,1,0,0,
  	0,704,702,1,0,0,0,705,706,3,42,21,0,706,53,1,0,0,0,707,709,7,3,0,0,708,
  	710,3,40,20,0,709,708,1,0,0,0,709,710,1,0,0,0,710,711,1,0,0,0,711,712,
  	3,56,28,0,712,714,5,90,0,0,713,715,3,40,20,0,714,713,1,0,0,0,714,715,
  	1,0,0,0,715,742,1,0,0,0,716,718,5,95,0,0,717,719,3,40,20,0,718,717,1,
  	0,0,0,718,719,1,0,0,0,719,720,1,0,0,0,720,726,3,56,28,0,721,723,5,97,
  	0,0,722,724,3,40,20,0,723,722,1,0,0,0,723,724,1,0,0,0,724,725,1,0,0,0,
  	725,727,3,42,21,0,726,721,1,0,0,0,726,727,1,0,0,0,727,728,1,0,0,0,728,
  	730,5,90,0,0,729,731,3,40,20,0,730,729,1,0,0,0,730,731,1,0,0,0,731,742,
  	1,0,0,0,732,734,5,55,0,0,733,735,3,40,20,0,734,733,1,0,0,0,734,735,1,
  	0,0,0,735,736,1,0,0,0,736,737,3,60,30,0,737,739,5,90,0,0,738,740,3,40,
  	20,0,739,738,1,0,0,0,739,740,1,0,0,0,740,742,1,0,0,0,741,707,1,0,0,0,
  	741,716,1,0,0,0,741,732,1,0,0,0,742,55,1,0,0,0,743,745,3,32,16,0,744,
  	743,1,0,0,0,744,745,1,0,0,0,745,746,1,0,0,0,746,747,3,58,29,0,747,57,
  	1,0,0,0,748,749,5,1,0,0,749,753,5,152,0,0,750,752,3,10,5,0,751,750,1,
  	0,0,0,752,755,1,0,0,0,753,751,1,0,0,0,753,754,1,0,0,0,754,756,1,0,0,0,
  	755,753,1,0,0,0,756,758,5,2,0,0,757,748,1,0,0,0,758,761,1,0,0,0,759,757,
  	1,0,0,0,759,760,1,0,0,0,760,773,1,0,0,0,761,759,1,0,0,0,762,763,5,1,0,
  	0,763,767,5,153,0,0,764,766,3,10,5,0,765,764,1,0,0,0,766,769,1,0,0,0,
  	767,765,1,0,0,0,767,768,1,0,0,0,768,770,1,0,0,0,769,767,1,0,0,0,770,772,
  	5,2,0,0,771,762,1,0,0,0,772,775,1,0,0,0,773,771,1,0,0,0,773,774,1,0,0,
  	0,774,776,1,0,0,0,775,773,1,0,0,0,776,777,3,42,21,0,777,59,1,0,0,0,778,
  	780,3,32,16,0,779,778,1,0,0,0,779,780,1,0,0,0,780,781,1,0,0,0,781,782,
  	3,62,31,0,782,61,1,0,0,0,783,784,5,1,0,0,784,788,5,152,0,0,785,787,3,
  	10,5,0,786,785,1,0,0,0,787,790,1,0,0,0,788,786,1,0,0,0,788,789,1,0,0,
  	0,789,791,1,0,0,0,790,788,1,0,0,0,791,793,5,2,0,0,792,783,1,0,0,0,793,
  	796,1,0,0,0,794,792,1,0,0,0,794,795,1,0,0,0,795,808,1,0,0,0,796,794,1,
  	0,0,0,797,798,5,1,0,0,798,802,5,153,0,0,799,801,3,10,5,0,800,799,1,0,
  	0,0,801,804,1,0,0,0,802,800,1,0,0,0,802,803,1,0,0,0,803,805,1,0,0,0,804,
  	802,1,0,0,0,805,807,5,2,0,0,806,797,1,0,0,0,807,810,1,0,0,0,808,806,1,
  	0,0,0,808,809,1,0,0,0,809,811,1,0,0,0,810,808,1,0,0,0,811,812,3,64,32,
  	0,812,63,1,0,0,0,813,820,5,1,0,0,814,815,5,56,0,0,815,821,3,38,19,0,816,
  	817,5,57,0,0,817,821,3,38,19,0,818,821,5,58,0,0,819,821,5,59,0,0,820,
  	814,1,0,0,0,820,816,1,0,0,0,820,818,1,0,0,0,820,819,1,0,0,0,821,822,1,
  	0,0,0,822,823,3,38,19,0,823,824,5,2,0,0,824,826,1,0,0,0,825,813,1,0,0,
  	0,826,829,1,0,0,0,827,825,1,0,0,0,827,828,1,0,0,0,828,830,1,0,0,0,829,
  	827,1,0,0,0,830,831,3,42,21,0,831,65,1,0,0,0,832,833,5,1,0,0,833,834,
  	3,68,34,0,834,835,5,2,0,0,835,67,1,0,0,0,836,840,3,46,23,0,837,839,3,
  	66,33,0,838,837,1,0,0,0,839,842,1,0,0,0,840,838,1,0,0,0,840,841,1,0,0,
  	0,841,876,1,0,0,0,842,840,1,0,0,0,843,844,5,98,0,0,844,876,3,70,35,0,
  	845,847,5,100,0,0,846,848,3,38,19,0,847,846,1,0,0,0,847,848,1,0,0,0,848,
  	849,1,0,0,0,849,876,3,72,36,0,850,852,5,104,0,0,851,853,3,38,19,0,852,
  	851,1,0,0,0,852,853,1,0,0,0,853,854,1,0,0,0,854,876,3,72,36,0,855,857,
  	5,88,0,0,856,858,3,40,20,0,857,856,1,0,0,0,857,858,1,0,0,0,858,859,1,
  	0,0,0,859,876,3,56,28,0,860,862,5,89,0,0,861,863,3,40,20,0,862,861,1,
  	0,0,0,862,863,1,0,0,0,863,864,1,0,0,0,864,876,3,56,28,0,865,867,5,95,
  	0,0,866,868,3,40,20,0,867,866,1,0,0,0,867,868,1,0,0,0,868,869,1,0,0,0,
  	869,876,3,78,39,0,870,872,5,55,0,0,871,873,3,40,20,0,872,871,1,0,0,0,
  	872,873,1,0,0,0,873,874,1,0,0,0,874,876,3,82,41,0,875,836,1,0,0,0,875,
  	843,1,0,0,0,875,845,1,0,0,0,875,850,1,0,0,0,875,855,1,0,0,0,875,860,1,
  	0,0,0,875,865,1,0,0,0,875,870,1,0,0,0,876,69,1,0,0,0,877,878,5,1,0,0,
  	878,882,5,153,0,0,879,881,3,10,5,0,880,879,1,0,0,0,881,884,1,0,0,0,882,
  	880,1,0,0,0,882,883,1,0,0,0,883,885,1,0,0,0,884,882,1,0,0,0,885,887,5,
  	2,0,0,886,877,1,0,0,0,887,890,1,0,0,0,888,886,1,0,0,0,888,889,1,0,0,0,
  	889,894,1,0,0,0,890,888,1,0,0,0,891,893,3,66,33,0,892,891,1,0,0,0,893,
  	896,1,0,0,0,894,892,1,0,0,0,894,895,1,0,0,0,895,71,1,0,0,0,896,894,1,
  	0,0,0,897,899,3,32,16,0,898,897,1,0,0,0,898,899,1,0,0,0,899,900,1,0,0,
  	0,900,901,3,74,37,0,901,73,1,0,0,0,902,903,5,1,0,0,903,907,5,152,0,0,
  	904,906,3,10,5,0,905,904,1,0,0,0,906,909,1,0,0,0,907,905,1,0,0,0,907,
  	908,1,0,0,0,908,910,1,0,0,0,909,907,1,0,0,0,910,912,5,2,0,0,911,902,1,
  	0,0,0,912,915,1,0,0,0,913,911,1,0,0,0,913,914,1,0,0,0,914,916,1,0,0,0,
  	915,913,1,0,0,0,916,917,3,76,38,0,917,75,1,0,0,0,918,919,5,1,0,0,919,
  	923,5,153,0,0,920,922,3,10,5,0,921,920,1,0,0,0,922,925,1,0,0,0,923,921,
  	1,0,0,0,923,924,1,0,0,0,924,926,1,0,0,0,925,923,1,0,0,0,926,928,5,2,0,
  	0,927,918,1,0,0,0,928,931,1,0,0,0,929,927,1,0,0,0,929,930,1,0,0,0,930,
  	935,1,0,0,0,931,929,1,0,0,0,932,934,3,66,33,0,933,932,1,0,0,0,934,937,
  	1,0,0,0,935,933,1,0,0,0,935,936,1,0,0,0,936,77,1,0,0,0,937,935,1,0,0,
  	0,938,940,3,32,16,0,939,938,1,0,0,0,939,940,1,0,0,0,940,952,1,0,0,0,941,
  	942,5,1,0,0,942,946,5,152,0,0,943,945,3,10,5,0,944,943,1,0,0,0,945,948,
  	1,0,0,0,946,944,1,0,0,0,946,947,1,0,0,0,947,949,1,0,0,0,948,946,1,0,0,
  	0,949,951,5,2,0,0,950,941,1,0,0,0,951,954,1,0,0,0,952,950,1,0,0,0,952,
  	953,1,0,0,0,953,955,1,0,0,0,954,952,1,0,0,0,955,956,3,80,40,0,956,79,
  	1,0,0,0,957,958,5,1,0,0,958,962,5,153,0,0,959,961,3,10,5,0,960,959,1,
  	0,0,0,961,964,1,0,0,0,962,960,1,0,0,0,962,963,1,0,0,0,963,965,1,0,0,0,
  	964,962,1,0,0,0,965,967,5,2,0,0,966,957,1,0,0,0,967,970,1,0,0,0,968,966,
  	1,0,0,0,968,969,1,0,0,0,969,974,1,0,0,0,970,968,1,0,0,0,971,973,3,66,
  	33,0,972,971,1,0,0,0,973,976,1,0,0,0,974,972,1,0,0,0,974,975,1,0,0,0,
  	975,977,1,0,0,0,976,974,1,0,0,0,977,978,5,1,0,0,978,979,5,96,0,0,979,
  	980,3,42,21,0,980,986,5,2,0,0,981,982,5,1,0,0,982,983,5,97,0,0,983,984,
  	3,42,21,0,984,985,5,2,0,0,985,987,1,0,0,0,986,981,1,0,0,0,986,987,1,0,
  	0,0,987,81,1,0,0,0,988,990,3,32,16,0,989,988,1,0,0,0,989,990,1,0,0,0,
  	990,991,1,0,0,0,991,992,3,84,42,0,992,83,1,0,0,0,993,994,5,1,0,0,994,
  	998,5,152,0,0,995,997,3,10,5,0,996,995,1,0,0,0,997,1000,1,0,0,0,998,996,
  	1,0,0,0,998,999,1,0,0,0,999,1001,1,0,0,0,1000,998,1,0,0,0,1001,1003,5,
  	2,0,0,1002,993,1,0,0,0,1003,1006,1,0,0,0,1004,1002,1,0,0,0,1004,1005,
  	1,0,0,0,1005,1018,1,0,0,0,1006,1004,1,0,0,0,1007,1008,5,1,0,0,1008,1012,
  	5,153,0,0,1009,1011,3,10,5,0,1010,1009,1,0,0,0,1011,1014,1,0,0,0,1012,
  	1010,1,0,0,0,1012,1013,1,0,0,0,1013,1015,1,0,0,0,1014,1012,1,0,0,0,1015,
  	1017,5,2,0,0,1016,1007,1,0,0,0,1017,1020,1,0,0,0,1018,1016,1,0,0,0,1018,
  	1019,1,0,0,0,1019,1021,1,0,0,0,1020,1018,1,0,0,0,1021,1022,3,86,43,0,
  	1022,85,1,0,0,0,1023,1030,5,1,0,0,1024,1025,5,56,0,0,1025,1031,3,38,19,
  	0,1026,1027,5,57,0,0,1027,1031,3,38,19,0,1028,1031,5,58,0,0,1029,1031,
  	5,59,0,0,1030,1024,1,0,0,0,1030,1026,1,0,0,0,1030,1028,1,0,0,0,1030,1029,
  	1,0,0,0,1031,1032,1,0,0,0,1032,1033,3,38,19,0,1033,1034,5,2,0,0,1034,
  	1036,1,0,0,0,1035,1023,1,0,0,0,1036,1039,1,0,0,0,1037,1035,1,0,0,0,1037,
  	1038,1,0,0,0,1038,1040,1,0,0,0,1039,1037,1,0,0,0,1040,1041,3,42,21,0,
  	1041,87,1,0,0,0,1042,1043,3,42,21,0,1043,89,1,0,0,0,1044,1045,5,1,0,0,
  	1045,1047,5,150,0,0,1046,1048,3,40,20,0,1047,1046,1,0,0,0,1047,1048,1,
  	0,0,0,1048,1049,1,0,0,0,1049,1050,3,92,46,0,1050,1051,5,2,0,0,1051,91,
  	1,0,0,0,1052,1054,3,32,16,0,1053,1052,1,0,0,0,1053,1054,1,0,0,0,1054,
  	1055,1,0,0,0,1055,1066,3,98,49,0,1056,1058,3,144,72,0,1057,1059,3,32,
  	16,0,1058,1057,1,0,0,0,1058,1059,1,0,0,0,1059,1060,1,0,0,0,1060,1061,
  	3,94,47,0,1061,1066,1,0,0,0,1062,1063,3,150,75,0,1063,1064,3,92,46,0,
  	1064,1066,1,0,0,0,1065,1053,1,0,0,0,1065,1056,1,0,0,0,1065,1062,1,0,0,
  	0,1066,93,1,0,0,0,1067,1068,5,1,0,0,1068,1072,5,152,0,0,1069,1071,3,10,
  	5,0,1070,1069,1,0,0,0,1071,1074,1,0,0,0,1072,1070,1,0,0,0,1072,1073,1,
  	0,0,0,1073,1075,1,0,0,0,1074,1072,1,0,0,0,1075,1083,5,2,0,0,1076,1077,
  	5,1,0,0,1077,1078,5,152,0,0,1078,1079,3,40,20,0,1079,1080,3,10,5,0,1080,
  	1081,5,2,0,0,1081,1083,1,0,0,0,1082,1067,1,0,0,0,1082,1076,1,0,0,0,1083,
  	1086,1,0,0,0,1084,1082,1,0,0,0,1084,1085,1,0,0,0,1085,1087,1,0,0,0,1086,
  	1084,1,0,0,0,1087,1088,3,96,48,0,1088,95,1,0,0,0,1089,1090,5,1,0,0,1090,
  	1094,5,153,0,0,1091,1093,3,10,5,0,1092,1091,1,0,0,0,1093,1096,1,0,0,0,
  	1094,1092,1,0,0,0,1094,1095,1,0,0,0,1095,1097,1,0,0,0,1096,1094,1,0,0,
  	0,1097,1099,5,2,0,0,1098,1089,1,0,0,0,1099,1102,1,0,0,0,1100,1098,1,0,
  	0,0,1100,1101,1,0,0,0,1101,97,1,0,0,0,1102,1100,1,0,0,0,1103,1104,5,1,
  	0,0,1104,1108,5,152,0,0,1105,1107,3,10,5,0,1106,1105,1,0,0,0,1107,1110,
  	1,0,0,0,1108,1106,1,0,0,0,1108,1109,1,0,0,0,1109,1111,1,0,0,0,1110,1108,
  	1,0,0,0,1111,1119,5,2,0,0,1112,1113,5,1,0,0,1113,1114,5,152,0,0,1114,
  	1115,3,40,20,0,1115,1116,3,10,5,0,1116,1117,5,2,0,0,1117,1119,1,0,0,0,
  	1118,1103,1,0,0,0,1118,1112,1,0,0,0,1119,1122,1,0,0,0,1120,1118,1,0,0,
  	0,1120,1121,1,0,0,0,1121,1123,1,0,0,0,1122,1120,1,0,0,0,1123,1124,3,100,
  	50,0,1124,99,1,0,0,0,1125,1126,5,1,0,0,1126,1130,5,153,0,0,1127,1129,
  	3,10,5,0,1128,1127,1,0,0,0,1129,1132,1,0,0,0,1130,1128,1,0,0,0,1130,1131,
  	1,0,0,0,1131,1133,1,0,0,0,1132,1130,1,0,0,0,1133,1135,5,2,0,0,1134,1125,
  	1,0,0,0,1135,1138,1,0,0,0,1136,1134,1,0,0,0,1136,1137,1,0,0,0,1137,1139,
  	1,0,0,0,1138,1136,1,0,0,0,1139,1140,3,102,51,0,1140,101,1,0,0,0,1141,
  	1142,5,1,0,0,1142,1152,5,154,0,0,1143,1144,3,40,20,0,1144,1145,3,10,5,
  	0,1145,1153,1,0,0,0,1146,1148,3,10,5,0,1147,1146,1,0,0,0,1148,1151,1,
  	0,0,0,1149,1147,1,0,0,0,1149,1150,1,0,0,0,1150,1153,1,0,0,0,1151,1149,
  	1,0,0,0,1152,1143,1,0,0,0,1152,1149,1,0,0,0,1153,1154,1,0,0,0,1154,1156,
  	5,2,0,0,1155,1141,1,0,0,0,1156,1159,1,0,0,0,1157,1155,1,0,0,0,1157,1158,
  	1,0,0,0,1158,1160,1,0,0,0,1159,1157,1,0,0,0,1160,1161,3,42,21,0,1161,
  	103,1,0,0,0,1162,1163,5,1,0,0,1163,1164,5,156,0,0,1164,1165,3,38,19,0,
  	1165,1166,5,2,0,0,1166,105,1,0,0,0,1167,1168,5,1,0,0,1168,1169,5,157,
  	0,0,1169,1170,3,38,19,0,1170,1171,5,2,0,0,1171,107,1,0,0,0,1172,1173,
  	5,1,0,0,1173,1174,5,160,0,0,1174,1175,3,88,44,0,1175,1176,5,2,0,0,1176,
  	1179,1,0,0,0,1177,1179,3,66,33,0,1178,1172,1,0,0,0,1178,1177,1,0,0,0,
  	1179,109,1,0,0,0,1180,1181,5,150,0,0,1181,111,1,0,0,0,1182,1183,5,1,0,
  	0,1183,1184,5,164,0,0,1184,1185,3,88,44,0,1185,1186,5,2,0,0,1186,1189,
  	1,0,0,0,1187,1189,3,66,33,0,1188,1182,1,0,0,0,1188,1187,1,0,0,0,1189,
  	113,1,0,0,0,1190,1194,3,110,55,0,1191,1193,3,38,19,0,1192,1191,1,0,0,
  	0,1193,1196,1,0,0,0,1194,1192,1,0,0,0,1194,1195,1,0,0,0,1195,1205,1,0,
  	0,0,1196,1194,1,0,0,0,1197,1201,3,8,4,0,1198,1200,3,112,56,0,1199,1198,
  	1,0,0,0,1200,1203,1,0,0,0,1201,1199,1,0,0,0,1201,1202,1,0,0,0,1202,1205,
  	1,0,0,0,1203,1201,1,0,0,0,1204,1190,1,0,0,0,1204,1197,1,0,0,0,1205,115,
  	1,0,0,0,1206,1207,5,1,0,0,1207,1209,5,158,0,0,1208,1210,3,40,20,0,1209,
  	1208,1,0,0,0,1209,1210,1,0,0,0,1210,1218,1,0,0,0,1211,1212,3,104,52,0,
  	1212,1213,3,108,54,0,1213,1219,1,0,0,0,1214,1216,3,108,54,0,1215,1214,
  	1,0,0,0,1215,1216,1,0,0,0,1216,1219,1,0,0,0,1217,1219,5,163,0,0,1218,
  	1211,1,0,0,0,1218,1215,1,0,0,0,1218,1217,1,0,0,0,1219,1220,1,0,0,0,1220,
  	1221,3,114,57,0,1221,1222,5,2,0,0,1222,1238,1,0,0,0,1223,1224,5,1,0,0,
  	1224,1226,5,158,0,0,1225,1227,3,40,20,0,1226,1225,1,0,0,0,1226,1227,1,
  	0,0,0,1227,1228,1,0,0,0,1228,1232,3,108,54,0,1229,1231,3,38,19,0,1230,
  	1229,1,0,0,0,1231,1234,1,0,0,0,1232,1230,1,0,0,0,1232,1233,1,0,0,0,1233,
  	1235,1,0,0,0,1234,1232,1,0,0,0,1235,1236,5,2,0,0,1236,1238,1,0,0,0,1237,
  	1206,1,0,0,0,1237,1223,1,0,0,0,1238,117,1,0,0,0,1239,1240,5,1,0,0,1240,
  	1242,5,156,0,0,1241,1243,3,40,20,0,1242,1241,1,0,0,0,1242,1243,1,0,0,
  	0,1243,1244,1,0,0,0,1244,1245,3,120,60,0,1245,1246,5,2,0,0,1246,119,1,
  	0,0,0,1247,1251,3,28,14,0,1248,1249,3,44,22,0,1249,1250,3,42,21,0,1250,
  	1252,1,0,0,0,1251,1248,1,0,0,0,1251,1252,1,0,0,0,1252,1279,1,0,0,0,1253,
  	1254,3,144,72,0,1254,1255,3,28,14,0,1255,1279,1,0,0,0,1256,1257,3,150,
  	75,0,1257,1258,3,120,60,0,1258,1279,1,0,0,0,1259,1260,3,8,4,0,1260,1261,
  	5,1,0,0,1261,1274,5,158,0,0,1262,1264,3,38,19,0,1263,1262,1,0,0,0,1264,
  	1267,1,0,0,0,1265,1263,1,0,0,0,1265,1266,1,0,0,0,1266,1275,1,0,0,0,1267,
  	1265,1,0,0,0,1268,1270,3,112,56,0,1269,1268,1,0,0,0,1270,1273,1,0,0,0,
  	1271,1269,1,0,0,0,1271,1272,1,0,0,0,1272,1275,1,0,0,0,1273,1271,1,0,0,
  	0,1274,1265,1,0,0,0,1274,1271,1,0,0,0,1275,1276,1,0,0,0,1276,1277,5,2,
  	0,0,1277,1279,1,0,0,0,1278,1247,1,0,0,0,1278,1253,1,0,0,0,1278,1256,1,
  	0,0,0,1278,1259,1,0,0,0,1279,121,1,0,0,0,1280,1281,5,1,0,0,1281,1283,
  	5,159,0,0,1282,1284,3,40,20,0,1283,1282,1,0,0,0,1283,1284,1,0,0,0,1284,
  	1285,1,0,0,0,1285,1286,3,106,53,0,1286,1290,3,108,54,0,1287,1289,5,6,
  	0,0,1288,1287,1,0,0,0,1289,1292,1,0,0,0,1290,1288,1,0,0,0,1290,1291,1,
  	0,0,0,1291,1293,1,0,0,0,1292,1290,1,0,0,0,1293,1294,5,2,0,0,1294,1311,
  	1,0,0,0,1295,1296,5,1,0,0,1296,1298,5,159,0,0,1297,1299,3,40,20,0,1298,
  	1297,1,0,0,0,1298,1299,1,0,0,0,1299,1301,1,0,0,0,1300,1302,3,108,54,0,
  	1301,1300,1,0,0,0,1301,1302,1,0,0,0,1302,1306,1,0,0,0,1303,1305,5,6,0,
  	0,1304,1303,1,0,0,0,1305,1308,1,0,0,0,1306,1304,1,0,0,0,1306,1307,1,0,
  	0,0,1307,1309,1,0,0,0,1308,1306,1,0,0,0,1309,1311,5,2,0,0,1310,1280,1,
  	0,0,0,1310,1295,1,0,0,0,1311,123,1,0,0,0,1312,1313,5,1,0,0,1313,1315,
  	5,157,0,0,1314,1316,3,40,20,0,1315,1314,1,0,0,0,1315,1316,1,0,0,0,1316,
  	1317,1,0,0,0,1317,1318,3,126,63,0,1318,1319,5,2,0,0,1319,125,1,0,0,0,
  	1320,1337,3,30,15,0,1321,1322,3,144,72,0,1322,1323,3,30,15,0,1323,1337,
  	1,0,0,0,1324,1325,3,150,75,0,1325,1326,3,126,63,0,1326,1337,1,0,0,0,1327,
  	1328,5,1,0,0,1328,1332,5,159,0,0,1329,1331,5,6,0,0,1330,1329,1,0,0,0,
  	1331,1334,1,0,0,0,1332,1330,1,0,0,0,1332,1333,1,0,0,0,1333,1335,1,0,0,
  	0,1334,1332,1,0,0,0,1335,1337,5,2,0,0,1336,1320,1,0,0,0,1336,1321,1,0,
  	0,0,1336,1324,1,0,0,0,1336,1327,1,0,0,0,1337,127,1,0,0,0,1338,1339,5,
  	1,0,0,1339,1341,5,165,0,0,1340,1342,3,40,20,0,1341,1340,1,0,0,0,1341,
  	1342,1,0,0,0,1342,1343,1,0,0,0,1343,1344,3,130,65,0,1344,1345,5,2,0,0,
  	1345,129,1,0,0,0,1346,1348,3,150,75,0,1347,1346,1,0,0,0,1348,1351,1,0,
  	0,0,1349,1347,1,0,0,0,1349,1350,1,0,0,0,1350,1353,1,0,0,0,1351,1349,1,
  	0,0,0,1352,1354,3,32,16,0,1353,1352,1,0,0,0,1353,1354,1,0,0,0,1354,1355,
  	1,0,0,0,1355,1369,3,22,11,0,1356,1358,3,150,75,0,1357,1356,1,0,0,0,1358,
  	1361,1,0,0,0,1359,1357,1,0,0,0,1359,1360,1,0,0,0,1360,1362,1,0,0,0,1361,
  	1359,1,0,0,0,1362,1364,3,144,72,0,1363,1365,3,32,16,0,1364,1363,1,0,0,
  	0,1364,1365,1,0,0,0,1365,1366,1,0,0,0,1366,1367,3,132,66,0,1367,1369,
  	1,0,0,0,1368,1349,1,0,0,0,1368,1359,1,0,0,0,1369,131,1,0,0,0,1370,1371,
  	5,1,0,0,1371,1381,5,152,0,0,1372,1374,3,10,5,0,1373,1372,1,0,0,0,1374,
  	1377,1,0,0,0,1375,1373,1,0,0,0,1375,1376,1,0,0,0,1376,1382,1,0,0,0,1377,
  	1375,1,0,0,0,1378,1379,3,40,20,0,1379,1380,3,10,5,0,1380,1382,1,0,0,0,
  	1381,1375,1,0,0,0,1381,1378,1,0,0,0,1382,1383,1,0,0,0,1383,1385,5,2,0,
  	0,1384,1370,1,0,0,0,1385,1388,1,0,0,0,1386,1384,1,0,0,0,1386,1387,1,0,
  	0,0,1387,1389,1,0,0,0,1388,1386,1,0,0,0,1389,1390,3,134,67,0,1390,133,
  	1,0,0,0,1391,1392,5,1,0,0,1392,1396,5,153,0,0,1393,1395,3,10,5,0,1394,
  	1393,1,0,0,0,1395,1398,1,0,0,0,1396,1394,1,0,0,0,1396,1397,1,0,0,0,1397,
  	1399,1,0,0,0,1398,1396,1,0,0,0,1399,1401,5,2,0,0,1400,1391,1,0,0,0,1401,
  	1404,1,0,0,0,1402,1400,1,0,0,0,1402,1403,1,0,0,0,1403,135,1,0,0,0,1404,
  	1402,1,0,0,0,1405,1406,5,1,0,0,1406,1408,5,155,0,0,1407,1409,3,40,20,
  	0,1408,1407,1,0,0,0,1408,1409,1,0,0,0,1409,1410,1,0,0,0,1410,1411,3,138,
  	69,0,1411,1412,5,2,0,0,1412,137,1,0,0,0,1413,1414,3,12,6,0,1414,1415,
  	3,88,44,0,1415,1423,1,0,0,0,1416,1417,3,144,72,0,1417,1418,3,12,6,0,1418,
  	1423,1,0,0,0,1419,1420,3,150,75,0,1420,1421,3,138,69,0,1421,1423,1,0,
  	0,0,1422,1413,1,0,0,0,1422,1416,1,0,0,0,1422,1419,1,0,0,0,1423,139,1,
  	0,0,0,1424,1425,5,1,0,0,1425,1427,5,150,0,0,1426,1428,3,40,20,0,1427,
  	1426,1,0,0,0,1427,1428,1,0,0,0,1428,1431,1,0,0,0,1429,1432,3,32,16,0,
  	1430,1432,3,22,11,0,1431,1429,1,0,0,0,1431,1430,1,0,0,0,1432,1433,1,0,
  	0,0,1433,1434,5,2,0,0,1434,1471,1,0,0,0,1435,1436,5,1,0,0,1436,1438,5,
  	156,0,0,1437,1439,3,40,20,0,1438,1437,1,0,0,0,1438,1439,1,0,0,0,1439,
  	1440,1,0,0,0,1440,1441,3,28,14,0,1441,1442,5,2,0,0,1442,1471,1,0,0,0,
  	1443,1444,5,1,0,0,1444,1446,5,157,0,0,1445,1447,3,40,20,0,1446,1445,1,
  	0,0,0,1446,1447,1,0,0,0,1447,1448,1,0,0,0,1448,1449,3,30,15,0,1449,1450,
  	5,2,0,0,1450,1471,1,0,0,0,1451,1452,5,1,0,0,1452,1454,5,155,0,0,1453,
  	1455,3,40,20,0,1454,1453,1,0,0,0,1454,1455,1,0,0,0,1455,1456,1,0,0,0,
  	1456,1457,3,12,6,0,1457,1458,5,2,0,0,1458,1471,1,0,0,0,1459,1460,5,1,
  	0,0,1460,1462,5,165,0,0,1461,1463,3,40,20,0,1462,1461,1,0,0,0,1462,1463,
  	1,0,0,0,1463,1466,1,0,0,0,1464,1467,3,32,16,0,1465,1467,3,22,11,0,1466,
  	1464,1,0,0,0,1466,1465,1,0,0,0,1467,1468,1,0,0,0,1468,1469,5,2,0,0,1469,
  	1471,1,0,0,0,1470,1424,1,0,0,0,1470,1435,1,0,0,0,1470,1443,1,0,0,0,1470,
  	1451,1,0,0,0,1470,1459,1,0,0,0,1471,141,1,0,0,0,1472,1473,5,1,0,0,1473,
  	1474,5,161,0,0,1474,1475,3,2,1,0,1475,1476,3,2,1,0,1476,1477,3,140,70,
  	0,1477,1478,5,2,0,0,1478,143,1,0,0,0,1479,1480,5,1,0,0,1480,1481,5,161,
  	0,0,1481,1482,3,2,1,0,1482,1483,3,2,1,0,1483,1484,5,2,0,0,1484,145,1,
  	0,0,0,1485,1486,5,1,0,0,1486,1487,7,4,0,0,1487,1488,3,38,19,0,1488,1489,
  	5,2,0,0,1489,147,1,0,0,0,1490,1491,5,1,0,0,1491,1492,5,162,0,0,1492,1493,
  	3,2,1,0,1493,1494,3,146,73,0,1494,1495,5,2,0,0,1495,149,1,0,0,0,1496,
  	1497,5,1,0,0,1497,1498,5,162,0,0,1498,1499,3,2,1,0,1499,1500,5,2,0,0,
  	1500,151,1,0,0,0,1501,1502,5,1,0,0,1502,1504,5,149,0,0,1503,1505,3,40,
  	20,0,1504,1503,1,0,0,0,1504,1505,1,0,0,0,1505,1506,1,0,0,0,1506,1507,
  	3,26,13,0,1507,1508,5,2,0,0,1508,153,1,0,0,0,1509,1520,3,152,76,0,1510,
  	1511,5,1,0,0,1511,1515,5,41,0,0,1512,1514,3,152,76,0,1513,1512,1,0,0,
  	0,1514,1517,1,0,0,0,1515,1513,1,0,0,0,1515,1516,1,0,0,0,1516,1518,1,0,
  	0,0,1517,1515,1,0,0,0,1518,1520,5,2,0,0,1519,1509,1,0,0,0,1519,1510,1,
  	0,0,0,1520,155,1,0,0,0,1521,1522,3,154,77,0,1522,157,1,0,0,0,1523,1524,
  	5,1,0,0,1524,1525,5,151,0,0,1525,1526,3,38,19,0,1526,1527,5,2,0,0,1527,
  	159,1,0,0,0,1528,1540,3,156,78,0,1529,1540,3,136,68,0,1530,1540,3,118,
  	59,0,1531,1540,3,124,62,0,1532,1540,3,90,45,0,1533,1540,3,116,58,0,1534,
  	1540,3,122,61,0,1535,1540,3,158,79,0,1536,1540,3,142,71,0,1537,1540,3,
  	148,74,0,1538,1540,3,128,64,0,1539,1528,1,0,0,0,1539,1529,1,0,0,0,1539,
  	1530,1,0,0,0,1539,1531,1,0,0,0,1539,1532,1,0,0,0,1539,1533,1,0,0,0,1539,
  	1534,1,0,0,0,1539,1535,1,0,0,0,1539,1536,1,0,0,0,1539,1537,1,0,0,0,1539,
  	1538,1,0,0,0,1540,1541,1,0,0,0,1541,1539,1,0,0,0,1541,1542,1,0,0,0,1542,
  	161,1,0,0,0,1543,1544,5,1,0,0,1544,1546,5,166,0,0,1545,1547,5,186,0,0,
  	1546,1545,1,0,0,0,1546,1547,1,0,0,0,1547,1551,1,0,0,0,1548,1550,3,160,
  	80,0,1549,1548,1,0,0,0,1550,1553,1,0,0,0,1551,1549,1,0,0,0,1551,1552,
  	1,0,0,0,1552,1554,1,0,0,0,1553,1551,1,0,0,0,1554,1555,5,2,0,0,1555,163,
  	1,0,0,0,1556,1558,3,160,80,0,1557,1556,1,0,0,0,1557,1558,1,0,0,0,1558,
  	165,1,0,0,0,1559,1574,3,162,81,0,1560,1561,5,1,0,0,1561,1563,5,166,0,
  	0,1562,1564,5,186,0,0,1563,1562,1,0,0,0,1563,1564,1,0,0,0,1564,1565,1,
  	0,0,0,1565,1569,7,5,0,0,1566,1568,5,6,0,0,1567,1566,1,0,0,0,1568,1571,
  	1,0,0,0,1569,1567,1,0,0,0,1569,1570,1,0,0,0,1570,1572,1,0,0,0,1571,1569,
  	1,0,0,0,1572,1574,5,2,0,0,1573,1559,1,0,0,0,1573,1560,1,0,0,0,1574,167,
  	1,0,0,0,1575,1576,5,1,0,0,1576,1578,5,174,0,0,1577,1579,5,186,0,0,1578,
  	1577,1,0,0,0,1578,1579,1,0,0,0,1579,1580,1,0,0,0,1580,1581,3,2,1,0,1581,
  	1582,3,186,93,0,1582,1583,5,2,0,0,1583,1593,1,0,0,0,1584,1585,5,1,0,0,
  	1585,1587,5,175,0,0,1586,1588,5,186,0,0,1587,1586,1,0,0,0,1587,1588,1,
  	0,0,0,1588,1589,1,0,0,0,1589,1590,3,2,1,0,1590,1591,5,2,0,0,1591,1593,
  	1,0,0,0,1592,1575,1,0,0,0,1592,1584,1,0,0,0,1593,169,1,0,0,0,1594,1595,
  	5,1,0,0,1595,1596,5,176,0,0,1596,1597,3,166,83,0,1597,1598,5,6,0,0,1598,
  	1599,5,2,0,0,1599,1647,1,0,0,0,1600,1601,5,1,0,0,1601,1602,5,177,0,0,
  	1602,1603,3,166,83,0,1603,1604,5,6,0,0,1604,1605,5,2,0,0,1605,1647,1,
  	0,0,0,1606,1607,5,1,0,0,1607,1608,5,178,0,0,1608,1609,3,166,83,0,1609,
  	1610,5,6,0,0,1610,1611,5,2,0,0,1611,1647,1,0,0,0,1612,1613,5,1,0,0,1613,
  	1614,5,181,0,0,1614,1615,3,166,83,0,1615,1616,5,6,0,0,1616,1617,5,2,0,
  	0,1617,1647,1,0,0,0,1618,1619,5,1,0,0,1619,1620,5,179,0,0,1620,1624,3,
  	168,84,0,1621,1623,3,190,95,0,1622,1621,1,0,0,0,1623,1626,1,0,0,0,1624,
  	1622,1,0,0,0,1624,1625,1,0,0,0,1625,1627,1,0,0,0,1626,1624,1,0,0,0,1627,
  	1628,5,2,0,0,1628,1647,1,0,0,0,1629,1630,5,1,0,0,1630,1631,5,180,0,0,
  	1631,1632,3,168,84,0,1632,1633,5,2,0,0,1633,1647,1,0,0,0,1634,1635,5,
  	1,0,0,1635,1636,5,181,0,0,1636,1637,3,168,84,0,1637,1638,5,6,0,0,1638,
  	1639,5,2,0,0,1639,1647,1,0,0,0,1640,1641,5,1,0,0,1641,1642,5,182,0,0,
  	1642,1643,3,168,84,0,1643,1644,5,6,0,0,1644,1645,5,2,0,0,1645,1647,1,
  	0,0,0,1646,1594,1,0,0,0,1646,1600,1,0,0,0,1646,1606,1,0,0,0,1646,1612,
  	1,0,0,0,1646,1618,1,0,0,0,1646,1629,1,0,0,0,1646,1634,1,0,0,0,1646,1640,
  	1,0,0,0,1647,171,1,0,0,0,1648,1675,3,168,84,0,1649,1675,3,170,85,0,1650,
  	1675,3,166,83,0,1651,1652,5,1,0,0,1652,1653,5,173,0,0,1653,1655,3,2,1,
  	0,1654,1656,5,186,0,0,1655,1654,1,0,0,0,1655,1656,1,0,0,0,1656,1657,1,
  	0,0,0,1657,1658,5,2,0,0,1658,1675,1,0,0,0,1659,1660,5,1,0,0,1660,1662,
  	5,170,0,0,1661,1663,5,186,0,0,1662,1661,1,0,0,0,1662,1663,1,0,0,0,1663,
  	1664,1,0,0,0,1664,1665,3,174,87,0,1665,1666,5,2,0,0,1666,1675,1,0,0,0,
  	1667,1668,5,1,0,0,1668,1670,5,171,0,0,1669,1671,5,186,0,0,1670,1669,1,
  	0,0,0,1670,1671,1,0,0,0,1671,1672,1,0,0,0,1672,1675,5,2,0,0,1673,1675,
  	3,176,88,0,1674,1648,1,0,0,0,1674,1649,1,0,0,0,1674,1650,1,0,0,0,1674,
  	1651,1,0,0,0,1674,1659,1,0,0,0,1674,1667,1,0,0,0,1674,1673,1,0,0,0,1675,
  	173,1,0,0,0,1676,1677,5,1,0,0,1677,1678,5,26,0,0,1678,1679,5,1,0,0,1679,
  	1680,5,166,0,0,1680,1681,5,186,0,0,1681,1682,5,2,0,0,1682,1684,5,2,0,
  	0,1683,1676,1,0,0,0,1684,1687,1,0,0,0,1685,1683,1,0,0,0,1685,1686,1,0,
  	0,0,1686,1691,1,0,0,0,1687,1685,1,0,0,0,1688,1690,3,172,86,0,1689,1688,
  	1,0,0,0,1690,1693,1,0,0,0,1691,1689,1,0,0,0,1691,1692,1,0,0,0,1692,175,
  	1,0,0,0,1693,1691,1,0,0,0,1694,1695,5,1,0,0,1695,1697,5,172,0,0,1696,
  	1698,5,186,0,0,1697,1696,1,0,0,0,1697,1698,1,0,0,0,1698,1702,1,0,0,0,
  	1699,1701,3,172,86,0,1700,1699,1,0,0,0,1701,1704,1,0,0,0,1702,1700,1,
  	0,0,0,1702,1703,1,0,0,0,1703,1705,1,0,0,0,1704,1702,1,0,0,0,1705,1727,
  	5,2,0,0,1706,1707,5,1,0,0,1707,1709,5,183,0,0,1708,1710,5,186,0,0,1709,
  	1708,1,0,0,0,1709,1710,1,0,0,0,1710,1711,1,0,0,0,1711,1712,5,6,0,0,1712,
  	1727,5,2,0,0,1713,1714,5,1,0,0,1714,1716,5,184,0,0,1715,1717,5,186,0,
  	0,1716,1715,1,0,0,0,1716,1717,1,0,0,0,1717,1718,1,0,0,0,1718,1719,5,6,
  	0,0,1719,1727,5,2,0,0,1720,1721,5,1,0,0,1721,1723,5,184,0,0,1722,1724,
  	5,186,0,0,1723,1722,1,0,0,0,1723,1724,1,0,0,0,1724,1725,1,0,0,0,1725,
  	1727,5,2,0,0,1726,1694,1,0,0,0,1726,1706,1,0,0,0,1726,1713,1,0,0,0,1726,
  	1720,1,0,0,0,1727,177,1,0,0,0,1728,1729,5,1,0,0,1729,1730,5,11,0,0,1730,
  	1731,3,36,18,0,1731,1732,5,2,0,0,1732,179,1,0,0,0,1733,1734,5,1,0,0,1734,
  	1735,5,12,0,0,1735,1739,5,10,0,0,1736,1738,3,36,18,0,1737,1736,1,0,0,
  	0,1738,1741,1,0,0,0,1739,1737,1,0,0,0,1739,1740,1,0,0,0,1740,1742,1,0,
  	0,0,1741,1739,1,0,0,0,1742,1743,5,2,0,0,1743,181,1,0,0,0,1744,1745,5,
  	1,0,0,1745,1746,5,42,0,0,1746,1747,3,6,3,0,1747,1748,5,2,0,0,1748,1758,
  	1,0,0,0,1749,1750,5,1,0,0,1750,1751,5,46,0,0,1751,1752,5,3,0,0,1752,1758,
  	5,2,0,0,1753,1754,5,1,0,0,1754,1755,5,47,0,0,1755,1756,5,3,0,0,1756,1758,
  	5,2,0,0,1757,1744,1,0,0,0,1757,1749,1,0,0,0,1757,1753,1,0,0,0,1758,183,
  	1,0,0,0,1759,1763,3,178,89,0,1760,1763,3,180,90,0,1761,1763,3,182,91,
  	0,1762,1759,1,0,0,0,1762,1760,1,0,0,0,1762,1761,1,0,0,0,1763,185,1,0,
  	0,0,1764,1766,3,184,92,0,1765,1764,1,0,0,0,1766,1769,1,0,0,0,1767,1765,
  	1,0,0,0,1767,1768,1,0,0,0,1768,187,1,0,0,0,1769,1767,1,0,0,0,1770,1773,
  	3,36,18,0,1771,1773,5,185,0,0,1772,1770,1,0,0,0,1772,1771,1,0,0,0,1773,
  	189,1,0,0,0,1774,1803,3,178,89,0,1775,1803,3,182,91,0,1776,1777,5,1,0,
  	0,1777,1778,5,11,0,0,1778,1779,5,185,0,0,1779,1803,5,2,0,0,1780,1781,
  	5,1,0,0,1781,1782,7,6,0,0,1782,1803,5,2,0,0,1783,1784,5,1,0,0,1784,1785,
  	5,12,0,0,1785,1789,5,10,0,0,1786,1788,3,188,94,0,1787,1786,1,0,0,0,1788,
  	1791,1,0,0,0,1789,1787,1,0,0,0,1789,1790,1,0,0,0,1790,1792,1,0,0,0,1791,
  	1789,1,0,0,0,1792,1803,5,2,0,0,1793,1794,5,1,0,0,1794,1798,5,169,0,0,
  	1795,1797,3,190,95,0,1796,1795,1,0,0,0,1797,1800,1,0,0,0,1798,1796,1,
  	0,0,0,1798,1799,1,0,0,0,1799,1801,1,0,0,0,1800,1798,1,0,0,0,1801,1803,
  	5,2,0,0,1802,1774,1,0,0,0,1802,1775,1,0,0,0,1802,1776,1,0,0,0,1802,1780,
  	1,0,0,0,1802,1783,1,0,0,0,1802,1793,1,0,0,0,1803,191,1,0,0,0,1804,1806,
  	3,172,86,0,1805,1804,1,0,0,0,1806,1809,1,0,0,0,1807,1805,1,0,0,0,1807,
  	1808,1,0,0,0,1808,1810,1,0,0,0,1809,1807,1,0,0,0,1810,1819,5,0,0,1,1811,
  	1813,3,160,80,0,1812,1811,1,0,0,0,1813,1814,1,0,0,0,1814,1812,1,0,0,0,
  	1814,1815,1,0,0,0,1815,1816,1,0,0,0,1816,1817,5,0,0,1,1817,1819,1,0,0,
  	0,1818,1807,1,0,0,0,1818,1812,1,0,0,0,1819,193,1,0,0,0,1820,1821,3,162,
  	81,0,1821,1822,5,0,0,1,1822,1831,1,0,0,0,1823,1825,3,160,80,0,1824,1823,
  	1,0,0,0,1825,1828,1,0,0,0,1826,1824,1,0,0,0,1826,1827,1,0,0,0,1827,1829,
  	1,0,0,0,1828,1826,1,0,0,0,1829,1831,5,0,0,1,1830,1820,1,0,0,0,1830,1826,
  	1,0,0,0,1831,195,1,0,0,0,228,201,216,236,241,249,253,261,268,274,279,
  	289,296,303,308,318,326,331,337,341,347,350,368,372,375,377,382,396,426,
  	430,434,438,442,448,453,459,462,466,469,473,476,480,483,487,490,495,498,
  	576,589,599,602,606,609,614,617,621,624,628,631,635,638,643,651,657,664,
  	669,672,675,682,688,696,702,709,714,718,723,726,730,734,739,741,744,753,
  	759,767,773,779,788,794,802,808,820,827,840,847,852,857,862,867,872,875,
  	882,888,894,898,907,913,923,929,935,939,946,952,962,968,974,986,989,998,
  	1004,1012,1018,1030,1037,1047,1053,1058,1065,1072,1082,1084,1094,1100,
  	1108,1118,1120,1130,1136,1149,1152,1157,1178,1188,1194,1201,1204,1209,
  	1215,1218,1226,1232,1237,1242,1251,1265,1271,1274,1278,1283,1290,1298,
  	1301,1306,1310,1315,1332,1336,1341,1349,1353,1359,1364,1368,1375,1381,
  	1386,1396,1402,1408,1422,1427,1431,1438,1446,1454,1462,1466,1470,1504,
  	1515,1519,1539,1541,1546,1551,1557,1563,1569,1573,1578,1587,1592,1624,
  	1646,1655,1662,1670,1674,1685,1691,1697,1702,1709,1716,1723,1726,1739,
  	1757,1762,1767,1772,1789,1798,1802,1807,1814,1818,1826,1830
  };
  staticData->serializedATN = antlr4::atn::SerializedATNView(serializedATNSegment, sizeof(serializedATNSegment) / sizeof(serializedATNSegment[0]));

  antlr4::atn::ATNDeserializer deserializer;
  staticData->atn = deserializer.deserialize(staticData->serializedATN);

  const size_t count = staticData->atn->getNumberOfDecisions();
  staticData->decisionToDFA.reserve(count);
  for (size_t i = 0; i < count; i++) { 
    staticData->decisionToDFA.emplace_back(staticData->atn->getDecisionState(i), i);
  }
  watparserParserStaticData = staticData.release();
}

}

WatParser::WatParser(TokenStream *input) : WatParser(input, antlr4::atn::ParserATNSimulatorOptions()) {}

WatParser::WatParser(TokenStream *input, const antlr4::atn::ParserATNSimulatorOptions &options) : Parser(input) {
  WatParser::initialize();
  _interpreter = new atn::ParserATNSimulator(this, *watparserParserStaticData->atn, watparserParserStaticData->decisionToDFA, watparserParserStaticData->sharedContextCache, options);
}

WatParser::~WatParser() {
  delete _interpreter;
}

const atn::ATN& WatParser::getATN() const {
  return *watparserParserStaticData->atn;
}

std::string WatParser::getGrammarFileName() const {
  return "WatParser.g4";
}

const std::vector<std::string>& WatParser::getRuleNames() const {
  return watparserParserStaticData->ruleNames;
}

const dfa::Vocabulary& WatParser::getVocabulary() const {
  return watparserParserStaticData->vocabulary;
}

antlr4::atn::SerializedATNView WatParser::getSerializedATN() const {
  return watparserParserStaticData->serializedATN;
}


//----------------- ValueContext ------------------------------------------------------------------

WatParser::ValueContext::ValueContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ValueContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::ValueContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::ValueContext::getRuleIndex() const {
  return WatParser::RuleValue;
}

void WatParser::ValueContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterValue(this);
}

void WatParser::ValueContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitValue(this);
}


std::any WatParser::ValueContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitValue(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ValueContext* WatParser::value() {
  ValueContext *_localctx = _tracker.createInstance<ValueContext>(_ctx, getState());
  enterRule(_localctx, 0, WatParser::RuleValue);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(196);
    _la = _input->LA(1);
    if (!(_la == WatParser::INT

    || _la == WatParser::FLOAT)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NameContext ------------------------------------------------------------------

WatParser::NameContext::NameContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NameContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}


size_t WatParser::NameContext::getRuleIndex() const {
  return WatParser::RuleName;
}

void WatParser::NameContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterName(this);
}

void WatParser::NameContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitName(this);
}


std::any WatParser::NameContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitName(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NameContext* WatParser::name() {
  NameContext *_localctx = _tracker.createInstance<NameContext>(_ctx, getState());
  enterRule(_localctx, 2, WatParser::RuleName);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(198);
    match(WatParser::STRING_);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Null_optContext ------------------------------------------------------------------

WatParser::Null_optContext::Null_optContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Null_optContext::NULL_() {
  return getToken(WatParser::NULL_, 0);
}


size_t WatParser::Null_optContext::getRuleIndex() const {
  return WatParser::RuleNull_opt;
}

void WatParser::Null_optContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNull_opt(this);
}

void WatParser::Null_optContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNull_opt(this);
}


std::any WatParser::Null_optContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNull_opt(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Null_optContext* WatParser::null_opt() {
  Null_optContext *_localctx = _tracker.createInstance<Null_optContext>(_ctx, getState());
  enterRule(_localctx, 4, WatParser::RuleNull_opt);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(201);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NULL_) {
      setState(200);
      match(WatParser::NULL_);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Heap_typeContext ------------------------------------------------------------------

WatParser::Heap_typeContext::Heap_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Heap_typeContext::ANY() {
  return getToken(WatParser::ANY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NONE() {
  return getToken(WatParser::NONE, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EQ() {
  return getToken(WatParser::EQ, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::I31() {
  return getToken(WatParser::I31, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOFUNC() {
  return getToken(WatParser::NOFUNC, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EXTERN() {
  return getToken(WatParser::EXTERN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::NOEXTERN() {
  return getToken(WatParser::NOEXTERN, 0);
}

tree::TerminalNode* WatParser::Heap_typeContext::EXN() {
  return getToken(WatParser::EXN, 0);
}

WatParser::Var_Context* WatParser::Heap_typeContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}


size_t WatParser::Heap_typeContext::getRuleIndex() const {
  return WatParser::RuleHeap_type;
}

void WatParser::Heap_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHeap_type(this);
}

void WatParser::Heap_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHeap_type(this);
}


std::any WatParser::Heap_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHeap_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Heap_typeContext* WatParser::heap_type() {
  Heap_typeContext *_localctx = _tracker.createInstance<Heap_typeContext>(_ctx, getState());
  enterRule(_localctx, 6, WatParser::RuleHeap_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(216);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 1, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(203);
      match(WatParser::ANY);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(204);
      match(WatParser::NONE);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(205);
      match(WatParser::EQ);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(206);
      match(WatParser::I31);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(207);
      match(WatParser::STRUCT);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(208);
      match(WatParser::ARRAY);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(209);
      match(WatParser::FUNC);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(210);
      match(WatParser::NOFUNC);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(211);
      match(WatParser::EXTERN);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(212);
      match(WatParser::NOEXTERN);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(213);
      match(WatParser::EXN);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(214);
      match(WatParser::EXTERN);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(215);
      var_();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Ref_typeContext ------------------------------------------------------------------

WatParser::Ref_typeContext::Ref_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Ref_typeContext::FUNCREF() {
  return getToken(WatParser::FUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EXTERNREF() {
  return getToken(WatParser::EXTERNREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::REF() {
  return getToken(WatParser::REF, 0);
}

WatParser::Null_optContext* WatParser::Ref_typeContext::null_opt() {
  return getRuleContext<WatParser::Null_optContext>(0);
}

WatParser::Heap_typeContext* WatParser::Ref_typeContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Ref_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ANYREF() {
  return getToken(WatParser::ANYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLREF() {
  return getToken(WatParser::NULLREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EQREF() {
  return getToken(WatParser::EQREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::I31REF() {
  return getToken(WatParser::I31REF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::STRUCTREF() {
  return getToken(WatParser::STRUCTREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::ARRAYREF() {
  return getToken(WatParser::ARRAYREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLFUNCREF() {
  return getToken(WatParser::NULLFUNCREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::NULLEXTERNREF() {
  return getToken(WatParser::NULLEXTERNREF, 0);
}

tree::TerminalNode* WatParser::Ref_typeContext::EXNREF() {
  return getToken(WatParser::EXNREF, 0);
}


size_t WatParser::Ref_typeContext::getRuleIndex() const {
  return WatParser::RuleRef_type;
}

void WatParser::Ref_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRef_type(this);
}

void WatParser::Ref_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRef_type(this);
}


std::any WatParser::Ref_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRef_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Ref_typeContext* WatParser::ref_type() {
  Ref_typeContext *_localctx = _tracker.createInstance<Ref_typeContext>(_ctx, getState());
  enterRule(_localctx, 8, WatParser::RuleRef_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(236);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 2, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(218);
      match(WatParser::FUNCREF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(219);
      match(WatParser::EXTERNREF);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(220);
      match(WatParser::LPAR);
      setState(221);
      match(WatParser::REF);
      setState(222);
      null_opt();
      setState(223);
      heap_type();
      setState(224);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(226);
      match(WatParser::ANYREF);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(227);
      match(WatParser::NULLREF);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(228);
      match(WatParser::EQREF);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(229);
      match(WatParser::I31REF);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(230);
      match(WatParser::STRUCTREF);
      break;
    }

    case 9: {
      enterOuterAlt(_localctx, 9);
      setState(231);
      match(WatParser::ARRAYREF);
      break;
    }

    case 10: {
      enterOuterAlt(_localctx, 10);
      setState(232);
      match(WatParser::NULLFUNCREF);
      break;
    }

    case 11: {
      enterOuterAlt(_localctx, 11);
      setState(233);
      match(WatParser::NULLEXTERNREF);
      break;
    }

    case 12: {
      enterOuterAlt(_localctx, 12);
      setState(234);
      match(WatParser::EXNREF);
      break;
    }

    case 13: {
      enterOuterAlt(_localctx, 13);
      setState(235);
      match(WatParser::EXTERNREF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Val_typeContext ------------------------------------------------------------------

WatParser::Val_typeContext::Val_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Val_typeContext::NUM_TYPE() {
  return getToken(WatParser::NUM_TYPE, 0);
}

tree::TerminalNode* WatParser::Val_typeContext::VEC_TYPE() {
  return getToken(WatParser::VEC_TYPE, 0);
}

WatParser::Ref_typeContext* WatParser::Val_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}


size_t WatParser::Val_typeContext::getRuleIndex() const {
  return WatParser::RuleVal_type;
}

void WatParser::Val_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVal_type(this);
}

void WatParser::Val_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVal_type(this);
}


std::any WatParser::Val_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Val_typeContext* WatParser::val_type() {
  Val_typeContext *_localctx = _tracker.createInstance<Val_typeContext>(_ctx, getState());
  enterRule(_localctx, 10, WatParser::RuleVal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(241);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NUM_TYPE: {
        enterOuterAlt(_localctx, 1);
        setState(238);
        match(WatParser::NUM_TYPE);
        break;
      }

      case WatParser::VEC_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(239);
        match(WatParser::VEC_TYPE);
        break;
      }

      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 3);
        setState(240);
        ref_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_typeContext ------------------------------------------------------------------

WatParser::Global_typeContext::Global_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Global_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Global_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Global_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Global_typeContext::getRuleIndex() const {
  return WatParser::RuleGlobal_type;
}

void WatParser::Global_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_type(this);
}

void WatParser::Global_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_type(this);
}


std::any WatParser::Global_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_typeContext* WatParser::global_type() {
  Global_typeContext *_localctx = _tracker.createInstance<Global_typeContext>(_ctx, getState());
  enterRule(_localctx, 12, WatParser::RuleGlobal_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(249);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 4, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(243);
      val_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(244);
      match(WatParser::LPAR);
      setState(245);
      match(WatParser::MUT);
      setState(246);
      val_type();
      setState(247);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Storage_typeContext ------------------------------------------------------------------

WatParser::Storage_typeContext::Storage_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Val_typeContext* WatParser::Storage_typeContext::val_type() {
  return getRuleContext<WatParser::Val_typeContext>(0);
}

tree::TerminalNode* WatParser::Storage_typeContext::PACK_TYPE() {
  return getToken(WatParser::PACK_TYPE, 0);
}


size_t WatParser::Storage_typeContext::getRuleIndex() const {
  return WatParser::RuleStorage_type;
}

void WatParser::Storage_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStorage_type(this);
}

void WatParser::Storage_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStorage_type(this);
}


std::any WatParser::Storage_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStorage_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Storage_typeContext* WatParser::storage_type() {
  Storage_typeContext *_localctx = _tracker.createInstance<Storage_typeContext>(_ctx, getState());
  enterRule(_localctx, 14, WatParser::RuleStorage_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(253);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::LPAR:
      case WatParser::NUM_TYPE:
      case WatParser::VEC_TYPE:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 1);
        setState(251);
        val_type();
        break;
      }

      case WatParser::PACK_TYPE: {
        enterOuterAlt(_localctx, 2);
        setState(252);
        match(WatParser::PACK_TYPE);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Field_typeContext ------------------------------------------------------------------

WatParser::Field_typeContext::Field_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Storage_typeContext* WatParser::Field_typeContext::storage_type() {
  return getRuleContext<WatParser::Storage_typeContext>(0);
}

tree::TerminalNode* WatParser::Field_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::MUT() {
  return getToken(WatParser::MUT, 0);
}

tree::TerminalNode* WatParser::Field_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Field_typeContext::getRuleIndex() const {
  return WatParser::RuleField_type;
}

void WatParser::Field_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterField_type(this);
}

void WatParser::Field_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitField_type(this);
}


std::any WatParser::Field_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitField_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Field_typeContext* WatParser::field_type() {
  Field_typeContext *_localctx = _tracker.createInstance<Field_typeContext>(_ctx, getState());
  enterRule(_localctx, 16, WatParser::RuleField_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(261);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 6, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(255);
      storage_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(256);
      match(WatParser::LPAR);
      setState(257);
      match(WatParser::MUT);
      setState(258);
      storage_type();
      setState(259);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Struct_typeContext ------------------------------------------------------------------

WatParser::Struct_typeContext::Struct_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::FIELD() {
  return getTokens(WatParser::FIELD);
}

tree::TerminalNode* WatParser::Struct_typeContext::FIELD(size_t i) {
  return getToken(WatParser::FIELD, i);
}

std::vector<tree::TerminalNode *> WatParser::Struct_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Struct_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Struct_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Struct_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Field_typeContext *> WatParser::Struct_typeContext::field_type() {
  return getRuleContexts<WatParser::Field_typeContext>();
}

WatParser::Field_typeContext* WatParser::Struct_typeContext::field_type(size_t i) {
  return getRuleContext<WatParser::Field_typeContext>(i);
}


size_t WatParser::Struct_typeContext::getRuleIndex() const {
  return WatParser::RuleStruct_type;
}

void WatParser::Struct_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStruct_type(this);
}

void WatParser::Struct_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStruct_type(this);
}


std::any WatParser::Struct_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStruct_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Struct_typeContext* WatParser::struct_type() {
  Struct_typeContext *_localctx = _tracker.createInstance<Struct_typeContext>(_ctx, getState());
  enterRule(_localctx, 18, WatParser::RuleStruct_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(279);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(263);
      match(WatParser::LPAR);
      setState(264);
      match(WatParser::FIELD);
      setState(274);
      _errHandler->sync(this);
      switch (_input->LA(1)) {
        case WatParser::LPAR:
        case WatParser::RPAR:
        case WatParser::NUM_TYPE:
        case WatParser::PACK_TYPE:
        case WatParser::VEC_TYPE:
        case WatParser::ANYREF:
        case WatParser::NULLREF:
        case WatParser::EQREF:
        case WatParser::I31REF:
        case WatParser::STRUCTREF:
        case WatParser::ARRAYREF:
        case WatParser::FUNCREF:
        case WatParser::NULLFUNCREF:
        case WatParser::EXTERNREF:
        case WatParser::NULLEXTERNREF:
        case WatParser::EXNREF: {
          setState(268);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643778) != 0)) {
            setState(265);
            field_type();
            setState(270);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          break;
        }

        case WatParser::VAR: {
          setState(271);
          bind_var();
          setState(272);
          field_type();
          break;
        }

      default:
        throw NoViableAltException(this);
      }
      setState(276);
      match(WatParser::RPAR);
      setState(281);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Array_typeContext ------------------------------------------------------------------

WatParser::Array_typeContext::Array_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Field_typeContext* WatParser::Array_typeContext::field_type() {
  return getRuleContext<WatParser::Field_typeContext>(0);
}


size_t WatParser::Array_typeContext::getRuleIndex() const {
  return WatParser::RuleArray_type;
}

void WatParser::Array_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterArray_type(this);
}

void WatParser::Array_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitArray_type(this);
}


std::any WatParser::Array_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitArray_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Array_typeContext* WatParser::array_type() {
  Array_typeContext *_localctx = _tracker.createInstance<Array_typeContext>(_ctx, getState());
  enterRule(_localctx, 20, WatParser::RuleArray_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(282);
    field_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_typeContext ------------------------------------------------------------------

WatParser::Func_typeContext::Func_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_typeContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_typeContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_typeContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_typeContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_typeContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_typeContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_typeContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_typeContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_typeContext::getRuleIndex() const {
  return WatParser::RuleFunc_type;
}

void WatParser::Func_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_type(this);
}

void WatParser::Func_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_type(this);
}


std::any WatParser::Func_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_typeContext* WatParser::func_type() {
  Func_typeContext *_localctx = _tracker.createInstance<Func_typeContext>(_ctx, getState());
  enterRule(_localctx, 22, WatParser::RuleFunc_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(308);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(284);
      match(WatParser::LPAR);
      setState(303);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 12, _ctx)) {
      case 1: {
        setState(285);
        match(WatParser::RESULT);
        setState(289);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(286);
          val_type();
          setState(291);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(292);
        match(WatParser::PARAM);
        setState(296);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(293);
          val_type();
          setState(298);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 3: {
        setState(299);
        match(WatParser::PARAM);
        setState(300);
        bind_var();
        setState(301);
        val_type();
        break;
      }

      default:
        break;
      }
      setState(305);
      match(WatParser::RPAR);
      setState(310);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Str_typeContext ------------------------------------------------------------------

WatParser::Str_typeContext::Str_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Str_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Str_typeContext::STRUCT() {
  return getToken(WatParser::STRUCT, 0);
}

WatParser::Struct_typeContext* WatParser::Str_typeContext::struct_type() {
  return getRuleContext<WatParser::Struct_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::ARRAY() {
  return getToken(WatParser::ARRAY, 0);
}

WatParser::Array_typeContext* WatParser::Str_typeContext::array_type() {
  return getRuleContext<WatParser::Array_typeContext>(0);
}

tree::TerminalNode* WatParser::Str_typeContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_typeContext* WatParser::Str_typeContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}


size_t WatParser::Str_typeContext::getRuleIndex() const {
  return WatParser::RuleStr_type;
}

void WatParser::Str_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStr_type(this);
}

void WatParser::Str_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStr_type(this);
}


std::any WatParser::Str_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Str_typeContext* WatParser::str_type() {
  Str_typeContext *_localctx = _tracker.createInstance<Str_typeContext>(_ctx, getState());
  enterRule(_localctx, 24, WatParser::RuleStr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(311);
    match(WatParser::LPAR);
    setState(318);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::STRUCT: {
        setState(312);
        match(WatParser::STRUCT);
        setState(313);
        struct_type();
        break;
      }

      case WatParser::ARRAY: {
        setState(314);
        match(WatParser::ARRAY);
        setState(315);
        array_type();
        break;
      }

      case WatParser::FUNC: {
        setState(316);
        match(WatParser::FUNC);
        setState(317);
        func_type();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
    setState(320);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Sub_typeContext ------------------------------------------------------------------

WatParser::Sub_typeContext::Sub_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Str_typeContext* WatParser::Sub_typeContext::str_type() {
  return getRuleContext<WatParser::Str_typeContext>(0);
}

tree::TerminalNode* WatParser::Sub_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::SUB() {
  return getToken(WatParser::SUB, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Sub_typeContext::FINAL() {
  return getToken(WatParser::FINAL, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Sub_typeContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Sub_typeContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::Sub_typeContext::getRuleIndex() const {
  return WatParser::RuleSub_type;
}

void WatParser::Sub_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSub_type(this);
}

void WatParser::Sub_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSub_type(this);
}


std::any WatParser::Sub_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSub_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Sub_typeContext* WatParser::sub_type() {
  Sub_typeContext *_localctx = _tracker.createInstance<Sub_typeContext>(_ctx, getState());
  enterRule(_localctx, 26, WatParser::RuleSub_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(337);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 17, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(322);
      str_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(323);
      match(WatParser::LPAR);
      setState(324);
      match(WatParser::SUB);
      setState(326);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::FINAL) {
        setState(325);
        match(WatParser::FINAL);
      }
      setState(331);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(328);
        var_();
        setState(333);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(334);
      str_type();
      setState(335);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_typeContext ------------------------------------------------------------------

WatParser::Table_typeContext::Table_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Table_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Table_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

WatParser::Ref_typeContext* WatParser::Table_typeContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}


size_t WatParser::Table_typeContext::getRuleIndex() const {
  return WatParser::RuleTable_type;
}

void WatParser::Table_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_type(this);
}

void WatParser::Table_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_type(this);
}


std::any WatParser::Table_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_typeContext* WatParser::table_type() {
  Table_typeContext *_localctx = _tracker.createInstance<Table_typeContext>(_ctx, getState());
  enterRule(_localctx, 28, WatParser::RuleTable_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(339);
    match(WatParser::NAT);
    setState(341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(340);
      match(WatParser::NAT);
    }
    setState(343);
    ref_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_typeContext ------------------------------------------------------------------

WatParser::Memory_typeContext::Memory_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Memory_typeContext::NAT() {
  return getTokens(WatParser::NAT);
}

tree::TerminalNode* WatParser::Memory_typeContext::NAT(size_t i) {
  return getToken(WatParser::NAT, i);
}

tree::TerminalNode* WatParser::Memory_typeContext::SHARED() {
  return getToken(WatParser::SHARED, 0);
}


size_t WatParser::Memory_typeContext::getRuleIndex() const {
  return WatParser::RuleMemory_type;
}

void WatParser::Memory_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_type(this);
}

void WatParser::Memory_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_type(this);
}


std::any WatParser::Memory_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_typeContext* WatParser::memory_type() {
  Memory_typeContext *_localctx = _tracker.createInstance<Memory_typeContext>(_ctx, getState());
  enterRule(_localctx, 30, WatParser::RuleMemory_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(345);
    match(WatParser::NAT);
    setState(347);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::NAT) {
      setState(346);
      match(WatParser::NAT);
    }
    setState(350);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::SHARED) {
      setState(349);
      match(WatParser::SHARED);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_useContext ------------------------------------------------------------------

WatParser::Type_useContext::Type_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_useContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Var_Context* WatParser::Type_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Type_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Type_useContext::getRuleIndex() const {
  return WatParser::RuleType_use;
}

void WatParser::Type_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_use(this);
}

void WatParser::Type_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_use(this);
}


std::any WatParser::Type_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_useContext* WatParser::type_use() {
  Type_useContext *_localctx = _tracker.createInstance<Type_useContext>(_ctx, getState());
  enterRule(_localctx, 32, WatParser::RuleType_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(352);
    match(WatParser::LPAR);
    setState(353);
    match(WatParser::TYPE);
    setState(354);
    var_();
    setState(355);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Nat32Context ------------------------------------------------------------------

WatParser::Nat32Context::Nat32Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Nat32Context::NAT() {
  return getToken(WatParser::NAT, 0);
}


size_t WatParser::Nat32Context::getRuleIndex() const {
  return WatParser::RuleNat32;
}

void WatParser::Nat32Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNat32(this);
}

void WatParser::Nat32Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNat32(this);
}


std::any WatParser::Nat32Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNat32(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Nat32Context* WatParser::nat32() {
  Nat32Context *_localctx = _tracker.createInstance<Nat32Context>(_ctx, getState());
  enterRule(_localctx, 34, WatParser::RuleNat32);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(357);
    match(WatParser::NAT);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumContext ------------------------------------------------------------------

WatParser::NumContext::NumContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::NumContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::NumContext::INT() {
  return getToken(WatParser::INT, 0);
}

tree::TerminalNode* WatParser::NumContext::FLOAT() {
  return getToken(WatParser::FLOAT, 0);
}


size_t WatParser::NumContext::getRuleIndex() const {
  return WatParser::RuleNum;
}

void WatParser::NumContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNum(this);
}

void WatParser::NumContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNum(this);
}


std::any WatParser::NumContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNum(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumContext* WatParser::num() {
  NumContext *_localctx = _tracker.createInstance<NumContext>(_ctx, getState());
  enterRule(_localctx, 36, WatParser::RuleNum);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(359);
    _la = _input->LA(1);
    if (!((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Var_Context ------------------------------------------------------------------

WatParser::Var_Context::Var_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Var_Context::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Var_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Var_Context::getRuleIndex() const {
  return WatParser::RuleVar_;
}

void WatParser::Var_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterVar_(this);
}

void WatParser::Var_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitVar_(this);
}


std::any WatParser::Var_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitVar_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Var_Context* WatParser::var_() {
  Var_Context *_localctx = _tracker.createInstance<Var_Context>(_ctx, getState());
  enterRule(_localctx, 38, WatParser::RuleVar_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(361);
    _la = _input->LA(1);
    if (!(_la == WatParser::NAT || _la == WatParser::VAR)) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Bind_varContext ------------------------------------------------------------------

WatParser::Bind_varContext::Bind_varContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Bind_varContext::VAR() {
  return getToken(WatParser::VAR, 0);
}


size_t WatParser::Bind_varContext::getRuleIndex() const {
  return WatParser::RuleBind_var;
}

void WatParser::Bind_varContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBind_var(this);
}

void WatParser::Bind_varContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBind_var(this);
}


std::any WatParser::Bind_varContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBind_var(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Bind_varContext* WatParser::bind_var() {
  Bind_varContext *_localctx = _tracker.createInstance<Bind_varContext>(_ctx, getState());
  enterRule(_localctx, 40, WatParser::RuleBind_var);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(363);
    match(WatParser::VAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Instr_listContext ------------------------------------------------------------------

WatParser::Instr_listContext::Instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::InstrContext *> WatParser::Instr_listContext::instr() {
  return getRuleContexts<WatParser::InstrContext>();
}

WatParser::InstrContext* WatParser::Instr_listContext::instr(size_t i) {
  return getRuleContext<WatParser::InstrContext>(i);
}

WatParser::Call_instr_instr_listContext* WatParser::Instr_listContext::call_instr_instr_list() {
  return getRuleContext<WatParser::Call_instr_instr_listContext>(0);
}

WatParser::Select_instr_instr_listContext* WatParser::Instr_listContext::select_instr_instr_list() {
  return getRuleContext<WatParser::Select_instr_instr_listContext>(0);
}


size_t WatParser::Instr_listContext::getRuleIndex() const {
  return WatParser::RuleInstr_list;
}

void WatParser::Instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr_list(this);
}

void WatParser::Instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr_list(this);
}


std::any WatParser::Instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Instr_listContext* WatParser::instr_list() {
  Instr_listContext *_localctx = _tracker.createInstance<Instr_listContext>(_ctx, getState());
  enterRule(_localctx, 42, WatParser::RuleInstr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(368);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(365);
        instr(); 
      }
      setState(370);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 21, _ctx);
    }
    setState(377);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 24, _ctx)) {
    case 1: {
      setState(372);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::CALL_INDIRECT

      || _la == WatParser::RETURN_CALL_INDIRECT) {
        setState(371);
        call_instr_instr_list();
      }
      break;
    }

    case 2: {
      setState(375);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::SELECT) {
        setState(374);
        select_instr_instr_list();
      }
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- InstrContext ------------------------------------------------------------------

WatParser::InstrContext::InstrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Plain_instrContext* WatParser::InstrContext::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

WatParser::Block_instrContext* WatParser::InstrContext::block_instr() {
  return getRuleContext<WatParser::Block_instrContext>(0);
}

WatParser::ExprContext* WatParser::InstrContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::InstrContext::getRuleIndex() const {
  return WatParser::RuleInstr;
}

void WatParser::InstrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInstr(this);
}

void WatParser::InstrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInstr(this);
}


std::any WatParser::InstrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInstr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::InstrContext* WatParser::instr() {
  InstrContext *_localctx = _tracker.createInstance<InstrContext>(_ctx, getState());
  enterRule(_localctx, 44, WatParser::RuleInstr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(382);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CONST:
      case WatParser::VEC_CONST:
      case WatParser::REF_NULL:
      case WatParser::REF_FUNC:
      case WatParser::REF_IS_NULL:
      case WatParser::REF_AS_NON_NULL:
      case WatParser::REF_TEST:
      case WatParser::REF_CAST:
      case WatParser::REF_EQ:
      case WatParser::REF_I31:
      case WatParser::THROW:
      case WatParser::THROW_REF:
      case WatParser::I31_GET:
      case WatParser::STRUCT_NEW:
      case WatParser::STRUCT_GET:
      case WatParser::STRUCT_SET:
      case WatParser::ARRAY_NEW:
      case WatParser::ARRAY_NEW_FIXED:
      case WatParser::ARRAY_NEW_ELEM:
      case WatParser::ARRAY_NEW_DATA:
      case WatParser::ARRAY_GET:
      case WatParser::ARRAY_SET:
      case WatParser::ARRAY_LEN:
      case WatParser::ARRAY_COPY:
      case WatParser::ARRAY_FILL:
      case WatParser::ARRAY_INIT_DATA:
      case WatParser::ARRAY_INIT_ELEM:
      case WatParser::EXTERN_CONVERT:
      case WatParser::MEMORY_ATOMIC_NOTIFY:
      case WatParser::MEMORY_ATOMIC_WAIT:
      case WatParser::ATOMIC_FENCE:
      case WatParser::ATOMIC_LOAD:
      case WatParser::ATOMIC_STORE:
      case WatParser::ATOMIC_RMW:
      case WatParser::ATOMIC_RMW_CMPXCHG:
      case WatParser::NOP:
      case WatParser::UNREACHABLE:
      case WatParser::DROP:
      case WatParser::BR:
      case WatParser::BR_IF:
      case WatParser::BR_TABLE:
      case WatParser::RETURN:
      case WatParser::SELECT:
      case WatParser::CALL:
      case WatParser::CALL_REF:
      case WatParser::RETURN_CALL:
      case WatParser::RETURN_CALL_REF:
      case WatParser::BR_ON_NULL:
      case WatParser::BR_ON_CAST:
      case WatParser::LOCAL_GET:
      case WatParser::LOCAL_SET:
      case WatParser::LOCAL_TEE:
      case WatParser::GLOBAL_GET:
      case WatParser::GLOBAL_SET:
      case WatParser::TABLE_GET:
      case WatParser::TABLE_SET:
      case WatParser::TABLE_SIZE:
      case WatParser::TABLE_GROW:
      case WatParser::TABLE_FILL:
      case WatParser::TABLE_COPY:
      case WatParser::TABLE_INIT:
      case WatParser::DATA_DROP:
      case WatParser::ELEM_DROP:
      case WatParser::LOAD:
      case WatParser::STORE:
      case WatParser::UNARY:
      case WatParser::BINARY:
      case WatParser::TEST:
      case WatParser::COMPARE:
      case WatParser::CONVERT:
      case WatParser::VEC_LOAD:
      case WatParser::VEC_STORE:
      case WatParser::VEC_LOAD_LANE:
      case WatParser::VEC_STORE_LANE:
      case WatParser::VEC_UNARY:
      case WatParser::VEC_BINARY:
      case WatParser::VEC_TERNARY:
      case WatParser::VEC_TEST:
      case WatParser::VEC_BITMASK:
      case WatParser::VEC_SHIFT:
      case WatParser::VEC_SHUFFLE:
      case WatParser::VEC_SPLAT:
      case WatParser::VEC_EXTRACT:
      case WatParser::VEC_REPLACE:
      case WatParser::MEMORY_SIZE:
      case WatParser::MEMORY_GROW:
      case WatParser::MEMORY_FILL:
      case WatParser::MEMORY_COPY:
      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 1);
        setState(379);
        plain_instr();
        break;
      }

      case WatParser::TRY_TABLE:
      case WatParser::BLOCK:
      case WatParser::LOOP:
      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(380);
        block_instr();
        break;
      }

      case WatParser::LPAR: {
        enterOuterAlt(_localctx, 3);
        setState(381);
        expr();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Plain_instrContext ------------------------------------------------------------------

WatParser::Plain_instrContext::Plain_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Plain_instrContext::UNREACHABLE() {
  return getToken(WatParser::UNREACHABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NOP() {
  return getToken(WatParser::NOP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DROP() {
  return getToken(WatParser::DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR() {
  return getToken(WatParser::BR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Plain_instrContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Plain_instrContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_IF() {
  return getToken(WatParser::BR_IF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_TABLE() {
  return getToken(WatParser::BR_TABLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_NULL() {
  return getToken(WatParser::BR_ON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BR_ON_CAST() {
  return getToken(WatParser::BR_ON_CAST, 0);
}

std::vector<WatParser::Ref_typeContext *> WatParser::Plain_instrContext::ref_type() {
  return getRuleContexts<WatParser::Ref_typeContext>();
}

WatParser::Ref_typeContext* WatParser::Plain_instrContext::ref_type(size_t i) {
  return getRuleContext<WatParser::Ref_typeContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN() {
  return getToken(WatParser::RETURN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL() {
  return getToken(WatParser::CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CALL_REF() {
  return getToken(WatParser::CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL() {
  return getToken(WatParser::RETURN_CALL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::RETURN_CALL_REF() {
  return getToken(WatParser::RETURN_CALL_REF, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_GET() {
  return getToken(WatParser::LOCAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_SET() {
  return getToken(WatParser::LOCAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOCAL_TEE() {
  return getToken(WatParser::LOCAL_TEE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_GET() {
  return getToken(WatParser::GLOBAL_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::GLOBAL_SET() {
  return getToken(WatParser::GLOBAL_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GET() {
  return getToken(WatParser::TABLE_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SET() {
  return getToken(WatParser::TABLE_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_SIZE() {
  return getToken(WatParser::TABLE_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_GROW() {
  return getToken(WatParser::TABLE_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_FILL() {
  return getToken(WatParser::TABLE_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_COPY() {
  return getToken(WatParser::TABLE_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TABLE_INIT() {
  return getToken(WatParser::TABLE_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ELEM_DROP() {
  return getToken(WatParser::ELEM_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::LOAD() {
  return getToken(WatParser::LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::OFFSET_EQ_NAT() {
  return getToken(WatParser::OFFSET_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ALIGN_EQ_NAT() {
  return getToken(WatParser::ALIGN_EQ_NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STORE() {
  return getToken(WatParser::STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD() {
  return getToken(WatParser::VEC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE() {
  return getToken(WatParser::VEC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_LOAD_LANE() {
  return getToken(WatParser::VEC_LOAD_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_STORE_LANE() {
  return getToken(WatParser::VEC_STORE_LANE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_SIZE() {
  return getToken(WatParser::MEMORY_SIZE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_GROW() {
  return getToken(WatParser::MEMORY_GROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

std::vector<WatParser::NumContext *> WatParser::Plain_instrContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Plain_instrContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_FILL() {
  return getToken(WatParser::MEMORY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_COPY() {
  return getToken(WatParser::MEMORY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_INIT() {
  return getToken(WatParser::MEMORY_INIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::DATA_DROP() {
  return getToken(WatParser::DATA_DROP, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Plain_instrContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_IS_NULL() {
  return getToken(WatParser::REF_IS_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_AS_NON_NULL() {
  return getToken(WatParser::REF_AS_NON_NULL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_TEST() {
  return getToken(WatParser::REF_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_CAST() {
  return getToken(WatParser::REF_CAST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::I31_GET() {
  return getToken(WatParser::I31_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_NEW() {
  return getToken(WatParser::STRUCT_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_GET() {
  return getToken(WatParser::STRUCT_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::STRUCT_SET() {
  return getToken(WatParser::STRUCT_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW() {
  return getToken(WatParser::ARRAY_NEW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_FIXED() {
  return getToken(WatParser::ARRAY_NEW_FIXED, 0);
}

WatParser::Nat32Context* WatParser::Plain_instrContext::nat32() {
  return getRuleContext<WatParser::Nat32Context>(0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_ELEM() {
  return getToken(WatParser::ARRAY_NEW_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_NEW_DATA() {
  return getToken(WatParser::ARRAY_NEW_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_GET() {
  return getToken(WatParser::ARRAY_GET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_SET() {
  return getToken(WatParser::ARRAY_SET, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_LEN() {
  return getToken(WatParser::ARRAY_LEN, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_COPY() {
  return getToken(WatParser::ARRAY_COPY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_FILL() {
  return getToken(WatParser::ARRAY_FILL, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_DATA() {
  return getToken(WatParser::ARRAY_INIT_DATA, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ARRAY_INIT_ELEM() {
  return getToken(WatParser::ARRAY_INIT_ELEM, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::EXTERN_CONVERT() {
  return getToken(WatParser::EXTERN_CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::TEST() {
  return getToken(WatParser::TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::COMPARE() {
  return getToken(WatParser::COMPARE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::UNARY() {
  return getToken(WatParser::UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::BINARY() {
  return getToken(WatParser::BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::CONVERT() {
  return getToken(WatParser::CONVERT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_UNARY() {
  return getToken(WatParser::VEC_UNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BINARY() {
  return getToken(WatParser::VEC_BINARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TERNARY() {
  return getToken(WatParser::VEC_TERNARY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_TEST() {
  return getToken(WatParser::VEC_TEST, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHIFT() {
  return getToken(WatParser::VEC_SHIFT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_BITMASK() {
  return getToken(WatParser::VEC_BITMASK, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SHUFFLE() {
  return getToken(WatParser::VEC_SHUFFLE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_SPLAT() {
  return getToken(WatParser::VEC_SPLAT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_EXTRACT() {
  return getToken(WatParser::VEC_EXTRACT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::VEC_REPLACE() {
  return getToken(WatParser::VEC_REPLACE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_WAIT() {
  return getToken(WatParser::MEMORY_ATOMIC_WAIT, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::MEMORY_ATOMIC_NOTIFY() {
  return getToken(WatParser::MEMORY_ATOMIC_NOTIFY, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_FENCE() {
  return getToken(WatParser::ATOMIC_FENCE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_LOAD() {
  return getToken(WatParser::ATOMIC_LOAD, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_STORE() {
  return getToken(WatParser::ATOMIC_STORE, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW() {
  return getToken(WatParser::ATOMIC_RMW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::ATOMIC_RMW_CMPXCHG() {
  return getToken(WatParser::ATOMIC_RMW_CMPXCHG, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::THROW() {
  return getToken(WatParser::THROW, 0);
}

tree::TerminalNode* WatParser::Plain_instrContext::THROW_REF() {
  return getToken(WatParser::THROW_REF, 0);
}


size_t WatParser::Plain_instrContext::getRuleIndex() const {
  return WatParser::RulePlain_instr;
}

void WatParser::Plain_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterPlain_instr(this);
}

void WatParser::Plain_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitPlain_instr(this);
}


std::any WatParser::Plain_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitPlain_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Plain_instrContext* WatParser::plain_instr() {
  Plain_instrContext *_localctx = _tracker.createInstance<Plain_instrContext>(_ctx, getState());
  enterRule(_localctx, 46, WatParser::RulePlain_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(643);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::UNREACHABLE: {
        enterOuterAlt(_localctx, 1);
        setState(384);
        match(WatParser::UNREACHABLE);
        break;
      }

      case WatParser::NOP: {
        enterOuterAlt(_localctx, 2);
        setState(385);
        match(WatParser::NOP);
        break;
      }

      case WatParser::DROP: {
        enterOuterAlt(_localctx, 3);
        setState(386);
        match(WatParser::DROP);
        break;
      }

      case WatParser::SELECT: {
        enterOuterAlt(_localctx, 4);
        setState(387);
        match(WatParser::SELECT);
        break;
      }

      case WatParser::BR: {
        enterOuterAlt(_localctx, 5);
        setState(388);
        match(WatParser::BR);
        setState(389);
        var_();
        break;
      }

      case WatParser::BR_IF: {
        enterOuterAlt(_localctx, 6);
        setState(390);
        match(WatParser::BR_IF);
        setState(391);
        var_();
        break;
      }

      case WatParser::BR_TABLE: {
        enterOuterAlt(_localctx, 7);
        setState(392);
        match(WatParser::BR_TABLE);
        setState(394); 
        _errHandler->sync(this);
        _la = _input->LA(1);
        do {
          setState(393);
          var_();
          setState(396); 
          _errHandler->sync(this);
          _la = _input->LA(1);
        } while (_la == WatParser::NAT || _la == WatParser::VAR);
        break;
      }

      case WatParser::BR_ON_NULL: {
        enterOuterAlt(_localctx, 8);
        setState(398);
        match(WatParser::BR_ON_NULL);
        setState(399);
        var_();
        break;
      }

      case WatParser::BR_ON_CAST: {
        enterOuterAlt(_localctx, 9);
        setState(400);
        match(WatParser::BR_ON_CAST);
        setState(401);
        var_();
        setState(402);
        ref_type();
        setState(403);
        ref_type();
        break;
      }

      case WatParser::RETURN: {
        enterOuterAlt(_localctx, 10);
        setState(405);
        match(WatParser::RETURN);
        break;
      }

      case WatParser::CALL: {
        enterOuterAlt(_localctx, 11);
        setState(406);
        match(WatParser::CALL);
        setState(407);
        var_();
        break;
      }

      case WatParser::CALL_REF: {
        enterOuterAlt(_localctx, 12);
        setState(408);
        match(WatParser::CALL_REF);
        setState(409);
        var_();
        break;
      }

      case WatParser::RETURN_CALL: {
        enterOuterAlt(_localctx, 13);
        setState(410);
        match(WatParser::RETURN_CALL);
        setState(411);
        var_();
        break;
      }

      case WatParser::RETURN_CALL_REF: {
        enterOuterAlt(_localctx, 14);
        setState(412);
        match(WatParser::RETURN_CALL_REF);
        setState(413);
        var_();
        break;
      }

      case WatParser::LOCAL_GET: {
        enterOuterAlt(_localctx, 15);
        setState(414);
        match(WatParser::LOCAL_GET);
        setState(415);
        var_();
        break;
      }

      case WatParser::LOCAL_SET: {
        enterOuterAlt(_localctx, 16);
        setState(416);
        match(WatParser::LOCAL_SET);
        setState(417);
        var_();
        break;
      }

      case WatParser::LOCAL_TEE: {
        enterOuterAlt(_localctx, 17);
        setState(418);
        match(WatParser::LOCAL_TEE);
        setState(419);
        var_();
        break;
      }

      case WatParser::GLOBAL_GET: {
        enterOuterAlt(_localctx, 18);
        setState(420);
        match(WatParser::GLOBAL_GET);
        setState(421);
        var_();
        break;
      }

      case WatParser::GLOBAL_SET: {
        enterOuterAlt(_localctx, 19);
        setState(422);
        match(WatParser::GLOBAL_SET);
        setState(423);
        var_();
        break;
      }

      case WatParser::TABLE_GET: {
        enterOuterAlt(_localctx, 20);
        setState(424);
        match(WatParser::TABLE_GET);
        setState(426);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(425);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SET: {
        enterOuterAlt(_localctx, 21);
        setState(428);
        match(WatParser::TABLE_SET);
        setState(430);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(429);
          var_();
        }
        break;
      }

      case WatParser::TABLE_SIZE: {
        enterOuterAlt(_localctx, 22);
        setState(432);
        match(WatParser::TABLE_SIZE);
        setState(434);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(433);
          var_();
        }
        break;
      }

      case WatParser::TABLE_GROW: {
        enterOuterAlt(_localctx, 23);
        setState(436);
        match(WatParser::TABLE_GROW);
        setState(438);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(437);
          var_();
        }
        break;
      }

      case WatParser::TABLE_FILL: {
        enterOuterAlt(_localctx, 24);
        setState(440);
        match(WatParser::TABLE_FILL);
        setState(442);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(441);
          var_();
        }
        break;
      }

      case WatParser::TABLE_COPY: {
        enterOuterAlt(_localctx, 25);
        setState(444);
        match(WatParser::TABLE_COPY);
        setState(448);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(445);
          var_();
          setState(446);
          var_();
        }
        break;
      }

      case WatParser::TABLE_INIT: {
        enterOuterAlt(_localctx, 26);
        setState(450);
        match(WatParser::TABLE_INIT);
        setState(451);
        var_();
        setState(453);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(452);
          var_();
        }
        break;
      }

      case WatParser::ELEM_DROP: {
        enterOuterAlt(_localctx, 27);
        setState(455);
        match(WatParser::ELEM_DROP);
        setState(456);
        var_();
        break;
      }

      case WatParser::LOAD: {
        enterOuterAlt(_localctx, 28);
        setState(457);
        match(WatParser::LOAD);
        setState(459);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(458);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(462);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(461);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::STORE: {
        enterOuterAlt(_localctx, 29);
        setState(464);
        match(WatParser::STORE);
        setState(466);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(465);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(469);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(468);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD: {
        enterOuterAlt(_localctx, 30);
        setState(471);
        match(WatParser::VEC_LOAD);
        setState(473);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(472);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(476);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(475);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_STORE: {
        enterOuterAlt(_localctx, 31);
        setState(478);
        match(WatParser::VEC_STORE);
        setState(480);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(479);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(483);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(482);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::VEC_LOAD_LANE: {
        enterOuterAlt(_localctx, 32);
        setState(485);
        match(WatParser::VEC_LOAD_LANE);
        setState(487);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(486);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(490);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(489);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(492);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_STORE_LANE: {
        enterOuterAlt(_localctx, 33);
        setState(493);
        match(WatParser::VEC_STORE_LANE);
        setState(495);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(494);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(498);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(497);
          match(WatParser::ALIGN_EQ_NAT);
        }
        setState(500);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_SIZE: {
        enterOuterAlt(_localctx, 34);
        setState(501);
        match(WatParser::MEMORY_SIZE);
        break;
      }

      case WatParser::MEMORY_GROW: {
        enterOuterAlt(_localctx, 35);
        setState(502);
        match(WatParser::MEMORY_GROW);
        break;
      }

      case WatParser::CONST: {
        enterOuterAlt(_localctx, 36);
        setState(503);
        match(WatParser::CONST);
        setState(504);
        num();
        break;
      }

      case WatParser::MEMORY_FILL: {
        enterOuterAlt(_localctx, 37);
        setState(505);
        match(WatParser::MEMORY_FILL);
        break;
      }

      case WatParser::MEMORY_COPY: {
        enterOuterAlt(_localctx, 38);
        setState(506);
        match(WatParser::MEMORY_COPY);
        break;
      }

      case WatParser::MEMORY_INIT: {
        enterOuterAlt(_localctx, 39);
        setState(507);
        match(WatParser::MEMORY_INIT);
        setState(508);
        var_();
        break;
      }

      case WatParser::DATA_DROP: {
        enterOuterAlt(_localctx, 40);
        setState(509);
        match(WatParser::DATA_DROP);
        setState(510);
        var_();
        break;
      }

      case WatParser::REF_NULL: {
        enterOuterAlt(_localctx, 41);
        setState(511);
        match(WatParser::REF_NULL);
        setState(512);
        heap_type();
        break;
      }

      case WatParser::REF_IS_NULL: {
        enterOuterAlt(_localctx, 42);
        setState(513);
        match(WatParser::REF_IS_NULL);
        break;
      }

      case WatParser::REF_FUNC: {
        enterOuterAlt(_localctx, 43);
        setState(514);
        match(WatParser::REF_FUNC);
        setState(515);
        var_();
        break;
      }

      case WatParser::REF_AS_NON_NULL: {
        enterOuterAlt(_localctx, 44);
        setState(516);
        match(WatParser::REF_AS_NON_NULL);
        break;
      }

      case WatParser::REF_TEST: {
        enterOuterAlt(_localctx, 45);
        setState(517);
        match(WatParser::REF_TEST);
        break;
      }

      case WatParser::REF_CAST: {
        enterOuterAlt(_localctx, 46);
        setState(518);
        match(WatParser::REF_CAST);
        break;
      }

      case WatParser::REF_EQ: {
        enterOuterAlt(_localctx, 47);
        setState(519);
        match(WatParser::REF_EQ);
        break;
      }

      case WatParser::REF_I31: {
        enterOuterAlt(_localctx, 48);
        setState(520);
        match(WatParser::REF_I31);
        break;
      }

      case WatParser::I31_GET: {
        enterOuterAlt(_localctx, 49);
        setState(521);
        match(WatParser::I31_GET);
        break;
      }

      case WatParser::STRUCT_NEW: {
        enterOuterAlt(_localctx, 50);
        setState(522);
        match(WatParser::STRUCT_NEW);
        setState(523);
        var_();
        break;
      }

      case WatParser::STRUCT_GET: {
        enterOuterAlt(_localctx, 51);
        setState(524);
        match(WatParser::STRUCT_GET);
        setState(525);
        var_();
        setState(526);
        var_();
        break;
      }

      case WatParser::STRUCT_SET: {
        enterOuterAlt(_localctx, 52);
        setState(528);
        match(WatParser::STRUCT_SET);
        setState(529);
        var_();
        setState(530);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW: {
        enterOuterAlt(_localctx, 53);
        setState(532);
        match(WatParser::ARRAY_NEW);
        setState(533);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_FIXED: {
        enterOuterAlt(_localctx, 54);
        setState(534);
        match(WatParser::ARRAY_NEW_FIXED);
        setState(535);
        var_();
        setState(536);
        nat32();
        break;
      }

      case WatParser::ARRAY_NEW_ELEM: {
        enterOuterAlt(_localctx, 55);
        setState(538);
        match(WatParser::ARRAY_NEW_ELEM);
        setState(539);
        var_();
        setState(540);
        var_();
        break;
      }

      case WatParser::ARRAY_NEW_DATA: {
        enterOuterAlt(_localctx, 56);
        setState(542);
        match(WatParser::ARRAY_NEW_DATA);
        setState(543);
        var_();
        setState(544);
        var_();
        break;
      }

      case WatParser::ARRAY_GET: {
        enterOuterAlt(_localctx, 57);
        setState(546);
        match(WatParser::ARRAY_GET);
        setState(547);
        var_();
        break;
      }

      case WatParser::ARRAY_SET: {
        enterOuterAlt(_localctx, 58);
        setState(548);
        match(WatParser::ARRAY_SET);
        setState(549);
        var_();
        break;
      }

      case WatParser::ARRAY_LEN: {
        enterOuterAlt(_localctx, 59);
        setState(550);
        match(WatParser::ARRAY_LEN);
        break;
      }

      case WatParser::ARRAY_COPY: {
        enterOuterAlt(_localctx, 60);
        setState(551);
        match(WatParser::ARRAY_COPY);
        setState(552);
        var_();
        setState(553);
        var_();
        break;
      }

      case WatParser::ARRAY_FILL: {
        enterOuterAlt(_localctx, 61);
        setState(555);
        match(WatParser::ARRAY_FILL);
        setState(556);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_DATA: {
        enterOuterAlt(_localctx, 62);
        setState(557);
        match(WatParser::ARRAY_INIT_DATA);
        setState(558);
        var_();
        setState(559);
        var_();
        break;
      }

      case WatParser::ARRAY_INIT_ELEM: {
        enterOuterAlt(_localctx, 63);
        setState(561);
        match(WatParser::ARRAY_INIT_ELEM);
        setState(562);
        var_();
        setState(563);
        var_();
        break;
      }

      case WatParser::EXTERN_CONVERT: {
        enterOuterAlt(_localctx, 64);
        setState(565);
        match(WatParser::EXTERN_CONVERT);
        break;
      }

      case WatParser::TEST: {
        enterOuterAlt(_localctx, 65);
        setState(566);
        match(WatParser::TEST);
        break;
      }

      case WatParser::COMPARE: {
        enterOuterAlt(_localctx, 66);
        setState(567);
        match(WatParser::COMPARE);
        break;
      }

      case WatParser::UNARY: {
        enterOuterAlt(_localctx, 67);
        setState(568);
        match(WatParser::UNARY);
        break;
      }

      case WatParser::BINARY: {
        enterOuterAlt(_localctx, 68);
        setState(569);
        match(WatParser::BINARY);
        break;
      }

      case WatParser::CONVERT: {
        enterOuterAlt(_localctx, 69);
        setState(570);
        match(WatParser::CONVERT);
        break;
      }

      case WatParser::VEC_CONST: {
        enterOuterAlt(_localctx, 70);
        setState(571);
        match(WatParser::VEC_CONST);
        setState(572);
        match(WatParser::VEC_SHAPE);
        setState(576);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(573);
          num();
          setState(578);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_UNARY: {
        enterOuterAlt(_localctx, 71);
        setState(579);
        match(WatParser::VEC_UNARY);
        break;
      }

      case WatParser::VEC_BINARY: {
        enterOuterAlt(_localctx, 72);
        setState(580);
        match(WatParser::VEC_BINARY);
        break;
      }

      case WatParser::VEC_TERNARY: {
        enterOuterAlt(_localctx, 73);
        setState(581);
        match(WatParser::VEC_TERNARY);
        break;
      }

      case WatParser::VEC_TEST: {
        enterOuterAlt(_localctx, 74);
        setState(582);
        match(WatParser::VEC_TEST);
        break;
      }

      case WatParser::VEC_SHIFT: {
        enterOuterAlt(_localctx, 75);
        setState(583);
        match(WatParser::VEC_SHIFT);
        break;
      }

      case WatParser::VEC_BITMASK: {
        enterOuterAlt(_localctx, 76);
        setState(584);
        match(WatParser::VEC_BITMASK);
        break;
      }

      case WatParser::VEC_SHUFFLE: {
        enterOuterAlt(_localctx, 77);
        setState(585);
        match(WatParser::VEC_SHUFFLE);
        setState(589);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 56) != 0)) {
          setState(586);
          num();
          setState(591);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::VEC_SPLAT: {
        enterOuterAlt(_localctx, 78);
        setState(592);
        match(WatParser::VEC_SPLAT);
        break;
      }

      case WatParser::VEC_EXTRACT: {
        enterOuterAlt(_localctx, 79);
        setState(593);
        match(WatParser::VEC_EXTRACT);
        setState(594);
        match(WatParser::NAT);
        break;
      }

      case WatParser::VEC_REPLACE: {
        enterOuterAlt(_localctx, 80);
        setState(595);
        match(WatParser::VEC_REPLACE);
        setState(596);
        match(WatParser::NAT);
        break;
      }

      case WatParser::MEMORY_ATOMIC_WAIT: {
        enterOuterAlt(_localctx, 81);
        setState(597);
        match(WatParser::MEMORY_ATOMIC_WAIT);
        setState(599);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(598);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(602);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(601);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::MEMORY_ATOMIC_NOTIFY: {
        enterOuterAlt(_localctx, 82);
        setState(604);
        match(WatParser::MEMORY_ATOMIC_NOTIFY);
        setState(606);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(605);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(609);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(608);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_FENCE: {
        enterOuterAlt(_localctx, 83);
        setState(611);
        match(WatParser::ATOMIC_FENCE);
        break;
      }

      case WatParser::ATOMIC_LOAD: {
        enterOuterAlt(_localctx, 84);
        setState(612);
        match(WatParser::ATOMIC_LOAD);
        setState(614);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(613);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(617);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(616);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_STORE: {
        enterOuterAlt(_localctx, 85);
        setState(619);
        match(WatParser::ATOMIC_STORE);
        setState(621);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(620);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(624);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(623);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW: {
        enterOuterAlt(_localctx, 86);
        setState(626);
        match(WatParser::ATOMIC_RMW);
        setState(628);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(627);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(631);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(630);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::ATOMIC_RMW_CMPXCHG: {
        enterOuterAlt(_localctx, 87);
        setState(633);
        match(WatParser::ATOMIC_RMW_CMPXCHG);
        setState(635);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::OFFSET_EQ_NAT) {
          setState(634);
          match(WatParser::OFFSET_EQ_NAT);
        }
        setState(638);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ALIGN_EQ_NAT) {
          setState(637);
          match(WatParser::ALIGN_EQ_NAT);
        }
        break;
      }

      case WatParser::THROW: {
        enterOuterAlt(_localctx, 88);
        setState(640);
        match(WatParser::THROW);
        setState(641);
        var_();
        break;
      }

      case WatParser::THROW_REF: {
        enterOuterAlt(_localctx, 89);
        setState(642);
        match(WatParser::THROW_REF);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_instr_instr_listContext ------------------------------------------------------------------

WatParser::Select_instr_instr_listContext::Select_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Instr_listContext* WatParser::Select_instr_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_instr_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_instr_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_instr_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_instr_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleSelect_instr_instr_list;
}

void WatParser::Select_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_instr_instr_list(this);
}

void WatParser::Select_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_instr_instr_list(this);
}


std::any WatParser::Select_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_instr_instr_listContext* WatParser::select_instr_instr_list() {
  Select_instr_instr_listContext *_localctx = _tracker.createInstance<Select_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 48, WatParser::RuleSelect_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(645);
    match(WatParser::SELECT);
    setState(657);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(646);
        match(WatParser::LPAR);
        setState(647);
        match(WatParser::RESULT);
        setState(651);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(648);
          val_type();
          setState(653);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(654);
        match(WatParser::RPAR); 
      }
      setState(659);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 62, _ctx);
    }
    setState(660);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_instr_listContext::Call_instr_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_instr_type_instr_listContext* WatParser::Call_instr_instr_listContext::call_instr_type_instr_list() {
  return getRuleContext<WatParser::Call_instr_type_instr_listContext>(0);
}

WatParser::Var_Context* WatParser::Call_instr_instr_listContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Call_instr_instr_listContext::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}


size_t WatParser::Call_instr_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_instr_list;
}

void WatParser::Call_instr_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_instr_list(this);
}

void WatParser::Call_instr_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_instr_list(this);
}


std::any WatParser::Call_instr_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_instr_listContext* WatParser::call_instr_instr_list() {
  Call_instr_instr_listContext *_localctx = _tracker.createInstance<Call_instr_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 50, WatParser::RuleCall_instr_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(672);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::CALL_INDIRECT: {
        enterOuterAlt(_localctx, 1);
        setState(662);
        match(WatParser::CALL_INDIRECT);
        setState(664);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(663);
          var_();
        }
        setState(666);
        call_instr_type_instr_list();
        break;
      }

      case WatParser::RETURN_CALL_INDIRECT: {
        enterOuterAlt(_localctx, 2);
        setState(667);
        match(WatParser::RETURN_CALL_INDIRECT);
        setState(669);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(668);
          var_();
        }
        setState(671);
        call_instr_type_instr_list();
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_instr_type_instr_listContext ------------------------------------------------------------------

WatParser::Call_instr_type_instr_listContext::Call_instr_type_instr_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Call_instr_type_instr_listContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Type_useContext* WatParser::Call_instr_type_instr_listContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_instr_type_instr_listContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_instr_type_instr_listContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_instr_type_instr_listContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_instr_type_instr_listContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_instr_type_instr_listContext::getRuleIndex() const {
  return WatParser::RuleCall_instr_type_instr_list;
}

void WatParser::Call_instr_type_instr_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_instr_type_instr_list(this);
}

void WatParser::Call_instr_type_instr_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_instr_type_instr_list(this);
}


std::any WatParser::Call_instr_type_instr_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_instr_type_instr_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_instr_type_instr_listContext* WatParser::call_instr_type_instr_list() {
  Call_instr_type_instr_listContext *_localctx = _tracker.createInstance<Call_instr_type_instr_listContext>(_ctx, getState());
  enterRule(_localctx, 52, WatParser::RuleCall_instr_type_instr_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(675);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 66, _ctx)) {
    case 1: {
      setState(674);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(688);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(677);
        match(WatParser::LPAR);
        setState(678);
        match(WatParser::PARAM);
        setState(682);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(679);
          val_type();
          setState(684);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(685);
        match(WatParser::RPAR); 
      }
      setState(690);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 68, _ctx);
    }
    setState(702);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(691);
        match(WatParser::LPAR);
        setState(692);
        match(WatParser::RESULT);
        setState(696);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(693);
          val_type();
          setState(698);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(699);
        match(WatParser::RPAR); 
      }
      setState(704);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 70, _ctx);
    }
    setState(705);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_instrContext ------------------------------------------------------------------

WatParser::Block_instrContext::Block_instrContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::BlockContext* WatParser::Block_instrContext::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

tree::TerminalNode* WatParser::Block_instrContext::END() {
  return getToken(WatParser::END, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

std::vector<WatParser::Bind_varContext *> WatParser::Block_instrContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Block_instrContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

tree::TerminalNode* WatParser::Block_instrContext::IF() {
  return getToken(WatParser::IF, 0);
}

tree::TerminalNode* WatParser::Block_instrContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

WatParser::Instr_listContext* WatParser::Block_instrContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

tree::TerminalNode* WatParser::Block_instrContext::TRY_TABLE() {
  return getToken(WatParser::TRY_TABLE, 0);
}

WatParser::Handler_blockContext* WatParser::Block_instrContext::handler_block() {
  return getRuleContext<WatParser::Handler_blockContext>(0);
}


size_t WatParser::Block_instrContext::getRuleIndex() const {
  return WatParser::RuleBlock_instr;
}

void WatParser::Block_instrContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_instr(this);
}

void WatParser::Block_instrContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_instr(this);
}


std::any WatParser::Block_instrContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_instr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_instrContext* WatParser::block_instr() {
  Block_instrContext *_localctx = _tracker.createInstance<Block_instrContext>(_ctx, getState());
  enterRule(_localctx, 54, WatParser::RuleBlock_instr);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(741);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::BLOCK:
      case WatParser::LOOP: {
        enterOuterAlt(_localctx, 1);
        setState(707);
        _la = _input->LA(1);
        if (!(_la == WatParser::BLOCK

        || _la == WatParser::LOOP)) {
        _errHandler->recoverInline(this);
        }
        else {
          _errHandler->reportMatch(this);
          consume();
        }
        setState(709);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(708);
          bind_var();
        }
        setState(711);
        block();
        setState(712);
        match(WatParser::END);
        setState(714);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(713);
          bind_var();
        }
        break;
      }

      case WatParser::IF: {
        enterOuterAlt(_localctx, 2);
        setState(716);
        match(WatParser::IF);
        setState(718);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(717);
          bind_var();
        }
        setState(720);
        block();
        setState(726);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::ELSE) {
          setState(721);
          match(WatParser::ELSE);
          setState(723);
          _errHandler->sync(this);

          _la = _input->LA(1);
          if (_la == WatParser::VAR) {
            setState(722);
            bind_var();
          }
          setState(725);
          instr_list();
        }
        setState(728);
        match(WatParser::END);
        setState(730);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(729);
          bind_var();
        }
        break;
      }

      case WatParser::TRY_TABLE: {
        enterOuterAlt(_localctx, 3);
        setState(732);
        match(WatParser::TRY_TABLE);
        setState(734);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(733);
          bind_var();
        }
        setState(736);
        handler_block();
        setState(737);
        match(WatParser::END);
        setState(739);
        _errHandler->sync(this);

        _la = _input->LA(1);
        if (_la == WatParser::VAR) {
          setState(738);
          bind_var();
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- BlockContext ------------------------------------------------------------------

WatParser::BlockContext::BlockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Block_param_bodyContext* WatParser::BlockContext::block_param_body() {
  return getRuleContext<WatParser::Block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::BlockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::BlockContext::getRuleIndex() const {
  return WatParser::RuleBlock;
}

void WatParser::BlockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock(this);
}

void WatParser::BlockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock(this);
}


std::any WatParser::BlockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock(this);
  else
    return visitor->visitChildren(this);
}

WatParser::BlockContext* WatParser::block() {
  BlockContext *_localctx = _tracker.createInstance<BlockContext>(_ctx, getState());
  enterRule(_localctx, 56, WatParser::RuleBlock);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(744);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 80, _ctx)) {
    case 1: {
      setState(743);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(746);
    block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Block_param_bodyContext ------------------------------------------------------------------

WatParser::Block_param_bodyContext::Block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Block_param_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleBlock_param_body;
}

void WatParser::Block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterBlock_param_body(this);
}

void WatParser::Block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitBlock_param_body(this);
}


std::any WatParser::Block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitBlock_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Block_param_bodyContext* WatParser::block_param_body() {
  Block_param_bodyContext *_localctx = _tracker.createInstance<Block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 58, WatParser::RuleBlock_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(759);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(748);
        match(WatParser::LPAR);
        setState(749);
        match(WatParser::PARAM);
        setState(753);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(750);
          val_type();
          setState(755);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(756);
        match(WatParser::RPAR); 
      }
      setState(761);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 82, _ctx);
    }
    setState(773);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(762);
        match(WatParser::LPAR);
        setState(763);
        match(WatParser::RESULT);
        setState(767);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(764);
          val_type();
          setState(769);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(770);
        match(WatParser::RPAR); 
      }
      setState(775);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 84, _ctx);
    }
    setState(776);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_blockContext ------------------------------------------------------------------

WatParser::Handler_blockContext::Handler_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Handler_block_param_bodyContext* WatParser::Handler_blockContext::handler_block_param_body() {
  return getRuleContext<WatParser::Handler_block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Handler_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Handler_blockContext::getRuleIndex() const {
  return WatParser::RuleHandler_block;
}

void WatParser::Handler_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block(this);
}

void WatParser::Handler_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block(this);
}


std::any WatParser::Handler_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_blockContext* WatParser::handler_block() {
  Handler_blockContext *_localctx = _tracker.createInstance<Handler_blockContext>(_ctx, getState());
  enterRule(_localctx, 60, WatParser::RuleHandler_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(779);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 85, _ctx)) {
    case 1: {
      setState(778);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(781);
    handler_block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_block_param_bodyContext ------------------------------------------------------------------

WatParser::Handler_block_param_bodyContext::Handler_block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Handler_block_bodyContext* WatParser::Handler_block_param_bodyContext::handler_block_body() {
  return getRuleContext<WatParser::Handler_block_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Handler_block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Handler_block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Handler_block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Handler_block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleHandler_block_param_body;
}

void WatParser::Handler_block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block_param_body(this);
}

void WatParser::Handler_block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block_param_body(this);
}


std::any WatParser::Handler_block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_block_param_bodyContext* WatParser::handler_block_param_body() {
  Handler_block_param_bodyContext *_localctx = _tracker.createInstance<Handler_block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 62, WatParser::RuleHandler_block_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(794);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(783);
        match(WatParser::LPAR);
        setState(784);
        match(WatParser::PARAM);
        setState(788);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(785);
          val_type();
          setState(790);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(791);
        match(WatParser::RPAR); 
      }
      setState(796);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 87, _ctx);
    }
    setState(808);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(797);
        match(WatParser::LPAR);
        setState(798);
        match(WatParser::RESULT);
        setState(802);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(799);
          val_type();
          setState(804);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(805);
        match(WatParser::RPAR); 
      }
      setState(810);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 89, _ctx);
    }
    setState(811);
    handler_block_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Handler_block_bodyContext ------------------------------------------------------------------

WatParser::Handler_block_bodyContext::Handler_block_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Handler_block_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<WatParser::Var_Context *> WatParser::Handler_block_bodyContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Handler_block_bodyContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH() {
  return getTokens(WatParser::CATCH);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH(size_t i) {
  return getToken(WatParser::CATCH, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_REF() {
  return getTokens(WatParser::CATCH_REF);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_REF(size_t i) {
  return getToken(WatParser::CATCH_REF, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_ALL() {
  return getTokens(WatParser::CATCH_ALL);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_ALL(size_t i) {
  return getToken(WatParser::CATCH_ALL, i);
}

std::vector<tree::TerminalNode *> WatParser::Handler_block_bodyContext::CATCH_ALL_REF() {
  return getTokens(WatParser::CATCH_ALL_REF);
}

tree::TerminalNode* WatParser::Handler_block_bodyContext::CATCH_ALL_REF(size_t i) {
  return getToken(WatParser::CATCH_ALL_REF, i);
}


size_t WatParser::Handler_block_bodyContext::getRuleIndex() const {
  return WatParser::RuleHandler_block_body;
}

void WatParser::Handler_block_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterHandler_block_body(this);
}

void WatParser::Handler_block_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitHandler_block_body(this);
}


std::any WatParser::Handler_block_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitHandler_block_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Handler_block_bodyContext* WatParser::handler_block_body() {
  Handler_block_bodyContext *_localctx = _tracker.createInstance<Handler_block_bodyContext>(_ctx, getState());
  enterRule(_localctx, 64, WatParser::RuleHandler_block_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(827);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(813);
        match(WatParser::LPAR);
        setState(820);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::CATCH: {
            setState(814);
            match(WatParser::CATCH);
            setState(815);
            var_();
            break;
          }

          case WatParser::CATCH_REF: {
            setState(816);
            match(WatParser::CATCH_REF);
            setState(817);
            var_();
            break;
          }

          case WatParser::CATCH_ALL: {
            setState(818);
            match(WatParser::CATCH_ALL);
            break;
          }

          case WatParser::CATCH_ALL_REF: {
            setState(819);
            match(WatParser::CATCH_ALL_REF);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(822);
        var_();
        setState(823);
        match(WatParser::RPAR); 
      }
      setState(829);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 91, _ctx);
    }
    setState(830);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ExprContext ------------------------------------------------------------------

WatParser::ExprContext::ExprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ExprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

WatParser::Expr1Context* WatParser::ExprContext::expr1() {
  return getRuleContext<WatParser::Expr1Context>(0);
}

tree::TerminalNode* WatParser::ExprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::ExprContext::getRuleIndex() const {
  return WatParser::RuleExpr;
}

void WatParser::ExprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr(this);
}

void WatParser::ExprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr(this);
}


std::any WatParser::ExprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExpr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ExprContext* WatParser::expr() {
  ExprContext *_localctx = _tracker.createInstance<ExprContext>(_ctx, getState());
  enterRule(_localctx, 66, WatParser::RuleExpr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(832);
    match(WatParser::LPAR);
    setState(833);
    expr1();
    setState(834);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Expr1Context ------------------------------------------------------------------

WatParser::Expr1Context::Expr1Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Plain_instrContext* WatParser::Expr1Context::plain_instr() {
  return getRuleContext<WatParser::Plain_instrContext>(0);
}

std::vector<WatParser::ExprContext *> WatParser::Expr1Context::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Expr1Context::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

tree::TerminalNode* WatParser::Expr1Context::SELECT() {
  return getToken(WatParser::SELECT, 0);
}

WatParser::Select_expr_resultsContext* WatParser::Expr1Context::select_expr_results() {
  return getRuleContext<WatParser::Select_expr_resultsContext>(0);
}

tree::TerminalNode* WatParser::Expr1Context::CALL_INDIRECT() {
  return getToken(WatParser::CALL_INDIRECT, 0);
}

WatParser::Call_expr_typeContext* WatParser::Expr1Context::call_expr_type() {
  return getRuleContext<WatParser::Call_expr_typeContext>(0);
}

WatParser::Var_Context* WatParser::Expr1Context::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Expr1Context::RETURN_CALL_INDIRECT() {
  return getToken(WatParser::RETURN_CALL_INDIRECT, 0);
}

tree::TerminalNode* WatParser::Expr1Context::BLOCK() {
  return getToken(WatParser::BLOCK, 0);
}

WatParser::BlockContext* WatParser::Expr1Context::block() {
  return getRuleContext<WatParser::BlockContext>(0);
}

WatParser::Bind_varContext* WatParser::Expr1Context::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

tree::TerminalNode* WatParser::Expr1Context::LOOP() {
  return getToken(WatParser::LOOP, 0);
}

tree::TerminalNode* WatParser::Expr1Context::IF() {
  return getToken(WatParser::IF, 0);
}

WatParser::If_blockContext* WatParser::Expr1Context::if_block() {
  return getRuleContext<WatParser::If_blockContext>(0);
}

tree::TerminalNode* WatParser::Expr1Context::TRY_TABLE() {
  return getToken(WatParser::TRY_TABLE, 0);
}

WatParser::Try_blockContext* WatParser::Expr1Context::try_block() {
  return getRuleContext<WatParser::Try_blockContext>(0);
}


size_t WatParser::Expr1Context::getRuleIndex() const {
  return WatParser::RuleExpr1;
}

void WatParser::Expr1Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExpr1(this);
}

void WatParser::Expr1Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExpr1(this);
}


std::any WatParser::Expr1Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExpr1(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Expr1Context* WatParser::expr1() {
  Expr1Context *_localctx = _tracker.createInstance<Expr1Context>(_ctx, getState());
  enterRule(_localctx, 68, WatParser::RuleExpr1);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(875);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 99, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(836);
      plain_instr();
      setState(840);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(837);
        expr();
        setState(842);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(843);
      match(WatParser::SELECT);
      setState(844);
      select_expr_results();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(845);
      match(WatParser::CALL_INDIRECT);
      setState(847);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(846);
        var_();
      }
      setState(849);
      call_expr_type();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(850);
      match(WatParser::RETURN_CALL_INDIRECT);
      setState(852);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(851);
        var_();
      }
      setState(854);
      call_expr_type();
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(855);
      match(WatParser::BLOCK);
      setState(857);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(856);
        bind_var();
      }
      setState(859);
      block();
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(860);
      match(WatParser::LOOP);
      setState(862);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(861);
        bind_var();
      }
      setState(864);
      block();
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(865);
      match(WatParser::IF);
      setState(867);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(866);
        bind_var();
      }
      setState(869);
      if_block();
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(870);
      match(WatParser::TRY_TABLE);
      setState(872);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(871);
        bind_var();
      }
      setState(874);
      try_block();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Select_expr_resultsContext ------------------------------------------------------------------

WatParser::Select_expr_resultsContext::Select_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Select_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Select_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Select_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Select_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Select_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Select_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Select_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleSelect_expr_results;
}

void WatParser::Select_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSelect_expr_results(this);
}

void WatParser::Select_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSelect_expr_results(this);
}


std::any WatParser::Select_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSelect_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Select_expr_resultsContext* WatParser::select_expr_results() {
  Select_expr_resultsContext *_localctx = _tracker.createInstance<Select_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 70, WatParser::RuleSelect_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(888);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(877);
        match(WatParser::LPAR);
        setState(878);
        match(WatParser::RESULT);
        setState(882);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(879);
          val_type();
          setState(884);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(885);
        match(WatParser::RPAR); 
      }
      setState(890);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 101, _ctx);
    }
    setState(894);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(891);
      expr();
      setState(896);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_typeContext ------------------------------------------------------------------

WatParser::Call_expr_typeContext::Call_expr_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_paramsContext* WatParser::Call_expr_typeContext::call_expr_params() {
  return getRuleContext<WatParser::Call_expr_paramsContext>(0);
}

WatParser::Type_useContext* WatParser::Call_expr_typeContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Call_expr_typeContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_type;
}

void WatParser::Call_expr_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_type(this);
}

void WatParser::Call_expr_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_type(this);
}


std::any WatParser::Call_expr_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_typeContext* WatParser::call_expr_type() {
  Call_expr_typeContext *_localctx = _tracker.createInstance<Call_expr_typeContext>(_ctx, getState());
  enterRule(_localctx, 72, WatParser::RuleCall_expr_type);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(898);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 103, _ctx)) {
    case 1: {
      setState(897);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(900);
    call_expr_params();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_paramsContext ------------------------------------------------------------------

WatParser::Call_expr_paramsContext::Call_expr_paramsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Call_expr_resultsContext* WatParser::Call_expr_paramsContext::call_expr_results() {
  return getRuleContext<WatParser::Call_expr_resultsContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_paramsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_paramsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_paramsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_paramsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_paramsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_params;
}

void WatParser::Call_expr_paramsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_params(this);
}

void WatParser::Call_expr_paramsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_params(this);
}


std::any WatParser::Call_expr_paramsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_params(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_paramsContext* WatParser::call_expr_params() {
  Call_expr_paramsContext *_localctx = _tracker.createInstance<Call_expr_paramsContext>(_ctx, getState());
  enterRule(_localctx, 74, WatParser::RuleCall_expr_params);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(913);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(902);
        match(WatParser::LPAR);
        setState(903);
        match(WatParser::PARAM);
        setState(907);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(904);
          val_type();
          setState(909);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(910);
        match(WatParser::RPAR); 
      }
      setState(915);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 105, _ctx);
    }
    setState(916);
    call_expr_results();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Call_expr_resultsContext ------------------------------------------------------------------

WatParser::Call_expr_resultsContext::Call_expr_resultsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Call_expr_resultsContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Call_expr_resultsContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::ExprContext *> WatParser::Call_expr_resultsContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::Call_expr_resultsContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Call_expr_resultsContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Call_expr_resultsContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Call_expr_resultsContext::getRuleIndex() const {
  return WatParser::RuleCall_expr_results;
}

void WatParser::Call_expr_resultsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCall_expr_results(this);
}

void WatParser::Call_expr_resultsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCall_expr_results(this);
}


std::any WatParser::Call_expr_resultsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCall_expr_results(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Call_expr_resultsContext* WatParser::call_expr_results() {
  Call_expr_resultsContext *_localctx = _tracker.createInstance<Call_expr_resultsContext>(_ctx, getState());
  enterRule(_localctx, 76, WatParser::RuleCall_expr_results);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(929);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(918);
        match(WatParser::LPAR);
        setState(919);
        match(WatParser::RESULT);
        setState(923);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(920);
          val_type();
          setState(925);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(926);
        match(WatParser::RPAR); 
      }
      setState(931);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 107, _ctx);
    }
    setState(935);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(932);
      expr();
      setState(937);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_blockContext ------------------------------------------------------------------

WatParser::If_blockContext::If_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::If_block_result_bodyContext* WatParser::If_blockContext::if_block_result_body() {
  return getRuleContext<WatParser::If_block_result_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::If_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_blockContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::If_blockContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::If_blockContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_blockContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_blockContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_blockContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_blockContext::getRuleIndex() const {
  return WatParser::RuleIf_block;
}

void WatParser::If_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block(this);
}

void WatParser::If_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block(this);
}


std::any WatParser::If_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_blockContext* WatParser::if_block() {
  If_blockContext *_localctx = _tracker.createInstance<If_blockContext>(_ctx, getState());
  enterRule(_localctx, 78, WatParser::RuleIf_block);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(939);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 109, _ctx)) {
    case 1: {
      setState(938);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(952);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(941);
        match(WatParser::LPAR);
        setState(942);
        match(WatParser::PARAM);
        setState(946);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(943);
          val_type();
          setState(948);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(949);
        match(WatParser::RPAR); 
      }
      setState(954);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 111, _ctx);
    }
    setState(955);
    if_block_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- If_block_result_bodyContext ------------------------------------------------------------------

WatParser::If_block_result_bodyContext::If_block_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::THEN() {
  return getToken(WatParser::THEN, 0);
}

std::vector<WatParser::Instr_listContext *> WatParser::If_block_result_bodyContext::instr_list() {
  return getRuleContexts<WatParser::Instr_listContext>();
}

WatParser::Instr_listContext* WatParser::If_block_result_bodyContext::instr_list(size_t i) {
  return getRuleContext<WatParser::Instr_listContext>(i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::If_block_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::ExprContext *> WatParser::If_block_result_bodyContext::expr() {
  return getRuleContexts<WatParser::ExprContext>();
}

WatParser::ExprContext* WatParser::If_block_result_bodyContext::expr(size_t i) {
  return getRuleContext<WatParser::ExprContext>(i);
}

tree::TerminalNode* WatParser::If_block_result_bodyContext::ELSE() {
  return getToken(WatParser::ELSE, 0);
}

std::vector<WatParser::Val_typeContext *> WatParser::If_block_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::If_block_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::If_block_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleIf_block_result_body;
}

void WatParser::If_block_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterIf_block_result_body(this);
}

void WatParser::If_block_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitIf_block_result_body(this);
}


std::any WatParser::If_block_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitIf_block_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::If_block_result_bodyContext* WatParser::if_block_result_body() {
  If_block_result_bodyContext *_localctx = _tracker.createInstance<If_block_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 80, WatParser::RuleIf_block_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(968);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(957);
        match(WatParser::LPAR);
        setState(958);
        match(WatParser::RESULT);
        setState(962);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(959);
          val_type();
          setState(964);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(965);
        match(WatParser::RPAR); 
      }
      setState(970);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 113, _ctx);
    }
    setState(974);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(971);
        expr(); 
      }
      setState(976);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 114, _ctx);
    }
    setState(977);
    match(WatParser::LPAR);
    setState(978);
    match(WatParser::THEN);
    setState(979);
    instr_list();
    setState(980);
    match(WatParser::RPAR);
    setState(986);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(981);
      match(WatParser::LPAR);
      setState(982);
      match(WatParser::ELSE);
      setState(983);
      instr_list();
      setState(984);
      match(WatParser::RPAR);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_blockContext ------------------------------------------------------------------

WatParser::Try_blockContext::Try_blockContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Try_block_param_bodyContext* WatParser::Try_blockContext::try_block_param_body() {
  return getRuleContext<WatParser::Try_block_param_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Try_blockContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}


size_t WatParser::Try_blockContext::getRuleIndex() const {
  return WatParser::RuleTry_block;
}

void WatParser::Try_blockContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block(this);
}

void WatParser::Try_blockContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block(this);
}


std::any WatParser::Try_blockContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_blockContext* WatParser::try_block() {
  Try_blockContext *_localctx = _tracker.createInstance<Try_blockContext>(_ctx, getState());
  enterRule(_localctx, 82, WatParser::RuleTry_block);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(989);
    _errHandler->sync(this);

    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 116, _ctx)) {
    case 1: {
      setState(988);
      type_use();
      break;
    }

    default:
      break;
    }
    setState(991);
    try_block_param_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_block_param_bodyContext ------------------------------------------------------------------

WatParser::Try_block_param_bodyContext::Try_block_param_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Try_block_handler_bodyContext* WatParser::Try_block_param_bodyContext::try_block_handler_body() {
  return getRuleContext<WatParser::Try_block_handler_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_param_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Try_block_param_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Try_block_param_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Try_block_param_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Try_block_param_bodyContext::getRuleIndex() const {
  return WatParser::RuleTry_block_param_body;
}

void WatParser::Try_block_param_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block_param_body(this);
}

void WatParser::Try_block_param_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block_param_body(this);
}


std::any WatParser::Try_block_param_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block_param_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_block_param_bodyContext* WatParser::try_block_param_body() {
  Try_block_param_bodyContext *_localctx = _tracker.createInstance<Try_block_param_bodyContext>(_ctx, getState());
  enterRule(_localctx, 84, WatParser::RuleTry_block_param_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1004);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(993);
        match(WatParser::LPAR);
        setState(994);
        match(WatParser::PARAM);
        setState(998);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(995);
          val_type();
          setState(1000);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1001);
        match(WatParser::RPAR); 
      }
      setState(1006);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 118, _ctx);
    }
    setState(1018);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1007);
        match(WatParser::LPAR);
        setState(1008);
        match(WatParser::RESULT);
        setState(1012);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(1009);
          val_type();
          setState(1014);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1015);
        match(WatParser::RPAR); 
      }
      setState(1020);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 120, _ctx);
    }
    setState(1021);
    try_block_handler_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Try_block_handler_bodyContext ------------------------------------------------------------------

WatParser::Try_block_handler_bodyContext::Try_block_handler_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Try_block_handler_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<WatParser::Var_Context *> WatParser::Try_block_handler_bodyContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Try_block_handler_bodyContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH() {
  return getTokens(WatParser::CATCH);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH(size_t i) {
  return getToken(WatParser::CATCH, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_REF() {
  return getTokens(WatParser::CATCH_REF);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_REF(size_t i) {
  return getToken(WatParser::CATCH_REF, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_ALL() {
  return getTokens(WatParser::CATCH_ALL);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_ALL(size_t i) {
  return getToken(WatParser::CATCH_ALL, i);
}

std::vector<tree::TerminalNode *> WatParser::Try_block_handler_bodyContext::CATCH_ALL_REF() {
  return getTokens(WatParser::CATCH_ALL_REF);
}

tree::TerminalNode* WatParser::Try_block_handler_bodyContext::CATCH_ALL_REF(size_t i) {
  return getToken(WatParser::CATCH_ALL_REF, i);
}


size_t WatParser::Try_block_handler_bodyContext::getRuleIndex() const {
  return WatParser::RuleTry_block_handler_body;
}

void WatParser::Try_block_handler_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTry_block_handler_body(this);
}

void WatParser::Try_block_handler_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTry_block_handler_body(this);
}


std::any WatParser::Try_block_handler_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTry_block_handler_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Try_block_handler_bodyContext* WatParser::try_block_handler_body() {
  Try_block_handler_bodyContext *_localctx = _tracker.createInstance<Try_block_handler_bodyContext>(_ctx, getState());
  enterRule(_localctx, 86, WatParser::RuleTry_block_handler_body);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1037);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1023);
        match(WatParser::LPAR);
        setState(1030);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::CATCH: {
            setState(1024);
            match(WatParser::CATCH);
            setState(1025);
            var_();
            break;
          }

          case WatParser::CATCH_REF: {
            setState(1026);
            match(WatParser::CATCH_REF);
            setState(1027);
            var_();
            break;
          }

          case WatParser::CATCH_ALL: {
            setState(1028);
            match(WatParser::CATCH_ALL);
            break;
          }

          case WatParser::CATCH_ALL_REF: {
            setState(1029);
            match(WatParser::CATCH_ALL_REF);
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1032);
        var_();
        setState(1033);
        match(WatParser::RPAR); 
      }
      setState(1039);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 122, _ctx);
    }
    setState(1040);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Const_exprContext ------------------------------------------------------------------

WatParser::Const_exprContext::Const_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Const_exprContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}


size_t WatParser::Const_exprContext::getRuleIndex() const {
  return WatParser::RuleConst_expr;
}

void WatParser::Const_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterConst_expr(this);
}

void WatParser::Const_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitConst_expr(this);
}


std::any WatParser::Const_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitConst_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Const_exprContext* WatParser::const_expr() {
  Const_exprContext *_localctx = _tracker.createInstance<Const_exprContext>(_ctx, getState());
  enterRule(_localctx, 88, WatParser::RuleConst_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1042);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_Context ------------------------------------------------------------------

WatParser::Func_Context::Func_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Func_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Func_Context::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

WatParser::Func_fieldsContext* WatParser::Func_Context::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Func_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Func_Context::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Func_Context::getRuleIndex() const {
  return WatParser::RuleFunc_;
}

void WatParser::Func_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_(this);
}

void WatParser::Func_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_(this);
}


std::any WatParser::Func_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_Context* WatParser::func_() {
  Func_Context *_localctx = _tracker.createInstance<Func_Context>(_ctx, getState());
  enterRule(_localctx, 90, WatParser::RuleFunc_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1044);
    match(WatParser::LPAR);
    setState(1045);
    match(WatParser::FUNC);
    setState(1047);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1046);
      bind_var();
    }
    setState(1049);
    func_fields();
    setState(1050);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fieldsContext ------------------------------------------------------------------

WatParser::Func_fieldsContext::Func_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_bodyContext* WatParser::Func_fieldsContext::func_fields_body() {
  return getRuleContext<WatParser::Func_fields_bodyContext>(0);
}

WatParser::Type_useContext* WatParser::Func_fieldsContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Inline_importContext* WatParser::Func_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Func_fields_importContext* WatParser::Func_fieldsContext::func_fields_import() {
  return getRuleContext<WatParser::Func_fields_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Func_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Func_fieldsContext* WatParser::Func_fieldsContext::func_fields() {
  return getRuleContext<WatParser::Func_fieldsContext>(0);
}


size_t WatParser::Func_fieldsContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields;
}

void WatParser::Func_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields(this);
}

void WatParser::Func_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields(this);
}


std::any WatParser::Func_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fieldsContext* WatParser::func_fields() {
  Func_fieldsContext *_localctx = _tracker.createInstance<Func_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 92, WatParser::RuleFunc_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1065);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 126, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1053);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 124, _ctx)) {
      case 1: {
        setState(1052);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1055);
      func_fields_body();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1056);
      inline_import();
      setState(1058);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 125, _ctx)) {
      case 1: {
        setState(1057);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1060);
      func_fields_import();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1062);
      inline_export();
      setState(1063);
      func_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_importContext ------------------------------------------------------------------

WatParser::Func_fields_importContext::Func_fields_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_fields_import_resultContext* WatParser::Func_fields_importContext::func_fields_import_result() {
  return getRuleContext<WatParser::Func_fields_import_resultContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_importContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_importContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_importContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_importContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_importContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_importContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_importContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_importContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import;
}

void WatParser::Func_fields_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import(this);
}

void WatParser::Func_fields_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import(this);
}


std::any WatParser::Func_fields_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_importContext* WatParser::func_fields_import() {
  Func_fields_importContext *_localctx = _tracker.createInstance<Func_fields_importContext>(_ctx, getState());
  enterRule(_localctx, 94, WatParser::RuleFunc_fields_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1084);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1082);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 128, _ctx)) {
        case 1: {
          setState(1067);
          match(WatParser::LPAR);
          setState(1068);
          match(WatParser::PARAM);
          setState(1072);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643522) != 0)) {
            setState(1069);
            val_type();
            setState(1074);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1075);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(1076);
          match(WatParser::LPAR);
          setState(1077);
          match(WatParser::PARAM);
          setState(1078);
          bind_var();
          setState(1079);
          val_type();
          setState(1080);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(1086);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 129, _ctx);
    }
    setState(1087);
    func_fields_import_result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_import_resultContext ------------------------------------------------------------------

WatParser::Func_fields_import_resultContext::Func_fields_import_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_import_resultContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_import_resultContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_import_resultContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_import_resultContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_import_resultContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_import_result;
}

void WatParser::Func_fields_import_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_import_result(this);
}

void WatParser::Func_fields_import_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_import_result(this);
}


std::any WatParser::Func_fields_import_resultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_import_result(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_import_resultContext* WatParser::func_fields_import_result() {
  Func_fields_import_resultContext *_localctx = _tracker.createInstance<Func_fields_import_resultContext>(_ctx, getState());
  enterRule(_localctx, 96, WatParser::RuleFunc_fields_import_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1100);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1089);
      match(WatParser::LPAR);
      setState(1090);
      match(WatParser::RESULT);
      setState(1094);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 37739643522) != 0)) {
        setState(1091);
        val_type();
        setState(1096);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1097);
      match(WatParser::RPAR);
      setState(1102);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_fields_bodyContext ------------------------------------------------------------------

WatParser::Func_fields_bodyContext::Func_fields_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_result_bodyContext* WatParser::Func_fields_bodyContext::func_result_body() {
  return getRuleContext<WatParser::Func_result_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_fields_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_fields_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_fields_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_fields_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_fields_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_fields_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_fields_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_fields_body;
}

void WatParser::Func_fields_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_fields_body(this);
}

void WatParser::Func_fields_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_fields_body(this);
}


std::any WatParser::Func_fields_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_fields_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_fields_bodyContext* WatParser::func_fields_body() {
  Func_fields_bodyContext *_localctx = _tracker.createInstance<Func_fields_bodyContext>(_ctx, getState());
  enterRule(_localctx, 98, WatParser::RuleFunc_fields_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1120);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1118);
        _errHandler->sync(this);
        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 133, _ctx)) {
        case 1: {
          setState(1103);
          match(WatParser::LPAR);
          setState(1104);
          match(WatParser::PARAM);
          setState(1108);
          _errHandler->sync(this);
          _la = _input->LA(1);
          while ((((_la & ~ 0x3fULL) == 0) &&
            ((1ULL << _la) & 37739643522) != 0)) {
            setState(1105);
            val_type();
            setState(1110);
            _errHandler->sync(this);
            _la = _input->LA(1);
          }
          setState(1111);
          match(WatParser::RPAR);
          break;
        }

        case 2: {
          setState(1112);
          match(WatParser::LPAR);
          setState(1113);
          match(WatParser::PARAM);
          setState(1114);
          bind_var();
          setState(1115);
          val_type();
          setState(1116);
          match(WatParser::RPAR);
          break;
        }

        default:
          break;
        } 
      }
      setState(1122);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 134, _ctx);
    }
    setState(1123);
    func_result_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_result_bodyContext ------------------------------------------------------------------

WatParser::Func_result_bodyContext::Func_result_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_bodyContext* WatParser::Func_result_bodyContext::func_body() {
  return getRuleContext<WatParser::Func_bodyContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_result_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_result_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_result_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_result_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_result_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_result_body;
}

void WatParser::Func_result_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_result_body(this);
}

void WatParser::Func_result_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_result_body(this);
}


std::any WatParser::Func_result_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_result_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_result_bodyContext* WatParser::func_result_body() {
  Func_result_bodyContext *_localctx = _tracker.createInstance<Func_result_bodyContext>(_ctx, getState());
  enterRule(_localctx, 100, WatParser::RuleFunc_result_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1136);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1125);
        match(WatParser::LPAR);
        setState(1126);
        match(WatParser::RESULT);
        setState(1130);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while ((((_la & ~ 0x3fULL) == 0) &&
          ((1ULL << _la) & 37739643522) != 0)) {
          setState(1127);
          val_type();
          setState(1132);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        setState(1133);
        match(WatParser::RPAR); 
      }
      setState(1138);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 136, _ctx);
    }
    setState(1139);
    func_body();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Func_bodyContext ------------------------------------------------------------------

WatParser::Func_bodyContext::Func_bodyContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Instr_listContext* WatParser::Func_bodyContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::LOCAL() {
  return getTokens(WatParser::LOCAL);
}

tree::TerminalNode* WatParser::Func_bodyContext::LOCAL(size_t i) {
  return getToken(WatParser::LOCAL, i);
}

std::vector<tree::TerminalNode *> WatParser::Func_bodyContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Func_bodyContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Func_bodyContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Func_bodyContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Func_bodyContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Func_bodyContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Func_bodyContext::getRuleIndex() const {
  return WatParser::RuleFunc_body;
}

void WatParser::Func_bodyContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterFunc_body(this);
}

void WatParser::Func_bodyContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitFunc_body(this);
}


std::any WatParser::Func_bodyContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitFunc_body(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Func_bodyContext* WatParser::func_body() {
  Func_bodyContext *_localctx = _tracker.createInstance<Func_bodyContext>(_ctx, getState());
  enterRule(_localctx, 102, WatParser::RuleFunc_body);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1157);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1141);
        match(WatParser::LPAR);
        setState(1142);
        match(WatParser::LOCAL);
        setState(1152);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::VAR: {
            setState(1143);
            bind_var();
            setState(1144);
            val_type();
            break;
          }

          case WatParser::LPAR:
          case WatParser::RPAR:
          case WatParser::NUM_TYPE:
          case WatParser::VEC_TYPE:
          case WatParser::ANYREF:
          case WatParser::NULLREF:
          case WatParser::EQREF:
          case WatParser::I31REF:
          case WatParser::STRUCTREF:
          case WatParser::ARRAYREF:
          case WatParser::FUNCREF:
          case WatParser::NULLFUNCREF:
          case WatParser::EXTERNREF:
          case WatParser::NULLEXTERNREF:
          case WatParser::EXNREF: {
            setState(1149);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 37739643522) != 0)) {
              setState(1146);
              val_type();
              setState(1151);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1154);
        match(WatParser::RPAR); 
      }
      setState(1159);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 139, _ctx);
    }
    setState(1160);
    instr_list();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_useContext ------------------------------------------------------------------

WatParser::Table_useContext::Table_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Table_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_useContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Var_Context* WatParser::Table_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Table_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Table_useContext::getRuleIndex() const {
  return WatParser::RuleTable_use;
}

void WatParser::Table_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_use(this);
}

void WatParser::Table_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_use(this);
}


std::any WatParser::Table_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_useContext* WatParser::table_use() {
  Table_useContext *_localctx = _tracker.createInstance<Table_useContext>(_ctx, getState());
  enterRule(_localctx, 104, WatParser::RuleTable_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1162);
    match(WatParser::LPAR);
    setState(1163);
    match(WatParser::TABLE);
    setState(1164);
    var_();
    setState(1165);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_useContext ------------------------------------------------------------------

WatParser::Memory_useContext::Memory_useContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Memory_useContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_useContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Var_Context* WatParser::Memory_useContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Memory_useContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Memory_useContext::getRuleIndex() const {
  return WatParser::RuleMemory_use;
}

void WatParser::Memory_useContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_use(this);
}

void WatParser::Memory_useContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_use(this);
}


std::any WatParser::Memory_useContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_use(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_useContext* WatParser::memory_use() {
  Memory_useContext *_localctx = _tracker.createInstance<Memory_useContext>(_ctx, getState());
  enterRule(_localctx, 106, WatParser::RuleMemory_use);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1167);
    match(WatParser::LPAR);
    setState(1168);
    match(WatParser::MEMORY);
    setState(1169);
    var_();
    setState(1170);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- OffsetContext ------------------------------------------------------------------

WatParser::OffsetContext::OffsetContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::OffsetContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::OffsetContext::OFFSET() {
  return getToken(WatParser::OFFSET, 0);
}

WatParser::Const_exprContext* WatParser::OffsetContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::OffsetContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::OffsetContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::OffsetContext::getRuleIndex() const {
  return WatParser::RuleOffset;
}

void WatParser::OffsetContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterOffset(this);
}

void WatParser::OffsetContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitOffset(this);
}


std::any WatParser::OffsetContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitOffset(this);
  else
    return visitor->visitChildren(this);
}

WatParser::OffsetContext* WatParser::offset() {
  OffsetContext *_localctx = _tracker.createInstance<OffsetContext>(_ctx, getState());
  enterRule(_localctx, 108, WatParser::RuleOffset);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1178);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 140, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1172);
      match(WatParser::LPAR);
      setState(1173);
      match(WatParser::OFFSET);
      setState(1174);
      const_expr();
      setState(1175);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1177);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_kindContext ------------------------------------------------------------------

WatParser::Elem_kindContext::Elem_kindContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_kindContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}


size_t WatParser::Elem_kindContext::getRuleIndex() const {
  return WatParser::RuleElem_kind;
}

void WatParser::Elem_kindContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_kind(this);
}

void WatParser::Elem_kindContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_kind(this);
}


std::any WatParser::Elem_kindContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_kind(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_kindContext* WatParser::elem_kind() {
  Elem_kindContext *_localctx = _tracker.createInstance<Elem_kindContext>(_ctx, getState());
  enterRule(_localctx, 110, WatParser::RuleElem_kind);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1180);
    match(WatParser::FUNC);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_exprContext ------------------------------------------------------------------

WatParser::Elem_exprContext::Elem_exprContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Elem_exprContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Elem_exprContext::ITEM() {
  return getToken(WatParser::ITEM, 0);
}

WatParser::Const_exprContext* WatParser::Elem_exprContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

tree::TerminalNode* WatParser::Elem_exprContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::ExprContext* WatParser::Elem_exprContext::expr() {
  return getRuleContext<WatParser::ExprContext>(0);
}


size_t WatParser::Elem_exprContext::getRuleIndex() const {
  return WatParser::RuleElem_expr;
}

void WatParser::Elem_exprContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_expr(this);
}

void WatParser::Elem_exprContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_expr(this);
}


std::any WatParser::Elem_exprContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_expr(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_exprContext* WatParser::elem_expr() {
  Elem_exprContext *_localctx = _tracker.createInstance<Elem_exprContext>(_ctx, getState());
  enterRule(_localctx, 112, WatParser::RuleElem_expr);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1188);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 141, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1182);
      match(WatParser::LPAR);
      setState(1183);
      match(WatParser::ITEM);
      setState(1184);
      const_expr();
      setState(1185);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1187);
      expr();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Elem_listContext ------------------------------------------------------------------

WatParser::Elem_listContext::Elem_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Elem_kindContext* WatParser::Elem_listContext::elem_kind() {
  return getRuleContext<WatParser::Elem_kindContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::Elem_listContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Elem_listContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

WatParser::Ref_typeContext* WatParser::Elem_listContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Elem_listContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Elem_listContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Elem_listContext::getRuleIndex() const {
  return WatParser::RuleElem_list;
}

void WatParser::Elem_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem_list(this);
}

void WatParser::Elem_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem_list(this);
}


std::any WatParser::Elem_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Elem_listContext* WatParser::elem_list() {
  Elem_listContext *_localctx = _tracker.createInstance<Elem_listContext>(_ctx, getState());
  enterRule(_localctx, 114, WatParser::RuleElem_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1204);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::FUNC: {
        enterOuterAlt(_localctx, 1);
        setState(1190);
        elem_kind();
        setState(1194);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1191);
          var_();
          setState(1196);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case WatParser::LPAR:
      case WatParser::ANYREF:
      case WatParser::NULLREF:
      case WatParser::EQREF:
      case WatParser::I31REF:
      case WatParser::STRUCTREF:
      case WatParser::ARRAYREF:
      case WatParser::FUNCREF:
      case WatParser::NULLFUNCREF:
      case WatParser::EXTERNREF:
      case WatParser::NULLEXTERNREF:
      case WatParser::EXNREF: {
        enterOuterAlt(_localctx, 2);
        setState(1197);
        ref_type();
        setState(1201);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1198);
          elem_expr();
          setState(1203);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ElemContext ------------------------------------------------------------------

WatParser::ElemContext::ElemContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ElemContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ElemContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

WatParser::Elem_listContext* WatParser::ElemContext::elem_list() {
  return getRuleContext<WatParser::Elem_listContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Table_useContext* WatParser::ElemContext::table_use() {
  return getRuleContext<WatParser::Table_useContext>(0);
}

WatParser::OffsetContext* WatParser::ElemContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::ElemContext::DECLARE() {
  return getToken(WatParser::DECLARE, 0);
}

WatParser::Bind_varContext* WatParser::ElemContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<WatParser::Var_Context *> WatParser::ElemContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::ElemContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}


size_t WatParser::ElemContext::getRuleIndex() const {
  return WatParser::RuleElem;
}

void WatParser::ElemContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterElem(this);
}

void WatParser::ElemContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitElem(this);
}


std::any WatParser::ElemContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitElem(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ElemContext* WatParser::elem() {
  ElemContext *_localctx = _tracker.createInstance<ElemContext>(_ctx, getState());
  enterRule(_localctx, 116, WatParser::RuleElem);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1237);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 150, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1206);
      match(WatParser::LPAR);
      setState(1207);
      match(WatParser::ELEM);
      setState(1209);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1208);
        bind_var();
      }
      setState(1218);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 147, _ctx)) {
      case 1: {
        setState(1211);
        table_use();
        setState(1212);
        offset();
        break;
      }

      case 2: {
        setState(1215);
        _errHandler->sync(this);

        switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 146, _ctx)) {
        case 1: {
          setState(1214);
          offset();
          break;
        }

        default:
          break;
        }
        break;
      }

      case 3: {
        setState(1217);
        match(WatParser::DECLARE);
        break;
      }

      default:
        break;
      }
      setState(1220);
      elem_list();
      setState(1221);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1223);
      match(WatParser::LPAR);
      setState(1224);
      match(WatParser::ELEM);
      setState(1226);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1225);
        bind_var();
      }
      setState(1228);
      offset();
      setState(1232);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::NAT || _la == WatParser::VAR) {
        setState(1229);
        var_();
        setState(1234);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1235);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TableContext ------------------------------------------------------------------

WatParser::TableContext::TableContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::TableContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::TableContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_fieldsContext* WatParser::TableContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

tree::TerminalNode* WatParser::TableContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::TableContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::TableContext::getRuleIndex() const {
  return WatParser::RuleTable;
}

void WatParser::TableContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable(this);
}

void WatParser::TableContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable(this);
}


std::any WatParser::TableContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TableContext* WatParser::table() {
  TableContext *_localctx = _tracker.createInstance<TableContext>(_ctx, getState());
  enterRule(_localctx, 118, WatParser::RuleTable);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1239);
    match(WatParser::LPAR);
    setState(1240);
    match(WatParser::TABLE);
    setState(1242);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1241);
      bind_var();
    }
    setState(1244);
    table_fields();
    setState(1245);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Table_fieldsContext ------------------------------------------------------------------

WatParser::Table_fieldsContext::Table_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Table_typeContext* WatParser::Table_fieldsContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

WatParser::InstrContext* WatParser::Table_fieldsContext::instr() {
  return getRuleContext<WatParser::InstrContext>(0);
}

WatParser::Instr_listContext* WatParser::Table_fieldsContext::instr_list() {
  return getRuleContext<WatParser::Instr_listContext>(0);
}

WatParser::Inline_importContext* WatParser::Table_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Table_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Table_fieldsContext* WatParser::Table_fieldsContext::table_fields() {
  return getRuleContext<WatParser::Table_fieldsContext>(0);
}

WatParser::Ref_typeContext* WatParser::Table_fieldsContext::ref_type() {
  return getRuleContext<WatParser::Ref_typeContext>(0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::ELEM() {
  return getToken(WatParser::ELEM, 0);
}

tree::TerminalNode* WatParser::Table_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::Var_Context *> WatParser::Table_fieldsContext::var_() {
  return getRuleContexts<WatParser::Var_Context>();
}

WatParser::Var_Context* WatParser::Table_fieldsContext::var_(size_t i) {
  return getRuleContext<WatParser::Var_Context>(i);
}

std::vector<WatParser::Elem_exprContext *> WatParser::Table_fieldsContext::elem_expr() {
  return getRuleContexts<WatParser::Elem_exprContext>();
}

WatParser::Elem_exprContext* WatParser::Table_fieldsContext::elem_expr(size_t i) {
  return getRuleContext<WatParser::Elem_exprContext>(i);
}


size_t WatParser::Table_fieldsContext::getRuleIndex() const {
  return WatParser::RuleTable_fields;
}

void WatParser::Table_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTable_fields(this);
}

void WatParser::Table_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTable_fields(this);
}


std::any WatParser::Table_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTable_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Table_fieldsContext* WatParser::table_fields() {
  Table_fieldsContext *_localctx = _tracker.createInstance<Table_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 120, WatParser::RuleTable_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1278);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 156, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1247);
      table_type();
      setState(1251);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & -1099146589915572222) != 0) || ((((_la - 64) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 64)) & -1729383438093385729) != 0) || ((((_la - 128) & ~ 0x3fULL) == 0) &&
        ((1ULL << (_la - 128)) & 2097151) != 0)) {
        setState(1248);
        instr();
        setState(1249);
        instr_list();
      }
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1253);
      inline_import();
      setState(1254);
      table_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1256);
      inline_export();
      setState(1257);
      table_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1259);
      ref_type();
      setState(1260);
      match(WatParser::LPAR);
      setState(1261);
      match(WatParser::ELEM);
      setState(1274);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 155, _ctx)) {
      case 1: {
        setState(1265);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::NAT || _la == WatParser::VAR) {
          setState(1262);
          var_();
          setState(1267);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      case 2: {
        setState(1271);
        _errHandler->sync(this);
        _la = _input->LA(1);
        while (_la == WatParser::LPAR) {
          setState(1268);
          elem_expr();
          setState(1273);
          _errHandler->sync(this);
          _la = _input->LA(1);
        }
        break;
      }

      default:
        break;
      }
      setState(1276);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- DataContext ------------------------------------------------------------------

WatParser::DataContext::DataContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::DataContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::DataContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

WatParser::Memory_useContext* WatParser::DataContext::memory_use() {
  return getRuleContext<WatParser::Memory_useContext>(0);
}

WatParser::OffsetContext* WatParser::DataContext::offset() {
  return getRuleContext<WatParser::OffsetContext>(0);
}

tree::TerminalNode* WatParser::DataContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::DataContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::DataContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::DataContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::DataContext::getRuleIndex() const {
  return WatParser::RuleData;
}

void WatParser::DataContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterData(this);
}

void WatParser::DataContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitData(this);
}


std::any WatParser::DataContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitData(this);
  else
    return visitor->visitChildren(this);
}

WatParser::DataContext* WatParser::data() {
  DataContext *_localctx = _tracker.createInstance<DataContext>(_ctx, getState());
  enterRule(_localctx, 122, WatParser::RuleData);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1310);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 162, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1280);
      match(WatParser::LPAR);
      setState(1281);
      match(WatParser::DATA);
      setState(1283);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1282);
        bind_var();
      }
      setState(1285);
      memory_use();
      setState(1286);
      offset();
      setState(1290);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1287);
        match(WatParser::STRING_);
        setState(1292);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1293);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1295);
      match(WatParser::LPAR);
      setState(1296);
      match(WatParser::DATA);
      setState(1298);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1297);
        bind_var();
      }
      setState(1301);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::LPAR) {
        setState(1300);
        offset();
      }
      setState(1306);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1303);
        match(WatParser::STRING_);
        setState(1308);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1309);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MemoryContext ------------------------------------------------------------------

WatParser::MemoryContext::MemoryContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MemoryContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MemoryContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_fieldsContext* WatParser::MemoryContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::MemoryContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::MemoryContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::MemoryContext::getRuleIndex() const {
  return WatParser::RuleMemory;
}

void WatParser::MemoryContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory(this);
}

void WatParser::MemoryContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory(this);
}


std::any WatParser::MemoryContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MemoryContext* WatParser::memory() {
  MemoryContext *_localctx = _tracker.createInstance<MemoryContext>(_ctx, getState());
  enterRule(_localctx, 124, WatParser::RuleMemory);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1312);
    match(WatParser::LPAR);
    setState(1313);
    match(WatParser::MEMORY);
    setState(1315);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1314);
      bind_var();
    }
    setState(1317);
    memory_fields();
    setState(1318);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Memory_fieldsContext ------------------------------------------------------------------

WatParser::Memory_fieldsContext::Memory_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Memory_typeContext* WatParser::Memory_fieldsContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

WatParser::Inline_importContext* WatParser::Memory_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Memory_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Memory_fieldsContext* WatParser::Memory_fieldsContext::memory_fields() {
  return getRuleContext<WatParser::Memory_fieldsContext>(0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::DATA() {
  return getToken(WatParser::DATA, 0);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Memory_fieldsContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Memory_fieldsContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Memory_fieldsContext::getRuleIndex() const {
  return WatParser::RuleMemory_fields;
}

void WatParser::Memory_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMemory_fields(this);
}

void WatParser::Memory_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMemory_fields(this);
}


std::any WatParser::Memory_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMemory_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Memory_fieldsContext* WatParser::memory_fields() {
  Memory_fieldsContext *_localctx = _tracker.createInstance<Memory_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 126, WatParser::RuleMemory_fields);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1336);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 165, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1320);
      memory_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1321);
      inline_import();
      setState(1322);
      memory_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1324);
      inline_export();
      setState(1325);
      memory_fields();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1327);
      match(WatParser::LPAR);
      setState(1328);
      match(WatParser::DATA);
      setState(1332);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1329);
        match(WatParser::STRING_);
        setState(1334);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1335);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- TagContext ------------------------------------------------------------------

WatParser::TagContext::TagContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::TagContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::TagContext::TAG() {
  return getToken(WatParser::TAG, 0);
}

WatParser::Tag_fieldsContext* WatParser::TagContext::tag_fields() {
  return getRuleContext<WatParser::Tag_fieldsContext>(0);
}

tree::TerminalNode* WatParser::TagContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::TagContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::TagContext::getRuleIndex() const {
  return WatParser::RuleTag;
}

void WatParser::TagContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag(this);
}

void WatParser::TagContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag(this);
}


std::any WatParser::TagContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag(this);
  else
    return visitor->visitChildren(this);
}

WatParser::TagContext* WatParser::tag() {
  TagContext *_localctx = _tracker.createInstance<TagContext>(_ctx, getState());
  enterRule(_localctx, 128, WatParser::RuleTag);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1338);
    match(WatParser::LPAR);
    setState(1339);
    match(WatParser::TAG);
    setState(1341);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1340);
      bind_var();
    }
    setState(1343);
    tag_fields();
    setState(1344);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fieldsContext ------------------------------------------------------------------

WatParser::Tag_fieldsContext::Tag_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Func_typeContext* WatParser::Tag_fieldsContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}

std::vector<WatParser::Inline_exportContext *> WatParser::Tag_fieldsContext::inline_export() {
  return getRuleContexts<WatParser::Inline_exportContext>();
}

WatParser::Inline_exportContext* WatParser::Tag_fieldsContext::inline_export(size_t i) {
  return getRuleContext<WatParser::Inline_exportContext>(i);
}

WatParser::Type_useContext* WatParser::Tag_fieldsContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Inline_importContext* WatParser::Tag_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Tag_fields_importContext* WatParser::Tag_fieldsContext::tag_fields_import() {
  return getRuleContext<WatParser::Tag_fields_importContext>(0);
}


size_t WatParser::Tag_fieldsContext::getRuleIndex() const {
  return WatParser::RuleTag_fields;
}

void WatParser::Tag_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields(this);
}

void WatParser::Tag_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields(this);
}


std::any WatParser::Tag_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fieldsContext* WatParser::tag_fields() {
  Tag_fieldsContext *_localctx = _tracker.createInstance<Tag_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 130, WatParser::RuleTag_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    setState(1368);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 171, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1349);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1346);
          inline_export(); 
        }
        setState(1351);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 167, _ctx);
      }
      setState(1353);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 168, _ctx)) {
      case 1: {
        setState(1352);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1355);
      func_type();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1359);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
      while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
        if (alt == 1) {
          setState(1356);
          inline_export(); 
        }
        setState(1361);
        _errHandler->sync(this);
        alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 169, _ctx);
      }
      setState(1362);
      inline_import();
      setState(1364);
      _errHandler->sync(this);

      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 170, _ctx)) {
      case 1: {
        setState(1363);
        type_use();
        break;
      }

      default:
        break;
      }
      setState(1366);
      tag_fields_import();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fields_importContext ------------------------------------------------------------------

WatParser::Tag_fields_importContext::Tag_fields_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Tag_fields_import_resultContext* WatParser::Tag_fields_importContext::tag_fields_import_result() {
  return getRuleContext<WatParser::Tag_fields_import_resultContext>(0);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::PARAM() {
  return getTokens(WatParser::PARAM);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::PARAM(size_t i) {
  return getToken(WatParser::PARAM, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_importContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Tag_fields_importContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Bind_varContext *> WatParser::Tag_fields_importContext::bind_var() {
  return getRuleContexts<WatParser::Bind_varContext>();
}

WatParser::Bind_varContext* WatParser::Tag_fields_importContext::bind_var(size_t i) {
  return getRuleContext<WatParser::Bind_varContext>(i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Tag_fields_importContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Tag_fields_importContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Tag_fields_importContext::getRuleIndex() const {
  return WatParser::RuleTag_fields_import;
}

void WatParser::Tag_fields_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields_import(this);
}

void WatParser::Tag_fields_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields_import(this);
}


std::any WatParser::Tag_fields_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fields_importContext* WatParser::tag_fields_import() {
  Tag_fields_importContext *_localctx = _tracker.createInstance<Tag_fields_importContext>(_ctx, getState());
  enterRule(_localctx, 132, WatParser::RuleTag_fields_import);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1386);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1370);
        match(WatParser::LPAR);
        setState(1371);
        match(WatParser::PARAM);
        setState(1381);
        _errHandler->sync(this);
        switch (_input->LA(1)) {
          case WatParser::LPAR:
          case WatParser::RPAR:
          case WatParser::NUM_TYPE:
          case WatParser::VEC_TYPE:
          case WatParser::ANYREF:
          case WatParser::NULLREF:
          case WatParser::EQREF:
          case WatParser::I31REF:
          case WatParser::STRUCTREF:
          case WatParser::ARRAYREF:
          case WatParser::FUNCREF:
          case WatParser::NULLFUNCREF:
          case WatParser::EXTERNREF:
          case WatParser::NULLEXTERNREF:
          case WatParser::EXNREF: {
            setState(1375);
            _errHandler->sync(this);
            _la = _input->LA(1);
            while ((((_la & ~ 0x3fULL) == 0) &&
              ((1ULL << _la) & 37739643522) != 0)) {
              setState(1372);
              val_type();
              setState(1377);
              _errHandler->sync(this);
              _la = _input->LA(1);
            }
            break;
          }

          case WatParser::VAR: {
            setState(1378);
            bind_var();
            setState(1379);
            val_type();
            break;
          }

        default:
          throw NoViableAltException(this);
        }
        setState(1383);
        match(WatParser::RPAR); 
      }
      setState(1388);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 174, _ctx);
    }
    setState(1389);
    tag_fields_import_result();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Tag_fields_import_resultContext ------------------------------------------------------------------

WatParser::Tag_fields_import_resultContext::Tag_fields_import_resultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::RESULT() {
  return getTokens(WatParser::RESULT);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::RESULT(size_t i) {
  return getToken(WatParser::RESULT, i);
}

std::vector<tree::TerminalNode *> WatParser::Tag_fields_import_resultContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Tag_fields_import_resultContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::Val_typeContext *> WatParser::Tag_fields_import_resultContext::val_type() {
  return getRuleContexts<WatParser::Val_typeContext>();
}

WatParser::Val_typeContext* WatParser::Tag_fields_import_resultContext::val_type(size_t i) {
  return getRuleContext<WatParser::Val_typeContext>(i);
}


size_t WatParser::Tag_fields_import_resultContext::getRuleIndex() const {
  return WatParser::RuleTag_fields_import_result;
}

void WatParser::Tag_fields_import_resultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterTag_fields_import_result(this);
}

void WatParser::Tag_fields_import_resultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitTag_fields_import_result(this);
}


std::any WatParser::Tag_fields_import_resultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitTag_fields_import_result(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Tag_fields_import_resultContext* WatParser::tag_fields_import_result() {
  Tag_fields_import_resultContext *_localctx = _tracker.createInstance<Tag_fields_import_resultContext>(_ctx, getState());
  enterRule(_localctx, 134, WatParser::RuleTag_fields_import_result);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1402);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1391);
      match(WatParser::LPAR);
      setState(1392);
      match(WatParser::RESULT);
      setState(1396);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 37739643522) != 0)) {
        setState(1393);
        val_type();
        setState(1398);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1399);
      match(WatParser::RPAR);
      setState(1404);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SglobalContext ------------------------------------------------------------------

WatParser::SglobalContext::SglobalContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SglobalContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SglobalContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_fieldsContext* WatParser::SglobalContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}

tree::TerminalNode* WatParser::SglobalContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::SglobalContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::SglobalContext::getRuleIndex() const {
  return WatParser::RuleSglobal;
}

void WatParser::SglobalContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSglobal(this);
}

void WatParser::SglobalContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSglobal(this);
}


std::any WatParser::SglobalContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSglobal(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SglobalContext* WatParser::sglobal() {
  SglobalContext *_localctx = _tracker.createInstance<SglobalContext>(_ctx, getState());
  enterRule(_localctx, 136, WatParser::RuleSglobal);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1405);
    match(WatParser::LPAR);
    setState(1406);
    match(WatParser::GLOBAL);
    setState(1408);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1407);
      bind_var();
    }
    setState(1410);
    global_fields();
    setState(1411);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Global_fieldsContext ------------------------------------------------------------------

WatParser::Global_fieldsContext::Global_fieldsContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Global_typeContext* WatParser::Global_fieldsContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}

WatParser::Const_exprContext* WatParser::Global_fieldsContext::const_expr() {
  return getRuleContext<WatParser::Const_exprContext>(0);
}

WatParser::Inline_importContext* WatParser::Global_fieldsContext::inline_import() {
  return getRuleContext<WatParser::Inline_importContext>(0);
}

WatParser::Inline_exportContext* WatParser::Global_fieldsContext::inline_export() {
  return getRuleContext<WatParser::Inline_exportContext>(0);
}

WatParser::Global_fieldsContext* WatParser::Global_fieldsContext::global_fields() {
  return getRuleContext<WatParser::Global_fieldsContext>(0);
}


size_t WatParser::Global_fieldsContext::getRuleIndex() const {
  return WatParser::RuleGlobal_fields;
}

void WatParser::Global_fieldsContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterGlobal_fields(this);
}

void WatParser::Global_fieldsContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitGlobal_fields(this);
}


std::any WatParser::Global_fieldsContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitGlobal_fields(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Global_fieldsContext* WatParser::global_fields() {
  Global_fieldsContext *_localctx = _tracker.createInstance<Global_fieldsContext>(_ctx, getState());
  enterRule(_localctx, 138, WatParser::RuleGlobal_fields);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1422);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 178, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1413);
      global_type();
      setState(1414);
      const_expr();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1416);
      inline_import();
      setState(1417);
      global_type();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1419);
      inline_export();
      setState(1420);
      global_fields();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Import_descContext ------------------------------------------------------------------

WatParser::Import_descContext::Import_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Import_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Import_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Import_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Type_useContext* WatParser::Import_descContext::type_use() {
  return getRuleContext<WatParser::Type_useContext>(0);
}

WatParser::Func_typeContext* WatParser::Import_descContext::func_type() {
  return getRuleContext<WatParser::Func_typeContext>(0);
}

WatParser::Bind_varContext* WatParser::Import_descContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

WatParser::Table_typeContext* WatParser::Import_descContext::table_type() {
  return getRuleContext<WatParser::Table_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

WatParser::Memory_typeContext* WatParser::Import_descContext::memory_type() {
  return getRuleContext<WatParser::Memory_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

WatParser::Global_typeContext* WatParser::Import_descContext::global_type() {
  return getRuleContext<WatParser::Global_typeContext>(0);
}

tree::TerminalNode* WatParser::Import_descContext::TAG() {
  return getToken(WatParser::TAG, 0);
}


size_t WatParser::Import_descContext::getRuleIndex() const {
  return WatParser::RuleImport_desc;
}

void WatParser::Import_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterImport_desc(this);
}

void WatParser::Import_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitImport_desc(this);
}


std::any WatParser::Import_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitImport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Import_descContext* WatParser::import_desc() {
  Import_descContext *_localctx = _tracker.createInstance<Import_descContext>(_ctx, getState());
  enterRule(_localctx, 140, WatParser::RuleImport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1470);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 186, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1424);
      match(WatParser::LPAR);
      setState(1425);
      match(WatParser::FUNC);
      setState(1427);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1426);
        bind_var();
      }
      setState(1431);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 180, _ctx)) {
      case 1: {
        setState(1429);
        type_use();
        break;
      }

      case 2: {
        setState(1430);
        func_type();
        break;
      }

      default:
        break;
      }
      setState(1433);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1435);
      match(WatParser::LPAR);
      setState(1436);
      match(WatParser::TABLE);
      setState(1438);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1437);
        bind_var();
      }
      setState(1440);
      table_type();
      setState(1441);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1443);
      match(WatParser::LPAR);
      setState(1444);
      match(WatParser::MEMORY);
      setState(1446);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1445);
        bind_var();
      }
      setState(1448);
      memory_type();
      setState(1449);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1451);
      match(WatParser::LPAR);
      setState(1452);
      match(WatParser::GLOBAL);
      setState(1454);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1453);
        bind_var();
      }
      setState(1456);
      global_type();
      setState(1457);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1459);
      match(WatParser::LPAR);
      setState(1460);
      match(WatParser::TAG);
      setState(1462);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1461);
        bind_var();
      }
      setState(1466);
      _errHandler->sync(this);
      switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 185, _ctx)) {
      case 1: {
        setState(1464);
        type_use();
        break;
      }

      case 2: {
        setState(1465);
        func_type();
        break;
      }

      default:
        break;
      }
      setState(1468);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- SimportContext ------------------------------------------------------------------

WatParser::SimportContext::SimportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::SimportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::SimportContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::SimportContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::SimportContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

WatParser::Import_descContext* WatParser::SimportContext::import_desc() {
  return getRuleContext<WatParser::Import_descContext>(0);
}

tree::TerminalNode* WatParser::SimportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::SimportContext::getRuleIndex() const {
  return WatParser::RuleSimport;
}

void WatParser::SimportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterSimport(this);
}

void WatParser::SimportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitSimport(this);
}


std::any WatParser::SimportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitSimport(this);
  else
    return visitor->visitChildren(this);
}

WatParser::SimportContext* WatParser::simport() {
  SimportContext *_localctx = _tracker.createInstance<SimportContext>(_ctx, getState());
  enterRule(_localctx, 142, WatParser::RuleSimport);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1472);
    match(WatParser::LPAR);
    setState(1473);
    match(WatParser::IMPORT);
    setState(1474);
    name();
    setState(1475);
    name();
    setState(1476);
    import_desc();
    setState(1477);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_importContext ------------------------------------------------------------------

WatParser::Inline_importContext::Inline_importContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_importContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_importContext::IMPORT() {
  return getToken(WatParser::IMPORT, 0);
}

std::vector<WatParser::NameContext *> WatParser::Inline_importContext::name() {
  return getRuleContexts<WatParser::NameContext>();
}

WatParser::NameContext* WatParser::Inline_importContext::name(size_t i) {
  return getRuleContext<WatParser::NameContext>(i);
}

tree::TerminalNode* WatParser::Inline_importContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_importContext::getRuleIndex() const {
  return WatParser::RuleInline_import;
}

void WatParser::Inline_importContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_import(this);
}

void WatParser::Inline_importContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_import(this);
}


std::any WatParser::Inline_importContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_import(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_importContext* WatParser::inline_import() {
  Inline_importContext *_localctx = _tracker.createInstance<Inline_importContext>(_ctx, getState());
  enterRule(_localctx, 144, WatParser::RuleInline_import);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1479);
    match(WatParser::LPAR);
    setState(1480);
    match(WatParser::IMPORT);
    setState(1481);
    name();
    setState(1482);
    name();
    setState(1483);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_descContext ------------------------------------------------------------------

WatParser::Export_descContext::Export_descContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_descContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

WatParser::Var_Context* WatParser::Export_descContext::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Export_descContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Export_descContext::FUNC() {
  return getToken(WatParser::FUNC, 0);
}

tree::TerminalNode* WatParser::Export_descContext::TABLE() {
  return getToken(WatParser::TABLE, 0);
}

tree::TerminalNode* WatParser::Export_descContext::MEMORY() {
  return getToken(WatParser::MEMORY, 0);
}

tree::TerminalNode* WatParser::Export_descContext::GLOBAL() {
  return getToken(WatParser::GLOBAL, 0);
}

tree::TerminalNode* WatParser::Export_descContext::TAG() {
  return getToken(WatParser::TAG, 0);
}


size_t WatParser::Export_descContext::getRuleIndex() const {
  return WatParser::RuleExport_desc;
}

void WatParser::Export_descContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_desc(this);
}

void WatParser::Export_descContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_desc(this);
}


std::any WatParser::Export_descContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_desc(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_descContext* WatParser::export_desc() {
  Export_descContext *_localctx = _tracker.createInstance<Export_descContext>(_ctx, getState());
  enterRule(_localctx, 146, WatParser::RuleExport_desc);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1485);
    match(WatParser::LPAR);
    setState(1486);
    _la = _input->LA(1);
    if (!(((((_la - 150) & ~ 0x3fULL) == 0) &&
      ((1ULL << (_la - 150)) & 32993) != 0))) {
    _errHandler->recoverInline(this);
    }
    else {
      _errHandler->reportMatch(this);
      consume();
    }
    setState(1487);
    var_();
    setState(1488);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Export_Context ------------------------------------------------------------------

WatParser::Export_Context::Export_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Export_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Export_Context::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Export_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Export_descContext* WatParser::Export_Context::export_desc() {
  return getRuleContext<WatParser::Export_descContext>(0);
}

tree::TerminalNode* WatParser::Export_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Export_Context::getRuleIndex() const {
  return WatParser::RuleExport_;
}

void WatParser::Export_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterExport_(this);
}

void WatParser::Export_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitExport_(this);
}


std::any WatParser::Export_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitExport_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Export_Context* WatParser::export_() {
  Export_Context *_localctx = _tracker.createInstance<Export_Context>(_ctx, getState());
  enterRule(_localctx, 148, WatParser::RuleExport_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1490);
    match(WatParser::LPAR);
    setState(1491);
    match(WatParser::EXPORT);
    setState(1492);
    name();
    setState(1493);
    export_desc();
    setState(1494);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_exportContext ------------------------------------------------------------------

WatParser::Inline_exportContext::Inline_exportContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Inline_exportContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Inline_exportContext::EXPORT() {
  return getToken(WatParser::EXPORT, 0);
}

WatParser::NameContext* WatParser::Inline_exportContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::Inline_exportContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Inline_exportContext::getRuleIndex() const {
  return WatParser::RuleInline_export;
}

void WatParser::Inline_exportContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_export(this);
}

void WatParser::Inline_exportContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_export(this);
}


std::any WatParser::Inline_exportContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_export(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_exportContext* WatParser::inline_export() {
  Inline_exportContext *_localctx = _tracker.createInstance<Inline_exportContext>(_ctx, getState());
  enterRule(_localctx, 150, WatParser::RuleInline_export);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1496);
    match(WatParser::LPAR);
    setState(1497);
    match(WatParser::EXPORT);
    setState(1498);
    name();
    setState(1499);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_defContext ------------------------------------------------------------------

WatParser::Type_defContext::Type_defContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Type_defContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Type_defContext::TYPE() {
  return getToken(WatParser::TYPE, 0);
}

WatParser::Sub_typeContext* WatParser::Type_defContext::sub_type() {
  return getRuleContext<WatParser::Sub_typeContext>(0);
}

tree::TerminalNode* WatParser::Type_defContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

WatParser::Bind_varContext* WatParser::Type_defContext::bind_var() {
  return getRuleContext<WatParser::Bind_varContext>(0);
}


size_t WatParser::Type_defContext::getRuleIndex() const {
  return WatParser::RuleType_def;
}

void WatParser::Type_defContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_def(this);
}

void WatParser::Type_defContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_def(this);
}


std::any WatParser::Type_defContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_def(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_defContext* WatParser::type_def() {
  Type_defContext *_localctx = _tracker.createInstance<Type_defContext>(_ctx, getState());
  enterRule(_localctx, 152, WatParser::RuleType_def);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1501);
    match(WatParser::LPAR);
    setState(1502);
    match(WatParser::TYPE);
    setState(1504);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1503);
      bind_var();
    }
    setState(1506);
    sub_type();
    setState(1507);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Rec_typeContext ------------------------------------------------------------------

WatParser::Rec_typeContext::Rec_typeContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_defContext *> WatParser::Rec_typeContext::type_def() {
  return getRuleContexts<WatParser::Type_defContext>();
}

WatParser::Type_defContext* WatParser::Rec_typeContext::type_def(size_t i) {
  return getRuleContext<WatParser::Type_defContext>(i);
}

tree::TerminalNode* WatParser::Rec_typeContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::REC() {
  return getToken(WatParser::REC, 0);
}

tree::TerminalNode* WatParser::Rec_typeContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Rec_typeContext::getRuleIndex() const {
  return WatParser::RuleRec_type;
}

void WatParser::Rec_typeContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterRec_type(this);
}

void WatParser::Rec_typeContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitRec_type(this);
}


std::any WatParser::Rec_typeContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitRec_type(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Rec_typeContext* WatParser::rec_type() {
  Rec_typeContext *_localctx = _tracker.createInstance<Rec_typeContext>(_ctx, getState());
  enterRule(_localctx, 154, WatParser::RuleRec_type);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1519);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 189, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1509);
      type_def();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1510);
      match(WatParser::LPAR);
      setState(1511);
      match(WatParser::REC);
      setState(1515);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1512);
        type_def();
        setState(1517);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1518);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Type_Context ------------------------------------------------------------------

WatParser::Type_Context::Type_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Rec_typeContext* WatParser::Type_Context::rec_type() {
  return getRuleContext<WatParser::Rec_typeContext>(0);
}


size_t WatParser::Type_Context::getRuleIndex() const {
  return WatParser::RuleType_;
}

void WatParser::Type_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterType_(this);
}

void WatParser::Type_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitType_(this);
}


std::any WatParser::Type_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitType_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Type_Context* WatParser::type_() {
  Type_Context *_localctx = _tracker.createInstance<Type_Context>(_ctx, getState());
  enterRule(_localctx, 156, WatParser::RuleType_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1521);
    rec_type();
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Start_Context ------------------------------------------------------------------

WatParser::Start_Context::Start_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Start_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Start_Context::START_() {
  return getToken(WatParser::START_, 0);
}

WatParser::Var_Context* WatParser::Start_Context::var_() {
  return getRuleContext<WatParser::Var_Context>(0);
}

tree::TerminalNode* WatParser::Start_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Start_Context::getRuleIndex() const {
  return WatParser::RuleStart_;
}

void WatParser::Start_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterStart_(this);
}

void WatParser::Start_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitStart_(this);
}


std::any WatParser::Start_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitStart_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Start_Context* WatParser::start_() {
  Start_Context *_localctx = _tracker.createInstance<Start_Context>(_ctx, getState());
  enterRule(_localctx, 158, WatParser::RuleStart_);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1523);
    match(WatParser::LPAR);
    setState(1524);
    match(WatParser::START_);
    setState(1525);
    var_();
    setState(1526);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_fieldContext ------------------------------------------------------------------

WatParser::Module_fieldContext::Module_fieldContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::Type_Context *> WatParser::Module_fieldContext::type_() {
  return getRuleContexts<WatParser::Type_Context>();
}

WatParser::Type_Context* WatParser::Module_fieldContext::type_(size_t i) {
  return getRuleContext<WatParser::Type_Context>(i);
}

std::vector<WatParser::SglobalContext *> WatParser::Module_fieldContext::sglobal() {
  return getRuleContexts<WatParser::SglobalContext>();
}

WatParser::SglobalContext* WatParser::Module_fieldContext::sglobal(size_t i) {
  return getRuleContext<WatParser::SglobalContext>(i);
}

std::vector<WatParser::TableContext *> WatParser::Module_fieldContext::table() {
  return getRuleContexts<WatParser::TableContext>();
}

WatParser::TableContext* WatParser::Module_fieldContext::table(size_t i) {
  return getRuleContext<WatParser::TableContext>(i);
}

std::vector<WatParser::MemoryContext *> WatParser::Module_fieldContext::memory() {
  return getRuleContexts<WatParser::MemoryContext>();
}

WatParser::MemoryContext* WatParser::Module_fieldContext::memory(size_t i) {
  return getRuleContext<WatParser::MemoryContext>(i);
}

std::vector<WatParser::Func_Context *> WatParser::Module_fieldContext::func_() {
  return getRuleContexts<WatParser::Func_Context>();
}

WatParser::Func_Context* WatParser::Module_fieldContext::func_(size_t i) {
  return getRuleContext<WatParser::Func_Context>(i);
}

std::vector<WatParser::ElemContext *> WatParser::Module_fieldContext::elem() {
  return getRuleContexts<WatParser::ElemContext>();
}

WatParser::ElemContext* WatParser::Module_fieldContext::elem(size_t i) {
  return getRuleContext<WatParser::ElemContext>(i);
}

std::vector<WatParser::DataContext *> WatParser::Module_fieldContext::data() {
  return getRuleContexts<WatParser::DataContext>();
}

WatParser::DataContext* WatParser::Module_fieldContext::data(size_t i) {
  return getRuleContext<WatParser::DataContext>(i);
}

std::vector<WatParser::Start_Context *> WatParser::Module_fieldContext::start_() {
  return getRuleContexts<WatParser::Start_Context>();
}

WatParser::Start_Context* WatParser::Module_fieldContext::start_(size_t i) {
  return getRuleContext<WatParser::Start_Context>(i);
}

std::vector<WatParser::SimportContext *> WatParser::Module_fieldContext::simport() {
  return getRuleContexts<WatParser::SimportContext>();
}

WatParser::SimportContext* WatParser::Module_fieldContext::simport(size_t i) {
  return getRuleContext<WatParser::SimportContext>(i);
}

std::vector<WatParser::Export_Context *> WatParser::Module_fieldContext::export_() {
  return getRuleContexts<WatParser::Export_Context>();
}

WatParser::Export_Context* WatParser::Module_fieldContext::export_(size_t i) {
  return getRuleContext<WatParser::Export_Context>(i);
}

std::vector<WatParser::TagContext *> WatParser::Module_fieldContext::tag() {
  return getRuleContexts<WatParser::TagContext>();
}

WatParser::TagContext* WatParser::Module_fieldContext::tag(size_t i) {
  return getRuleContext<WatParser::TagContext>(i);
}


size_t WatParser::Module_fieldContext::getRuleIndex() const {
  return WatParser::RuleModule_field;
}

void WatParser::Module_fieldContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_field(this);
}

void WatParser::Module_fieldContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_field(this);
}


std::any WatParser::Module_fieldContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_field(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_fieldContext* WatParser::module_field() {
  Module_fieldContext *_localctx = _tracker.createInstance<Module_fieldContext>(_ctx, getState());
  enterRule(_localctx, 160, WatParser::RuleModule_field);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1539); 
    _errHandler->sync(this);
    alt = 1;
    do {
      switch (alt) {
        case 1: {
              setState(1539);
              _errHandler->sync(this);
              switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 190, _ctx)) {
              case 1: {
                setState(1528);
                type_();
                break;
              }

              case 2: {
                setState(1529);
                sglobal();
                break;
              }

              case 3: {
                setState(1530);
                table();
                break;
              }

              case 4: {
                setState(1531);
                memory();
                break;
              }

              case 5: {
                setState(1532);
                func_();
                break;
              }

              case 6: {
                setState(1533);
                elem();
                break;
              }

              case 7: {
                setState(1534);
                data();
                break;
              }

              case 8: {
                setState(1535);
                start_();
                break;
              }

              case 9: {
                setState(1536);
                simport();
                break;
              }

              case 10: {
                setState(1537);
                export_();
                break;
              }

              case 11: {
                setState(1538);
                tag();
                break;
              }

              default:
                break;
              }
              break;
            }

      default:
        throw NoViableAltException(this);
      }
      setState(1541); 
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 191, _ctx);
    } while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Module_Context ------------------------------------------------------------------

WatParser::Module_Context::Module_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Module_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Module_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Module_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::Module_Context::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::Module_Context::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::Module_Context::getRuleIndex() const {
  return WatParser::RuleModule_;
}

void WatParser::Module_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule_(this);
}

void WatParser::Module_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule_(this);
}


std::any WatParser::Module_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Module_Context* WatParser::module_() {
  Module_Context *_localctx = _tracker.createInstance<Module_Context>(_ctx, getState());
  enterRule(_localctx, 162, WatParser::RuleModule_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1543);
    match(WatParser::LPAR);
    setState(1544);
    match(WatParser::MODULE);
    setState(1546);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::VAR) {
      setState(1545);
      match(WatParser::VAR);
    }
    setState(1551);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1548);
      module_field();
      setState(1553);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1554);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Inline_moduleContext ------------------------------------------------------------------

WatParser::Inline_moduleContext::Inline_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_fieldContext* WatParser::Inline_moduleContext::module_field() {
  return getRuleContext<WatParser::Module_fieldContext>(0);
}


size_t WatParser::Inline_moduleContext::getRuleIndex() const {
  return WatParser::RuleInline_module;
}

void WatParser::Inline_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterInline_module(this);
}

void WatParser::Inline_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitInline_module(this);
}


std::any WatParser::Inline_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitInline_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Inline_moduleContext* WatParser::inline_module() {
  Inline_moduleContext *_localctx = _tracker.createInstance<Inline_moduleContext>(_ctx, getState());
  enterRule(_localctx, 164, WatParser::RuleInline_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1557);
    _errHandler->sync(this);

    _la = _input->LA(1);
    if (_la == WatParser::LPAR) {
      setState(1556);
      module_field();
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Script_moduleContext ------------------------------------------------------------------

WatParser::Script_moduleContext::Script_moduleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::Script_moduleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::Script_moduleContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::MODULE() {
  return getToken(WatParser::MODULE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::BIN() {
  return getToken(WatParser::BIN, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::QUOTE() {
  return getToken(WatParser::QUOTE, 0);
}

tree::TerminalNode* WatParser::Script_moduleContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<tree::TerminalNode *> WatParser::Script_moduleContext::STRING_() {
  return getTokens(WatParser::STRING_);
}

tree::TerminalNode* WatParser::Script_moduleContext::STRING_(size_t i) {
  return getToken(WatParser::STRING_, i);
}


size_t WatParser::Script_moduleContext::getRuleIndex() const {
  return WatParser::RuleScript_module;
}

void WatParser::Script_moduleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript_module(this);
}

void WatParser::Script_moduleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript_module(this);
}


std::any WatParser::Script_moduleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript_module(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Script_moduleContext* WatParser::script_module() {
  Script_moduleContext *_localctx = _tracker.createInstance<Script_moduleContext>(_ctx, getState());
  enterRule(_localctx, 166, WatParser::RuleScript_module);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1573);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 197, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1559);
      module_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1560);
      match(WatParser::LPAR);
      setState(1561);
      match(WatParser::MODULE);
      setState(1563);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1562);
        match(WatParser::VAR);
      }
      setState(1565);
      _la = _input->LA(1);
      if (!(_la == WatParser::BIN

      || _la == WatParser::QUOTE)) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1569);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::STRING_) {
        setState(1566);
        match(WatParser::STRING_);
        setState(1571);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1572);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Action_Context ------------------------------------------------------------------

WatParser::Action_Context::Action_Context(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Action_Context::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::INVOKE() {
  return getToken(WatParser::INVOKE, 0);
}

WatParser::NameContext* WatParser::Action_Context::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

WatParser::Literal_listContext* WatParser::Action_Context::literal_list() {
  return getRuleContext<WatParser::Literal_listContext>(0);
}

tree::TerminalNode* WatParser::Action_Context::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::Action_Context::GET() {
  return getToken(WatParser::GET, 0);
}


size_t WatParser::Action_Context::getRuleIndex() const {
  return WatParser::RuleAction_;
}

void WatParser::Action_Context::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAction_(this);
}

void WatParser::Action_Context::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAction_(this);
}


std::any WatParser::Action_Context::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAction_(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Action_Context* WatParser::action_() {
  Action_Context *_localctx = _tracker.createInstance<Action_Context>(_ctx, getState());
  enterRule(_localctx, 168, WatParser::RuleAction_);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1592);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 200, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1575);
      match(WatParser::LPAR);
      setState(1576);
      match(WatParser::INVOKE);
      setState(1578);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1577);
        match(WatParser::VAR);
      }
      setState(1580);
      name();
      setState(1581);
      literal_list();
      setState(1582);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1584);
      match(WatParser::LPAR);
      setState(1585);
      match(WatParser::GET);
      setState(1587);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1586);
        match(WatParser::VAR);
      }
      setState(1589);
      name();
      setState(1590);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- AssertionContext ------------------------------------------------------------------

WatParser::AssertionContext::AssertionContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::AssertionContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_MALFORMED() {
  return getToken(WatParser::ASSERT_MALFORMED, 0);
}

WatParser::Script_moduleContext* WatParser::AssertionContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::AssertionContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::AssertionContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_INVALID() {
  return getToken(WatParser::ASSERT_INVALID, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_UNLINKABLE() {
  return getToken(WatParser::ASSERT_UNLINKABLE, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_TRAP() {
  return getToken(WatParser::ASSERT_TRAP, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_RETURN() {
  return getToken(WatParser::ASSERT_RETURN, 0);
}

WatParser::Action_Context* WatParser::AssertionContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

std::vector<WatParser::ResultContext *> WatParser::AssertionContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::AssertionContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_EXCEPTION() {
  return getToken(WatParser::ASSERT_EXCEPTION, 0);
}

tree::TerminalNode* WatParser::AssertionContext::ASSERT_EXHAUSTION() {
  return getToken(WatParser::ASSERT_EXHAUSTION, 0);
}


size_t WatParser::AssertionContext::getRuleIndex() const {
  return WatParser::RuleAssertion;
}

void WatParser::AssertionContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterAssertion(this);
}

void WatParser::AssertionContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitAssertion(this);
}


std::any WatParser::AssertionContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitAssertion(this);
  else
    return visitor->visitChildren(this);
}

WatParser::AssertionContext* WatParser::assertion() {
  AssertionContext *_localctx = _tracker.createInstance<AssertionContext>(_ctx, getState());
  enterRule(_localctx, 170, WatParser::RuleAssertion);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1646);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 202, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1594);
      match(WatParser::LPAR);
      setState(1595);
      match(WatParser::ASSERT_MALFORMED);
      setState(1596);
      script_module();
      setState(1597);
      match(WatParser::STRING_);
      setState(1598);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1600);
      match(WatParser::LPAR);
      setState(1601);
      match(WatParser::ASSERT_INVALID);
      setState(1602);
      script_module();
      setState(1603);
      match(WatParser::STRING_);
      setState(1604);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1606);
      match(WatParser::LPAR);
      setState(1607);
      match(WatParser::ASSERT_UNLINKABLE);
      setState(1608);
      script_module();
      setState(1609);
      match(WatParser::STRING_);
      setState(1610);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1612);
      match(WatParser::LPAR);
      setState(1613);
      match(WatParser::ASSERT_TRAP);
      setState(1614);
      script_module();
      setState(1615);
      match(WatParser::STRING_);
      setState(1616);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1618);
      match(WatParser::LPAR);
      setState(1619);
      match(WatParser::ASSERT_RETURN);
      setState(1620);
      action_();
      setState(1624);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1621);
        result();
        setState(1626);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1627);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1629);
      match(WatParser::LPAR);
      setState(1630);
      match(WatParser::ASSERT_EXCEPTION);
      setState(1631);
      action_();
      setState(1632);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1634);
      match(WatParser::LPAR);
      setState(1635);
      match(WatParser::ASSERT_TRAP);
      setState(1636);
      action_();
      setState(1637);
      match(WatParser::STRING_);
      setState(1638);
      match(WatParser::RPAR);
      break;
    }

    case 8: {
      enterOuterAlt(_localctx, 8);
      setState(1640);
      match(WatParser::LPAR);
      setState(1641);
      match(WatParser::ASSERT_EXHAUSTION);
      setState(1642);
      action_();
      setState(1643);
      match(WatParser::STRING_);
      setState(1644);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- CmdContext ------------------------------------------------------------------

WatParser::CmdContext::CmdContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Action_Context* WatParser::CmdContext::action_() {
  return getRuleContext<WatParser::Action_Context>(0);
}

WatParser::AssertionContext* WatParser::CmdContext::assertion() {
  return getRuleContext<WatParser::AssertionContext>(0);
}

WatParser::Script_moduleContext* WatParser::CmdContext::script_module() {
  return getRuleContext<WatParser::Script_moduleContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::REGISTER() {
  return getToken(WatParser::REGISTER, 0);
}

WatParser::NameContext* WatParser::CmdContext::name() {
  return getRuleContext<WatParser::NameContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

tree::TerminalNode* WatParser::CmdContext::THREAD() {
  return getToken(WatParser::THREAD, 0);
}

WatParser::Shared_cmd_listContext* WatParser::CmdContext::shared_cmd_list() {
  return getRuleContext<WatParser::Shared_cmd_listContext>(0);
}

tree::TerminalNode* WatParser::CmdContext::WAIT() {
  return getToken(WatParser::WAIT, 0);
}

WatParser::MetaContext* WatParser::CmdContext::meta() {
  return getRuleContext<WatParser::MetaContext>(0);
}


size_t WatParser::CmdContext::getRuleIndex() const {
  return WatParser::RuleCmd;
}

void WatParser::CmdContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterCmd(this);
}

void WatParser::CmdContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitCmd(this);
}


std::any WatParser::CmdContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitCmd(this);
  else
    return visitor->visitChildren(this);
}

WatParser::CmdContext* WatParser::cmd() {
  CmdContext *_localctx = _tracker.createInstance<CmdContext>(_ctx, getState());
  enterRule(_localctx, 172, WatParser::RuleCmd);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1674);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 206, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1648);
      action_();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1649);
      assertion();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1650);
      script_module();
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1651);
      match(WatParser::LPAR);
      setState(1652);
      match(WatParser::REGISTER);
      setState(1653);
      name();
      setState(1655);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1654);
        match(WatParser::VAR);
      }
      setState(1657);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1659);
      match(WatParser::LPAR);
      setState(1660);
      match(WatParser::THREAD);
      setState(1662);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1661);
        match(WatParser::VAR);
      }
      setState(1664);
      shared_cmd_list();
      setState(1665);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1667);
      match(WatParser::LPAR);
      setState(1668);
      match(WatParser::WAIT);
      setState(1670);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1669);
        match(WatParser::VAR);
      }
      setState(1672);
      match(WatParser::RPAR);
      break;
    }

    case 7: {
      enterOuterAlt(_localctx, 7);
      setState(1673);
      meta();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Shared_cmd_listContext ------------------------------------------------------------------

WatParser::Shared_cmd_listContext::Shared_cmd_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::LPAR() {
  return getTokens(WatParser::LPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::LPAR(size_t i) {
  return getToken(WatParser::LPAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::SHARED() {
  return getTokens(WatParser::SHARED);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::SHARED(size_t i) {
  return getToken(WatParser::SHARED, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::MODULE() {
  return getTokens(WatParser::MODULE);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::MODULE(size_t i) {
  return getToken(WatParser::MODULE, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::VAR() {
  return getTokens(WatParser::VAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::VAR(size_t i) {
  return getToken(WatParser::VAR, i);
}

std::vector<tree::TerminalNode *> WatParser::Shared_cmd_listContext::RPAR() {
  return getTokens(WatParser::RPAR);
}

tree::TerminalNode* WatParser::Shared_cmd_listContext::RPAR(size_t i) {
  return getToken(WatParser::RPAR, i);
}

std::vector<WatParser::CmdContext *> WatParser::Shared_cmd_listContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::Shared_cmd_listContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}


size_t WatParser::Shared_cmd_listContext::getRuleIndex() const {
  return WatParser::RuleShared_cmd_list;
}

void WatParser::Shared_cmd_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterShared_cmd_list(this);
}

void WatParser::Shared_cmd_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitShared_cmd_list(this);
}


std::any WatParser::Shared_cmd_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitShared_cmd_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Shared_cmd_listContext* WatParser::shared_cmd_list() {
  Shared_cmd_listContext *_localctx = _tracker.createInstance<Shared_cmd_listContext>(_ctx, getState());
  enterRule(_localctx, 174, WatParser::RuleShared_cmd_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    size_t alt;
    enterOuterAlt(_localctx, 1);
    setState(1685);
    _errHandler->sync(this);
    alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    while (alt != 2 && alt != atn::ATN::INVALID_ALT_NUMBER) {
      if (alt == 1) {
        setState(1676);
        match(WatParser::LPAR);
        setState(1677);
        match(WatParser::SHARED);
        setState(1678);
        match(WatParser::LPAR);
        setState(1679);
        match(WatParser::MODULE);
        setState(1680);
        match(WatParser::VAR);
        setState(1681);
        match(WatParser::RPAR);
        setState(1682);
        match(WatParser::RPAR); 
      }
      setState(1687);
      _errHandler->sync(this);
      alt = getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 207, _ctx);
    }
    setState(1691);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1688);
      cmd();
      setState(1693);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- MetaContext ------------------------------------------------------------------

WatParser::MetaContext::MetaContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::MetaContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::SCRIPT() {
  return getToken(WatParser::SCRIPT, 0);
}

tree::TerminalNode* WatParser::MetaContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::MetaContext::VAR() {
  return getToken(WatParser::VAR, 0);
}

std::vector<WatParser::CmdContext *> WatParser::MetaContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::MetaContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

tree::TerminalNode* WatParser::MetaContext::INPUT() {
  return getToken(WatParser::INPUT, 0);
}

tree::TerminalNode* WatParser::MetaContext::STRING_() {
  return getToken(WatParser::STRING_, 0);
}

tree::TerminalNode* WatParser::MetaContext::OUTPUT() {
  return getToken(WatParser::OUTPUT, 0);
}


size_t WatParser::MetaContext::getRuleIndex() const {
  return WatParser::RuleMeta;
}

void WatParser::MetaContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterMeta(this);
}

void WatParser::MetaContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitMeta(this);
}


std::any WatParser::MetaContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitMeta(this);
  else
    return visitor->visitChildren(this);
}

WatParser::MetaContext* WatParser::meta() {
  MetaContext *_localctx = _tracker.createInstance<MetaContext>(_ctx, getState());
  enterRule(_localctx, 176, WatParser::RuleMeta);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1726);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 214, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1694);
      match(WatParser::LPAR);
      setState(1695);
      match(WatParser::SCRIPT);
      setState(1697);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1696);
        match(WatParser::VAR);
      }
      setState(1702);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1699);
        cmd();
        setState(1704);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1705);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1706);
      match(WatParser::LPAR);
      setState(1707);
      match(WatParser::INPUT);
      setState(1709);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1708);
        match(WatParser::VAR);
      }
      setState(1711);
      match(WatParser::STRING_);
      setState(1712);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1713);
      match(WatParser::LPAR);
      setState(1714);
      match(WatParser::OUTPUT);
      setState(1716);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1715);
        match(WatParser::VAR);
      }
      setState(1718);
      match(WatParser::STRING_);
      setState(1719);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1720);
      match(WatParser::LPAR);
      setState(1721);
      match(WatParser::OUTPUT);
      setState(1723);
      _errHandler->sync(this);

      _la = _input->LA(1);
      if (_la == WatParser::VAR) {
        setState(1722);
        match(WatParser::VAR);
      }
      setState(1725);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_numContext ------------------------------------------------------------------

WatParser::Literal_numContext::Literal_numContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_numContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_numContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

WatParser::NumContext* WatParser::Literal_numContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::Literal_numContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}


size_t WatParser::Literal_numContext::getRuleIndex() const {
  return WatParser::RuleLiteral_num;
}

void WatParser::Literal_numContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_num(this);
}

void WatParser::Literal_numContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_num(this);
}


std::any WatParser::Literal_numContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_num(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_numContext* WatParser::literal_num() {
  Literal_numContext *_localctx = _tracker.createInstance<Literal_numContext>(_ctx, getState());
  enterRule(_localctx, 178, WatParser::RuleLiteral_num);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1728);
    match(WatParser::LPAR);
    setState(1729);
    match(WatParser::CONST);
    setState(1730);
    num();
    setState(1731);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_vecContext ------------------------------------------------------------------

WatParser::Literal_vecContext::Literal_vecContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_vecContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

tree::TerminalNode* WatParser::Literal_vecContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

std::vector<WatParser::NumContext *> WatParser::Literal_vecContext::num() {
  return getRuleContexts<WatParser::NumContext>();
}

WatParser::NumContext* WatParser::Literal_vecContext::num(size_t i) {
  return getRuleContext<WatParser::NumContext>(i);
}


size_t WatParser::Literal_vecContext::getRuleIndex() const {
  return WatParser::RuleLiteral_vec;
}

void WatParser::Literal_vecContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_vec(this);
}

void WatParser::Literal_vecContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_vec(this);
}


std::any WatParser::Literal_vecContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_vec(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_vecContext* WatParser::literal_vec() {
  Literal_vecContext *_localctx = _tracker.createInstance<Literal_vecContext>(_ctx, getState());
  enterRule(_localctx, 180, WatParser::RuleLiteral_vec);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1733);
    match(WatParser::LPAR);
    setState(1734);
    match(WatParser::VEC_CONST);
    setState(1735);
    match(WatParser::VEC_SHAPE);
    setState(1739);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while ((((_la & ~ 0x3fULL) == 0) &&
      ((1ULL << _la) & 56) != 0)) {
      setState(1736);
      num();
      setState(1741);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
    setState(1742);
    match(WatParser::RPAR);
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_refContext ------------------------------------------------------------------

WatParser::Literal_refContext::Literal_refContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::Literal_refContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

WatParser::Heap_typeContext* WatParser::Literal_refContext::heap_type() {
  return getRuleContext<WatParser::Heap_typeContext>(0);
}

tree::TerminalNode* WatParser::Literal_refContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_HOST() {
  return getToken(WatParser::REF_HOST, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::NAT() {
  return getToken(WatParser::NAT, 0);
}

tree::TerminalNode* WatParser::Literal_refContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}


size_t WatParser::Literal_refContext::getRuleIndex() const {
  return WatParser::RuleLiteral_ref;
}

void WatParser::Literal_refContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_ref(this);
}

void WatParser::Literal_refContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_ref(this);
}


std::any WatParser::Literal_refContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_ref(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_refContext* WatParser::literal_ref() {
  Literal_refContext *_localctx = _tracker.createInstance<Literal_refContext>(_ctx, getState());
  enterRule(_localctx, 182, WatParser::RuleLiteral_ref);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1757);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 216, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1744);
      match(WatParser::LPAR);
      setState(1745);
      match(WatParser::REF_NULL);
      setState(1746);
      heap_type();
      setState(1747);
      match(WatParser::RPAR);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1749);
      match(WatParser::LPAR);
      setState(1750);
      match(WatParser::REF_HOST);
      setState(1751);
      match(WatParser::NAT);
      setState(1752);
      match(WatParser::RPAR);
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1753);
      match(WatParser::LPAR);
      setState(1754);
      match(WatParser::REF_EXTERN);
      setState(1755);
      match(WatParser::NAT);
      setState(1756);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- LiteralContext ------------------------------------------------------------------

WatParser::LiteralContext::LiteralContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::LiteralContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_vecContext* WatParser::LiteralContext::literal_vec() {
  return getRuleContext<WatParser::Literal_vecContext>(0);
}

WatParser::Literal_refContext* WatParser::LiteralContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}


size_t WatParser::LiteralContext::getRuleIndex() const {
  return WatParser::RuleLiteral;
}

void WatParser::LiteralContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral(this);
}

void WatParser::LiteralContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral(this);
}


std::any WatParser::LiteralContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral(this);
  else
    return visitor->visitChildren(this);
}

WatParser::LiteralContext* WatParser::literal() {
  LiteralContext *_localctx = _tracker.createInstance<LiteralContext>(_ctx, getState());
  enterRule(_localctx, 184, WatParser::RuleLiteral);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1762);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 217, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1759);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1760);
      literal_vec();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1761);
      literal_ref();
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- Literal_listContext ------------------------------------------------------------------

WatParser::Literal_listContext::Literal_listContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

std::vector<WatParser::LiteralContext *> WatParser::Literal_listContext::literal() {
  return getRuleContexts<WatParser::LiteralContext>();
}

WatParser::LiteralContext* WatParser::Literal_listContext::literal(size_t i) {
  return getRuleContext<WatParser::LiteralContext>(i);
}


size_t WatParser::Literal_listContext::getRuleIndex() const {
  return WatParser::RuleLiteral_list;
}

void WatParser::Literal_listContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterLiteral_list(this);
}

void WatParser::Literal_listContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitLiteral_list(this);
}


std::any WatParser::Literal_listContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitLiteral_list(this);
  else
    return visitor->visitChildren(this);
}

WatParser::Literal_listContext* WatParser::literal_list() {
  Literal_listContext *_localctx = _tracker.createInstance<Literal_listContext>(_ctx, getState());
  enterRule(_localctx, 186, WatParser::RuleLiteral_list);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    enterOuterAlt(_localctx, 1);
    setState(1767);
    _errHandler->sync(this);
    _la = _input->LA(1);
    while (_la == WatParser::LPAR) {
      setState(1764);
      literal();
      setState(1769);
      _errHandler->sync(this);
      _la = _input->LA(1);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- NumpatContext ------------------------------------------------------------------

WatParser::NumpatContext::NumpatContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::NumContext* WatParser::NumpatContext::num() {
  return getRuleContext<WatParser::NumContext>(0);
}

tree::TerminalNode* WatParser::NumpatContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}


size_t WatParser::NumpatContext::getRuleIndex() const {
  return WatParser::RuleNumpat;
}

void WatParser::NumpatContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterNumpat(this);
}

void WatParser::NumpatContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitNumpat(this);
}


std::any WatParser::NumpatContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitNumpat(this);
  else
    return visitor->visitChildren(this);
}

WatParser::NumpatContext* WatParser::numpat() {
  NumpatContext *_localctx = _tracker.createInstance<NumpatContext>(_ctx, getState());
  enterRule(_localctx, 188, WatParser::RuleNumpat);

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1772);
    _errHandler->sync(this);
    switch (_input->LA(1)) {
      case WatParser::NAT:
      case WatParser::INT:
      case WatParser::FLOAT: {
        enterOuterAlt(_localctx, 1);
        setState(1770);
        num();
        break;
      }

      case WatParser::NAN_: {
        enterOuterAlt(_localctx, 2);
        setState(1771);
        match(WatParser::NAN_);
        break;
      }

    default:
      throw NoViableAltException(this);
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ResultContext ------------------------------------------------------------------

WatParser::ResultContext::ResultContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Literal_numContext* WatParser::ResultContext::literal_num() {
  return getRuleContext<WatParser::Literal_numContext>(0);
}

WatParser::Literal_refContext* WatParser::ResultContext::literal_ref() {
  return getRuleContext<WatParser::Literal_refContext>(0);
}

tree::TerminalNode* WatParser::ResultContext::LPAR() {
  return getToken(WatParser::LPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::CONST() {
  return getToken(WatParser::CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::NAN_() {
  return getToken(WatParser::NAN_, 0);
}

tree::TerminalNode* WatParser::ResultContext::RPAR() {
  return getToken(WatParser::RPAR, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_FUNC() {
  return getToken(WatParser::REF_FUNC, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF() {
  return getToken(WatParser::REF, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EQ() {
  return getToken(WatParser::REF_EQ, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_I31() {
  return getToken(WatParser::REF_I31, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_STRUCT() {
  return getToken(WatParser::REF_STRUCT, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_ARRAY() {
  return getToken(WatParser::REF_ARRAY, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_NULL() {
  return getToken(WatParser::REF_NULL, 0);
}

tree::TerminalNode* WatParser::ResultContext::REF_EXTERN() {
  return getToken(WatParser::REF_EXTERN, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_CONST() {
  return getToken(WatParser::VEC_CONST, 0);
}

tree::TerminalNode* WatParser::ResultContext::VEC_SHAPE() {
  return getToken(WatParser::VEC_SHAPE, 0);
}

std::vector<WatParser::NumpatContext *> WatParser::ResultContext::numpat() {
  return getRuleContexts<WatParser::NumpatContext>();
}

WatParser::NumpatContext* WatParser::ResultContext::numpat(size_t i) {
  return getRuleContext<WatParser::NumpatContext>(i);
}

tree::TerminalNode* WatParser::ResultContext::EITHER() {
  return getToken(WatParser::EITHER, 0);
}

std::vector<WatParser::ResultContext *> WatParser::ResultContext::result() {
  return getRuleContexts<WatParser::ResultContext>();
}

WatParser::ResultContext* WatParser::ResultContext::result(size_t i) {
  return getRuleContext<WatParser::ResultContext>(i);
}


size_t WatParser::ResultContext::getRuleIndex() const {
  return WatParser::RuleResult;
}

void WatParser::ResultContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterResult(this);
}

void WatParser::ResultContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitResult(this);
}


std::any WatParser::ResultContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitResult(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ResultContext* WatParser::result() {
  ResultContext *_localctx = _tracker.createInstance<ResultContext>(_ctx, getState());
  enterRule(_localctx, 190, WatParser::RuleResult);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1802);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 222, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1774);
      literal_num();
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1775);
      literal_ref();
      break;
    }

    case 3: {
      enterOuterAlt(_localctx, 3);
      setState(1776);
      match(WatParser::LPAR);
      setState(1777);
      match(WatParser::CONST);
      setState(1778);
      match(WatParser::NAN_);
      setState(1779);
      match(WatParser::RPAR);
      break;
    }

    case 4: {
      enterOuterAlt(_localctx, 4);
      setState(1780);
      match(WatParser::LPAR);
      setState(1781);
      _la = _input->LA(1);
      if (!((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 13717511363100672) != 0))) {
      _errHandler->recoverInline(this);
      }
      else {
        _errHandler->reportMatch(this);
        consume();
      }
      setState(1782);
      match(WatParser::RPAR);
      break;
    }

    case 5: {
      enterOuterAlt(_localctx, 5);
      setState(1783);
      match(WatParser::LPAR);
      setState(1784);
      match(WatParser::VEC_CONST);
      setState(1785);
      match(WatParser::VEC_SHAPE);
      setState(1789);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while ((((_la & ~ 0x3fULL) == 0) &&
        ((1ULL << _la) & 56) != 0) || _la == WatParser::NAN_) {
        setState(1786);
        numpat();
        setState(1791);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1792);
      match(WatParser::RPAR);
      break;
    }

    case 6: {
      enterOuterAlt(_localctx, 6);
      setState(1793);
      match(WatParser::LPAR);
      setState(1794);
      match(WatParser::EITHER);
      setState(1798);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1795);
        result();
        setState(1800);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1801);
      match(WatParser::RPAR);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ScriptContext ------------------------------------------------------------------

WatParser::ScriptContext::ScriptContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

tree::TerminalNode* WatParser::ScriptContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::CmdContext *> WatParser::ScriptContext::cmd() {
  return getRuleContexts<WatParser::CmdContext>();
}

WatParser::CmdContext* WatParser::ScriptContext::cmd(size_t i) {
  return getRuleContext<WatParser::CmdContext>(i);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ScriptContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ScriptContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ScriptContext::getRuleIndex() const {
  return WatParser::RuleScript;
}

void WatParser::ScriptContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterScript(this);
}

void WatParser::ScriptContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitScript(this);
}


std::any WatParser::ScriptContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitScript(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ScriptContext* WatParser::script() {
  ScriptContext *_localctx = _tracker.createInstance<ScriptContext>(_ctx, getState());
  enterRule(_localctx, 192, WatParser::RuleScript);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1818);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 225, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1807);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1804);
        cmd();
        setState(1809);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1810);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1812); 
      _errHandler->sync(this);
      _la = _input->LA(1);
      do {
        setState(1811);
        module_field();
        setState(1814); 
        _errHandler->sync(this);
        _la = _input->LA(1);
      } while (_la == WatParser::LPAR);
      setState(1816);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

//----------------- ModuleContext ------------------------------------------------------------------

WatParser::ModuleContext::ModuleContext(ParserRuleContext *parent, size_t invokingState)
  : ParserRuleContext(parent, invokingState) {
}

WatParser::Module_Context* WatParser::ModuleContext::module_() {
  return getRuleContext<WatParser::Module_Context>(0);
}

tree::TerminalNode* WatParser::ModuleContext::EOF() {
  return getToken(WatParser::EOF, 0);
}

std::vector<WatParser::Module_fieldContext *> WatParser::ModuleContext::module_field() {
  return getRuleContexts<WatParser::Module_fieldContext>();
}

WatParser::Module_fieldContext* WatParser::ModuleContext::module_field(size_t i) {
  return getRuleContext<WatParser::Module_fieldContext>(i);
}


size_t WatParser::ModuleContext::getRuleIndex() const {
  return WatParser::RuleModule;
}

void WatParser::ModuleContext::enterRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->enterModule(this);
}

void WatParser::ModuleContext::exitRule(tree::ParseTreeListener *listener) {
  auto parserListener = dynamic_cast<WatParserListener *>(listener);
  if (parserListener != nullptr)
    parserListener->exitModule(this);
}


std::any WatParser::ModuleContext::accept(tree::ParseTreeVisitor *visitor) {
  if (auto parserVisitor = dynamic_cast<WatParserVisitor*>(visitor))
    return parserVisitor->visitModule(this);
  else
    return visitor->visitChildren(this);
}

WatParser::ModuleContext* WatParser::module() {
  ModuleContext *_localctx = _tracker.createInstance<ModuleContext>(_ctx, getState());
  enterRule(_localctx, 194, WatParser::RuleModule);
  size_t _la = 0;

#if __cplusplus > 201703L
  auto onExit = finally([=, this] {
#else
  auto onExit = finally([=] {
#endif
    exitRule();
  });
  try {
    setState(1830);
    _errHandler->sync(this);
    switch (getInterpreter<atn::ParserATNSimulator>()->adaptivePredict(_input, 227, _ctx)) {
    case 1: {
      enterOuterAlt(_localctx, 1);
      setState(1820);
      module_();
      setState(1821);
      match(WatParser::EOF);
      break;
    }

    case 2: {
      enterOuterAlt(_localctx, 2);
      setState(1826);
      _errHandler->sync(this);
      _la = _input->LA(1);
      while (_la == WatParser::LPAR) {
        setState(1823);
        module_field();
        setState(1828);
        _errHandler->sync(this);
        _la = _input->LA(1);
      }
      setState(1829);
      match(WatParser::EOF);
      break;
    }

    default:
      break;
    }
   
  }
  catch (RecognitionException &e) {
    _errHandler->reportError(this, e);
    _localctx->exception = std::current_exception();
    _errHandler->recover(this, _localctx->exception);
  }

  return _localctx;
}

void WatParser::initialize() {
#if ANTLR4_USE_THREAD_LOCAL_CACHE
  watparserParserInitialize();
#else
  ::antlr4::internal::call_once(watparserParserOnceFlag, watparserParserInitialize);
#endif
}
